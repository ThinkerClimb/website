<!--
 ____________________________________________________________
|                                                            |
|    DESIGN + Pat Heard { http://fullahead.org }             |
|      DATE + 2006.09.12                                     |
| COPYRIGHT + Free use if this notice is kept in place.      |
|____________________________________________________________|

-->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>司徒的教學網站</title>
  <meta http-lowast="content-type" content="application/xhtml+xml; charset=UTF-8" />
  <meta name="author" content="fullahead.org" />
  <meta name="keywords" content="XHTML, CSS, template, FullAhead" />
  <meta name="description" content="A valid, XHTML 1.0 template" />
  <meta name="robots" content="index, follow, noarchive" />
  <meta name="googlebot" content="noarchive" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes, minimum-scale=0.1, maximum-scale=100.0"/>

  <link rel="shortcut icon" href="../../../../website.ico">
  <link rel="stylesheet" type="text/css" href="../../../styles/shCore.css" />
  <link rel="stylesheet" type="text/css" href="../../../styles/shThemeDefault.css" />
  <link rel="stylesheet" type="text/css" href="../../../css/html.css" media="screen, projection, tv " />
  <link rel="stylesheet" type="text/css" href="../../../css/layout.css" media="screen, projection, tv" />
  <link rel="stylesheet" type="text/css" href="../../../css/print.css" media="print" />
  
  <script type="text/javascript" src="../../../scripts/shCore.js"></script>
  <script type="text/javascript" src="../../../scripts/shBrushCpp.js"></script>

  <!-- Conditional comment to apply opacity fix for IE #content background.
       Invalid CSS, but can be removed without harming design -->
  <!--[if gt IE 5]>
  <link rel="stylesheet" type="text/css" href="css/ie.css" media="screen, projection, tv " />
  <![endif]-->
</head>

<body>
<script type="text/javascript">SyntaxHighlighter.all();</script>
<div id="wrapper">
<div id="content">
<script type="text/javascript" src="../../../header.js"></script>
<div id="page">
<h3>SDL 1.2 &gt;&gt; Assembly (x64) &gt;&gt; Basic</h3>
<p><b>安装環境</b></p>
<hr size="1">
<p>
有感於目前網路上，專門介紹SDL Assembly(ARM、x64)的相關教學文章相對缺少，因此，司徒打算花一些時間好好整理一下這方面的相關教學，希望藉由這一系列的教學，讓使用者可以更深層理解SDL的運作細節，也算是司徒對於熱愛Assembly所做的貢獻！目前司徒是在Debian x64平台做測試，使用者可以用實體PC或者虛擬機安裝測試，而目前可以於x64平台使用的Assembler包含：GAS(GNU Assembler)、NASM(Netwide Assembler)、FASM(Flat Assembler)等組譯器，有鑑於其它平台(如：ARM、MIPS)，主要還是使用GAS組譯器，因此，為了可以達到共用Include檔案以及Macro巨集，司徒最終選擇使用GAS組譯器，當作這系列教學文章的組譯器，加上目前GAS的相關教學文章也比較稀少，司徒剛好可以補足這一小部份的教學。<br><br>

安裝步驟就如同C/C++的開發環境一樣，只要安裝GCC、SDL相關套件即可，雖然很多Include檔案都需要手動改寫，加上許多SDL API都是再度被封裝，因此，當發現無法編譯成功或者執行有問題時，最快速的方式就是用GDB Debug或者使用逆向工程手法進行理解，雖然感覺有點複雜，其實掌握關鍵技巧就可以快速理解。<br><br>



main.c
</p>
<pre class="brush:cpp">
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;SDL.h&gt;
 
int main(int argc, char* args[])
{
  if(SDL_Init(SDL_INIT_VIDEO) != 0){
    printf("%s, failed to SDL_Init\n", __func__);
    return -1;
  }
 
  SDL_Surface* screen;
  screen = SDL_SetVideoMode(320, 240, 32, SDL_HWSURFACE);
  if(screen == NULL){
    printf("%s, failed to SDL_SetVideMode\n", __func__);
    return -1;
  }
 
  SDL_Surface* bmp = SDL_LoadBMP("hello.bmp");
  if(bmp == NULL){
    printf("%s, failed to SDL_LoadBMP\n", __func__);
    return -1;
  }
 
  SDL_ShowCursor(0);
  SDL_BlitSurface(bmp, NULL, screen, NULL);
  SDL_Flip(screen);
  SDL_Delay(10000);
  SDL_FreeSurface(bmp);
  SDL_Quit();
  return 0;    
}
</pre><br>

<p>
GBD Debug的片段：
</p>
<pre>
(gdb) b main
Breakpoint 1 at 0x555555554abf: file main.c, line 7.
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/steward/Downloads/main main
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".

Breakpoint 1, main (argc=2, args=0x7fffffffe218) at main.c:7
7	  if(SDL_Init(SDL_INIT_VIDEO) != 0){
(gdb) disas
Dump of assembler code for function main:
   0x0000555555554ab0 &lt;+0&gt;:	push   %rbp
   0x0000555555554ab1 &lt;+1&gt;:	mov    %rsp,%rbp
   0x0000555555554ab4 &lt;+4&gt;:	sub    $0x20,%rsp
   0x0000555555554ab8 &lt;+8&gt;:	mov    %edi,-0x14(%rbp)
   0x0000555555554abb &lt;+11&gt;:	mov    %rsi,-0x20(%rbp)
=&gt; 0x0000555555554abf &lt;+15&gt;:	mov    $0x20,%edi
   0x0000555555554ac4 &lt;+20&gt;:	callq  0x555555554920 &lt;SDL_Init@plt&gt;
   0x0000555555554ac9 &lt;+25&gt;:	test   %eax,%eax
   0x0000555555554acb &lt;+27&gt;:	je     0x555555554aef &lt;main+63&gt;
   0x0000555555554acd &lt;+29&gt;:	lea    0x1f3(%rip),%rsi        # 0x555555554cc7 &lt;__func__.4304&gt;
   0x0000555555554ad4 &lt;+36&gt;:	lea    0x18d(%rip),%rdi        # 0x555555554c68
   0x0000555555554adb &lt;+43&gt;:	mov    $0x0,%eax
   0x0000555555554ae0 &lt;+48&gt;:	callq  0x5555555548c0 &lt;printf@plt&gt;
   0x0000555555554ae5 &lt;+53&gt;:	mov    $0xffffffff,%eax
   0x0000555555554aea &lt;+58&gt;:	jmpq   0x555555554bcf &lt;main+287&gt;
   0x0000555555554aef &lt;+63&gt;:	mov    $0x1,%ecx
   0x0000555555554af4 &lt;+68&gt;:	mov    $0x20,%edx
   0x0000555555554af9 &lt;+73&gt;:	mov    $0xf0,%esi
   0x0000555555554afe &lt;+78&gt;:	mov    $0x140,%edi
   0x0000555555554b03 &lt;+83&gt;:	callq  0x555555554950 &lt;SDL_SetVideoMode@plt&gt;
   0x0000555555554b08 &lt;+88&gt;:	mov    %rax,-0x8(%rbp)
   0x0000555555554b0c &lt;+92&gt;:	cmpq   $0x0,-0x8(%rbp)
   0x0000555555554b11 &lt;+97&gt;:	jne    0x555555554b35 &lt;main+133&gt;
   0x0000555555554b13 &lt;+99&gt;:	lea    0x1ad(%rip),%rsi        # 0x555555554cc7 &lt;__func__.4304&gt;
   0x0000555555554b1a &lt;+106&gt;:	lea    0x15f(%rip),%rdi        # 0x555555554c80
   0x0000555555554b21 &lt;+113&gt;:	mov    $0x0,%eax
   0x0000555555554b26 &lt;+118&gt;:	callq  0x5555555548c0 &lt;printf@plt&gt;
   0x0000555555554b2b &lt;+123&gt;:	mov    $0xffffffff,%eax
   0x0000555555554b30 &lt;+128&gt;:	jmpq   0x555555554bcf &lt;main+287&gt;
   0x0000555555554b35 &lt;+133&gt;:	lea    0x163(%rip),%rsi        # 0x555555554c9f
   0x0000555555554b3c &lt;+140&gt;:	lea    0x15f(%rip),%rdi        # 0x555555554ca2
   0x0000555555554b43 &lt;+147&gt;:	callq  0x5555555548f0 &lt;SDL_RWFromFile@plt&gt;
   0x0000555555554b48 &lt;+152&gt;:	mov    $0x1,%esi
   0x0000555555554b4d &lt;+157&gt;:	mov    %rax,%rdi
   0x0000555555554b50 &lt;+160&gt;:	callq  0x555555554930 &lt;SDL_LoadBMP_RW@plt&gt;
</pre>
<p>
使用Assembly寫SDL程式，就是依樣畫葫蘆(照學C/C++的寫法)，了解x64 Calling Convention就可以發現相當容易理解，從上面Disassembly才知道，原來SDL_LoadBMP()是SDL_RWFromFile()和SDL_LoadBMP_RW()的封裝，是不是感覺更深層掌握到SDL的運作細節呢！
</p>

<p>
<br><a href="../../../program.htm">返回上一頁</a>
</p>

</div>
</div>
</div>
</body>
</html>
