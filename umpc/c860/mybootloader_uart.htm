<!--
 ____________________________________________________________
|                                                            |
|    DESIGN + Pat Heard { http://fullahead.org }             |
|      DATE + 2006.09.12                                     |
| COPYRIGHT + Free use if this notice is kept in place.      |
|____________________________________________________________|

-->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>司徒的教學網站</title>
  <meta http-lowast="content-type" content="application/xhtml+xml; charset=UTF-8" />
  <meta name="author" content="fullahead.org" />
  <meta name="keywords" content="XHTML, CSS, template, FullAhead" />
  <meta name="description" content="A valid, XHTML 1.0 template" />
  <meta name="robots" content="index, follow, noarchive" />
  <meta name="googlebot" content="noarchive" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes, minimum-scale=0.1, maximum-scale=100.0"/>

  <link rel="shortcut icon" href="../../website.ico">
  <link rel="stylesheet" type="text/css" href="../../styles/shCore.css" />
  <link rel="stylesheet" type="text/css" href="../../styles/shThemeDefault.css" />
  <link rel="stylesheet" type="text/css" href="../../css/html.css" media="screen, projection, tv " />
  <link rel="stylesheet" type="text/css" href="../../css/layout.css" media="screen, projection, tv" />
  <link rel="stylesheet" type="text/css" href="../../css/print.css" media="print" />
  
  <script type="text/javascript" src="../../scripts/shCore.js"></script>
  <script type="text/javascript" src="../../scripts/shBrushCpp.js"></script>

  <!-- Conditional comment to apply opacity fix for IE #content background.
       Invalid CSS, but can be removed without harming design -->
  <!--[if gt IE 5]>
  <link rel="stylesheet" type="text/css" href="css/ie.css" media="screen, projection, tv " />
  <![endif]-->
</head>

<body>
<script type="text/javascript">SyntaxHighlighter.all();</script>
<div id="wrapper">
<div id="content">
<script type="text/javascript" src="../../header.js"></script>
<div id="page">
<h3>Sharp Zaurus SL-C860</h3>
<p><b>(MyBootloader) UART</b></p>
<hr szie="1">
<p>
雖然目前市面上已經有許多可以提供快速移植的Bootloader程式，如：UBoot、Blob、RedBoot、vivi、Bootldr、ABLE等程式，這一些程式可以提供大部分的平台移植，然而，對於沒有接觸過組合語言、底層程式或者硬體的使用者，想要移植Bootloader程式，也只能一步一步照著網友的做法製作，司徒覺得很多人都會有一個疑問：這一些參數跟程式的作用是什麼呢？
</p>

<p>
Bootloader程式是很貼近硬體的東西，沒有好好研究一下硬體規格，很難繼續製作下去的，另外一點就是組合語言對於現代人來說是很不想投入學習的語言，因為它比較難懂而且難維護，但是，反觀它的優點，除了可以訓練邏輯思考，更可以提升程式設計師對效能的思考，司徒覺得更勝於缺點。
</p>

<p>
那既然要學習Bootloader程式，司徒覺得原汁原味還是最棒的，也就是從頭學起，包括：找硬體規格書以及寫組合語言程式，這些是蠻費時費力的，但是，學完之後，使用者一定會收穫很多的東西。
</p>

<p>
接下來我們開始撰寫Bootloader程式，不過寫程式之前，我們需要取得PXA255的硬體規格書，目前我們僅需要<b>Intel PXA255 Processor Developer's Manual</b>這一份規格書，最主要是它有說明Register位址以及RAM Map的位置，各位使用Google搜尋下載即可，接著是PXA255 Cross Compiler，必須使用它來編譯程式給SL-C860機器執行，使用者可以從<a href="http://distro.ibiblio.org/pdaxrom/download/1.1.0beta1/Zaurus-7x0-860/arm-cacko-linux-gnu-2.95.3-2.15-2.2.5-hardfloat-10.48_20.12.05.tar.bz2">這裡</a>取得，該Cross Compiler已經編譯成執行檔了，使用者不用重新編譯，直接解壓縮就可以使用
</p>

<pre>
# cp arm-cacko-linux-gnu-2.95.3-2.15-2.2.5-hardfloat-10.48_20.12.05.tar.bz2 /
# cd /
# bzip2 -d arm-cacko-linux-gnu-2.95.3-2.15-2.2.5-hardfloat-10.48_20.12.05.tar.bz2
# tar xvf arm-cacko-linux-gnu-2.95.3-2.15-2.2.5-hardfloat-10.48_20.12.05.tar
# export PATH=$PATH:/opt/cross/arm/2.95.3-2.15/bin/
</pre>

<p>
<b>編寫start.S</b><br>
Bootloader的功能可以很複雜也可以很簡潔，我們的目標當然是朝簡單，因為一下子介紹太多東西，說真的，沒達到目的反而得到反效果，目前我們的目標是希望可以透過UART傳送開機訊息並將工作分成：開機初始化、RAM初始化、GPIO初始化、UART初始化以及傳送開機畫面等項目。
</p>

<p>
接著開始寫程式，首先，定義初始化需要使用到的Register
</p>

<pre class="brush:cpp">
/*======================================================================
 Copyright (C) 2012 by Steward_Fu
 All rights reserved.
======================================================================*/
.equ CKEN,              0x41300004      @ Clock Enable Register
.equ CKEN6_FFUART,      0x40            @ Enable FFUART Color

.equ PMCR,              0x40F00000      @ Power Manager Control Register
.equ PSSR,              0x40F00004      @ Power Manager Sleep Status Register
.equ PSPR,              0x40F00008      @ Power Manager Scratch Pad Register
.equ PWER,              0x40F0000C      @ Power Manager Wake-up Enable Register
.equ PRER,              0x40F00010      @ Power Manager GPIO Rising-Edge Detect Enable Register
.equ PFER,              0x40F00014      @ Power Manager GPIO Falling-Edge Detect Enable Register
.equ PEDR,              0x40F00018      @ Power Manager GPIO Edge Detect Status Register
.equ PCFR,              0x40F0001C      @ Power Manager General Configuration Register
.equ PGSR0,             0x40F00020      @ Power Manager GPIO Sleep State Register for GP[31-0]
.equ PGSR1,             0x40F00024      @ Power Manager GPIO Sleep State Register for GP[63-32]
.equ PGSR2,             0x40F00028      @ Power Manager GPIO Sleep State Register for GP[84-64]
.equ RCSR,              0x40F00030      @ Reset Controller Status Register

.equ FFRBR,             0x40100000      @ FFRBR Receive Buffer Register (read only)
.equ FFTHR,             0x40100000      @ FFTHR Transmit Holding Register (write only)
.equ FFIER,             0x40100004      @ FFIER Interrupt Enable Register (read/write)
.equ FFIIR,             0x40100008      @ FFIIR Interrupt ID Register (read only)
.equ FFFCR,             0x40100008      @ FFFCR FIFO Control Register (write only)
.equ FFLCR,             0x4010000C      @ FFLCR Line Control Register (read/write)
.equ FFMCR,             0x40100010      @ FFMCR Modem Control Register (read/write)
.equ FFLSR,             0x40100014      @ FFLSR Line Status Register (read only)
.equ FFMSR,             0x40100018      @ FFMSR Modem Status Register (read only)
.equ FFSPR,             0x4010001C      @ FFSPR Scratch Pad Register (read/write)
.equ FFISR,             0x40100020      @ FFISR Infrared Selection Register (read/write)
.equ FFDLL,             0x40100000      @ FFDLL Divisor Latch Low Register (DLAB = 1) (read/write)
.equ FFDLH,             0x40100004      @ FFDLH

.equ GPLR0,             0x40E00000      @ GPIO Pin-Level Register GPIO<31:0>
.equ GPLR1,             0x40E00004      @ GPIO Pin-Level Register GPIO<63:32>
.equ GPLR2,             0x40E00008      @ GPIO Pin-Level Register GPIO<80:64>
.equ GPDR0,             0x40E0000C      @ GPIO Pin Direction Register GPIO<31:0>
.equ GPDR1,             0x40E00010      @ GPIO Pin Direction Register GPIO<63:32>
.equ GPDR2,             0x40E00014      @ GPIO Pin Direction Register GPIO<80:64>
.equ GPSR0,             0x40E00018      @ GPIO Pin Direction Register GPIO<31:0>
.equ GPSR1,             0x40E0001C      @ GPIO Pin Output Set Register GPIO<63:32>
.equ GPSR2,             0x40E00020      @ GPIO Pin Output Set Register GPIO<80:64>
.equ GPCR0,             0x40E00024      @ GPIO Pin Output Clear Register GPIO<31:0>
.equ GPCR1,             0x40E00028      @ GPIO Pin Output Clear Register GPIO <63:32>
.equ GPCR2,             0x40E0002C      @ GPIO Pin Output Clear Register GPIO <80:64>
.equ GRER0,             0x40E00030      @ GPIO Rising-Edge Detect Register GPIO<31:0>
.equ GRER1,             0x40E00034      @ GPIO Rising-Edge Detect Register GPIO<63:32>
.equ GRER2,             0x40E00038      @ GPIO Rising-Edge Detect Register GPIO<80:64>
.equ GFER0,             0x40E0003C      @ GPIO Falling-Edge Detect Register GPIO<31:0>
.equ GFER1,             0x40E00040      @ GPIO Falling-Edge Detect Register GPIO<63:32>
.equ GFER2,             0x40E00044      @ GPIO Falling-Edge Detect Register GPIO<80:64>
.equ GEDR0,             0x40E00048      @ GPIO Edge Detect Status Register GPIO<31:0>
.equ GEDR1,             0x40E0004C      @ GPIO Edge Detect Status Register GPIO<63:32>
.equ GEDR2,             0x40E00050      @ GPIO Edge Detect Status Register GPIO<80:64>
.equ GAFR0_L,           0x40E00054      @ GPIO Alternate Function Select Register GPIO<15:0>
.equ GAFR0_U,           0x40E00058      @ GPIO Alternate Function Select Register GPIO<31:16>
.equ GAFR1_L,           0x40E0005C      @ GPIO Alternate Function Select Register GPIO<47:32>
.equ GAFR1_U,           0x40E00060      @ GPIO Alternate Function Select Register GPIO<63:48>
.equ GAFR2_L,           0x40E00064      @ GPIO Alternate Function Select Register GPIO<79:64>
</pre>

<p>
ARM微處理器本身的中斷向量具備固定的格式，第一個(0x0000)中斷向量固定為Reset，在Power On之後，程式就會跳到這個中斷向量執行，因為每個中斷向量都有固定的位址，所以只能有4 Bytes的空間，這樣的空間根本無法容下初始化程式，所以一般的做法都會做跳耀的動作
</p>

<pre class="brush:cpp">
.global _start
.global _ld_flash_code_start_
.global _ld_flash_code_end_
.global _ld_flash_code_size_
.global _ld_flash_data_start_
.global _ld_flash_data_end_
.global _ld_flash_data_size_
.global _ld_flash_bss_start_
.global _ld_flash_bss_end_
.global _ld_flash_bss_size_

.section "vectors"
_start:
 b begin
 nop
 nop
 nop
 nop
 nop
 nop
 nop
</pre>

<p>
初始化程式包含：切換模式成Supervisor模式、重定位RAM、初始化GPIO、初始化UART、顯示開機選單，最後則是無限迴圈。
</p>

<table>
  <thead>
    <tr>
      <th align="right">.align</th>
      <td>程式碼對齊</td>
    </tr>
    <tr>
      <th align="right">.text</th>
      <td>區段定義，一般都把.text定義成程式碼區段</td>
    </tr>
    <tr>
      <th align="right">.word</th>
      <td>定義WORD數字，初始化需要使用到LD Script的數字</td>
    </tr>
    <tr>
      <th align="right">begin</th>
      <td>初始化程式</td>
    </tr>
    <tr>
      <th align="right">supervisor_mode</th>
      <td>切換成Supervisor模式</td>
    </tr>
    <tr>
      <th align="right">relocate_ram</th>
      <td>重定位RAM</td>
    </tr>
    <tr>
      <th align="right">init_gpio</th>
      <td>初始化GPIO</td>
    </tr>
    <tr>
      <th align="right">init_uart</th>
      <td>初始化 UART</td>
    </tr>
    <tr>
      <th align="right">show_welcome_msg</th>
      <td>傳送開機訊息</td>
    </tr>
  </thead>
</table>

<p>
程式碼開始的部分先定義相關的位址以及UART輸出的訊息
</p>

<pre class="brush:cpp">
.text
ld_flash_code_start:
 .word _start

ld_flash_data_start:
 .word _ld_flash_data_start_

ld_flash_bss_end:
 .word _ld_flash_bss_end_

ld_flash_data_size:
 .word _ld_flash_data_size_

ld_flash_bss_size:
 .word _ld_flash_bss_size_

ld_ram_data_start:
 .word 0xA0000200

.align
welcome_msg:
 .ascii "\r\n"
 .ascii "+--------------------------------------+\r\n"
 .ascii "| Welcome to Zaurus SL-C860 Bootloader |\r\n"
 .ascii "+--------------------------------------+\r\n"
 .asciz "#&gt; "

.align
begin:
 bl supervisor_mode
 bl relocate_ram
 bl init_gpio
 bl init_uart
 bl show_welcome_msg
stop:
 b stop
</pre>

<p>
透過CPSR Register的設定可以切換成Supervisor模式
</p>

<pre class="brush:cpp">
supervisor_mode:
 mrs r0, cpsr
 bic r0, r0, #0x1f
 orr r0, r0, #0x13
 msr cpsr, r0
 mov pc, lr
</pre>

<p>
重定位RAM的用途只是將data區段複製到實際RAM的位置就可以
</p>

<pre class="brush:cpp">
relocate_ram:
 ldr r0, ld_flash_data_start
 ldr r1, ld_ram_data_start
 ldr r2, ld_flash_data_size
 ldr r3, ld_flash_bss_size
 add r2, r2, r3

 sub r3, r1, r2
 sub sp, r3, #12
1:
 cmp r2, #0
 beq 2f
 ldrb r3, [r0]
 strb r3, [r1]
 subs r2, r2, #1
 b 1b
2:
 mov pc, lr
</pre>

<p>
初始化GPIO程式，除了把FFUART的輸入、輸出腳位功能開啟，其餘GPIO都設定成輸出並且設定成高準位
</p>

<pre class="brush:cpp">
init_gpio:
 ldr r1, =GPDR0
 ldr r0, =0xffffffff
 str r0, [r1]

 ldr r1, =GPDR1
 ldr r0, =0xffffffff
 str r0, [r1]

 ldr r1, =GPDR2
 ldr r0, =0xffffffff
 str r0, [r1]

 ldr r1, =GPSR0
 ldr r0, =0xffffffff
 str r0, [r1]

 ldr r1, =GPSR1
 ldr r0, =0xffffffff
 str r0, [r1]

 ldr r1, =GPSR2
 ldr r0, =0xffffffff
 str r0, [r1]

 ldr r1, =GAFR1_L
 ldr r0, =0x8010
 str r0, [r1]

 ldr r1, =PSSR
 ldr r0, =0x30
 str r0, [r1]

 mov pc, lr
</pre>

<p>
設定UART Register的定義跟x86 UART Register一樣，目前設定成<b>9600,n,8,1</b>
</p>

<pre class="brush:cpp">
init_uart:
 ldr r1, =CKEN
 ldr r0, [r1]
 orr r0, r0, #CKEN6_FFUART
 str r0, [r1]

 ldr r1, =FFIER
 ldr r0, =0
 str r0, [r1]

 ldr r1, =FFFCR
 ldr r0, =0
 str r0, [r1]

 ldr r1, =FFLCR
 ldr r0, =0x83
 str r0, [r1]

 ldr r1, =FFDLL
 ldr r0, =96
 str r0, [r1]

 ldr r1, =FFDLH
 ldr r0, =0
 str r0, [r1]

 ldr r1, =FFLCR
 ldr r0, =0x83
 str r0, [r1]

 ldr r1, =FFDLL
 ldr r0, =96
 str r0, [r1]

 ldr r1, =FFDLH
 ldr r0, =0
 str r0, [r1]

 ldr r1, =FFLCR
 ldr r0, =0x03
 str r0, [r1]

 ldr r1, =FFIER
 ldr r0, =0x40
 str r0, [r1]
 mov pc, lr
</pre>

<p>
傳送開機畫面程式，該副程式開始會先把LR Register的值先暫時儲存起來，因為還會繼續往下一層呼叫，避免LR Register被更改到，將R2指到welcome_msg的位址，接著呼叫uart_send_string
</p>

<pre class="brush:cpp">
show_welcome_msg:
 mov r5, lr
 adr r2, welcome_msg
 bl uart_send_string
 mov pc, r5
</pre>

<p>
UART傳送字串副程式，在此程式中還會再呼叫更深層的傳送字元副程式
</p>

<pre class="brush:cpp">
uart_send_string:
 mov r6, lr
1:
 ldrb r0, [r2], #1
 cmp r0, #0
 beq 2f
 bl uart_send_char
 b 1b
2:
 mov pc, r6
</pre>

<p>
UART傳送字元副程式
</p>

<pre class="brush:cpp">
uart_send_char:
 ldr r1, =FFTHR
 str r0, [r1]
1:
 ldr r1, =FFLSR
 ldr r0, [r1]
 tst r0, #0x40
 beq 1b
 mov pc, lr
</pre>

<p>
UART接收字元副程式
</p>

<pre class="brush:cpp">
uart_get_char:
 ldr r1, =FFLSR
 ldr r0, [r1]
 tst r0, #0x01
 beq uart_get_char
 ldr r1, =FFRBR
 ldr r0, [r1]
 mov pc, lr
</pre>

<p>
Welcome字串<br>
 .ascii是定義ASCII字串<br>
 .asciz也是定義字串，差別只是在最後結尾的地方加上'\0'結束字元
</p>

<pre class="brush:cpp">
.align
welcome_msg:
 .ascii "\r\n"
 .ascii "+--------------------------------------+\r\n"
 .ascii "| Welcome to Zaurus SL-C860 Bootloader |\r\n"
 .ascii "+--------------------------------------+\r\n"
 .asciz "#&gt; "
</pre>

<p>
<b>編寫LD Script</b><br>
LD Script格式有相關規範的定義，這一部份請參考司徒其它教學文章，大致上的內容是描述各個Section的存放位址。
</p>

<pre class="brush:cpp">
OUTPUT_FORMAT("elf32-littlearm", "elf32-littlearm", "elf32-littlearm")
OUTPUT_ARCH(arm)
ENTRY(_start)
SECTIONS
{
 . = 0x00000000;
 . = ALIGN(4);
 _ld_flash_code_start_ = .;
 .text : {
  *(vectors)
  *(.text)
 }
 .rodata : {
  *(.rodata)
 }
 _ld_flash_code_end_ = .;
 _ld_flash_code_size_ = _ld_flash_code_end_ - _ld_flash_code_start_;

 . = ALIGN(4);
 _ld_flash_data_start_ = .;
 .data : {
  *(.data)
 }
 _ld_flash_data_end_ = .;
 _ld_flash_data_size_ = _ld_flash_data_start_ - _ld_flash_data_end_;

 . = ALIGN(4);
 _ld_flash_bss_start_ = .;
 .bss : {
  *(.bss)
 }
 _ld_flash_bss_end_ = .;
 _ld_flash_bss_size_ = _ld_flash_bss_end_ - _ld_flash_bss_start_;
}
</pre>

<p>
<b>編寫Makefile</b><br>
Makefile檔案會描述編譯過程所需要的編譯步驟。
</p>

<pre class="brush:cpp">
all : start.o
 arm-linux-gcc -g -nostdlib -o u-boot-elf32 start.o -T ld-c860
 arm-linux-objcopy -O binary u-boot-elf32 u-boot.bin

start.o : 
 arm-linux-gcc -march=armv5 -mtune=xscale -Wall -c start.S

clean : 
 rm -rf *.o
 rm -rf u-boot-elf32 u-boot.bin
</pre>

<p>
<b>編譯程式</b><br>
編寫好Makefile檔案後，只需要執行make指令即可，make指令會參考Makefile檔案做編譯的動作。
</p>

<pre>
# make clean
# make
</pre>

<p>
<b>燒錄Bootloader程式</b><br>
1. 首先下載司徒製作完的<a href="sharp_zaurus_sl_c860_my_bootloader_uart_1.zip">ZIP檔案</a>並且解壓縮<br>
2. 把<b>updater.sh</b>以及編譯完的<b>u-boot.bin</b>放在SDCard或CFCard<br>
3. 把SL-C860機器的電池以及電源線拔除<br>
4. 插入SDCard或CFCard<br>
5. 把電池開關切換至<b>使用中</b><br>
6. 按住OK按鍵並插入電池<br>
7. 選擇第四個選項<br>
<img src="mybootloader_uart/1.jpg" class="maxSize"><br>
8. 接上UART轉接板<br>
9. 選擇SDCard或CFCard<br>
10. 開啟終端機(Baudrate 9600bps)
</p>

<pre>
+--------------------------------------+
| Welcome to Zaurus SL-C860 Bootloader |
+--------------------------------------+
#&gt;
</pre>

<p>
<br><a href="../../umpc.htm">返回上一頁</a>
</p>

</div>
</div>
</div>
</body>
</html>
