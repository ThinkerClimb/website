<!--
 ____________________________________________________________
|                                                            |
|    DESIGN + Pat Heard { http://fullahead.org }             |
|      DATE + 2006.09.12                                     |
| COPYRIGHT + Free use if this notice is kept in place.      |
|____________________________________________________________|

-->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>司徒的教學網站</title>
  <meta http-lowast="content-type" content="application/xhtml+xml; charset=UTF-8" />
  <meta name="author" content="fullahead.org" />
  <meta name="keywords" content="XHTML, CSS, template, FullAhead" />
  <meta name="description" content="A valid, XHTML 1.0 template" />
  <meta name="robots" content="index, follow, noarchive" />
  <meta name="googlebot" content="noarchive" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes, minimum-scale=0.1, maximum-scale=100.0"/>

  <link rel="shortcut icon" href="../../../website.ico">
  <link rel="stylesheet" type="text/css" href="../../../styles/shCore.css" />
  <link rel="stylesheet" type="text/css" href="../../../styles/shThemeDefault.css" />
  <link rel="stylesheet" type="text/css" href="../../../css/html.css" media="screen, projection, tv " />
  <link rel="stylesheet" type="text/css" href="../../../css/layout.css" media="screen, projection, tv" />
  <link rel="stylesheet" type="text/css" href="../../../css/print.css" media="print" />
  
  <script type="text/javascript" src="../../../scripts/shCore.js"></script>
  <script type="text/javascript" src="../../../scripts/shBrushCpp.js"></script>

  <!-- Conditional comment to apply opacity fix for IE #content background.
       Invalid CSS, but can be removed without harming design -->
  <!--[if gt IE 5]>
  <link rel="stylesheet" type="text/css" href="css/ie.css" media="screen, projection, tv " />
  <![endif]-->
</head>

<body>
<script type="text/javascript">SyntaxHighlighter.all();</script>
<div id="wrapper">
<div id="content">
<script type="text/javascript" src="../../../header.js"></script>
<div id="page">
<h3>Blackberry Passport >> Core Native (C/C++)</h3>
<p><b>Build PPSSPP 1.0</b></p>
<hr size="1">
<p>
1. 確定NDK Toolchain是4.8.3版本<br>
2. 使用如下指令編譯：
</p>
<pre>
$ cd
$ git clone -b v1.0 https://github.com/hrydgard/ppsspp
$ cd ppsspp
$ git submodule update --init --recursive
$ source ~/bbndk/bbndk-env*.sh
$ cd Blackberry
$ vim build.sh
  #!/bin/bash
  rm -rf CMake*
  BB_OS=`cat ${QNX_TARGET}/etc/qversion 2&gt;/dev/null`
  if [ -z "$BB_OS" ]; then
    echo "Could not find your Blackberry NDK. Please source bbndk-env.sh"
    exit 1
  fi
  echo "Building for Blackberry ${BB_OS}"
  # Set up cmake with GCC 4.6.3 cross-compiler from PATH
  CC=ntoarmv7-gcc CXX=ntoarmv7-g++ cmake -DCMAKE_TOOLCHAIN_FILE=bb.toolchain.cmake -DBLACKBERRY=${BB_OS} ..
  # Compile and create unsigned PPSSPP.bar with debugtoken
  DEBUG="-devMode -debugToken ${HOME}/debugtoken.bar"
  make -j4 &amp;&amp; blackberry-nativepackager -package PPSSPP.bar bar-descriptor.xml $DEBUG

$ vim ../CMakeLists.txt
  # Detect CPU from CMAKE configuration. Toolchains should set this up
  if(CMAKE_SYSTEM_PROCESSOR)
    if(${CMAKE_SYSTEM_PROCESSOR} MATCHES "^arm")
      set(ARM ON)
      if(${CMAKE_SYSTEM_PROCESSOR} MATCHES "^armv7")
        set(ARMV7 ON)
      endif()
    elseif(${CMAKE_SYSTEM_PROCESSOR} MATCHES "^x86" OR ${CMAKE_SYSTEM_PROCESSOR} MATCHES "i.86")
      set(X86 ON)
    elseif(${CMAKE_SYSTEM_PROCESSOR} MATCHES "^mips")
      set(MIPS ON)
    endif()
  endif()

  set(ARM ON)
  set(ARMV7 ON)
  set(X86 OFF)
  set(MIPS OFF)

$ ./build.sh
</pre><br>

<p>
奇怪的是，編譯後都是無法執行的，PPSSPPBlackberry都會Crash，然後訊息都是如下，完全看不出是那個Library的問題，因此，司徒只好把所有static library改成shared library來找問題，最終找出是ffmpeg的問題，過程修改如下：
</p>
<pre>
Process 14352626 (PPSSPPBlackberry) terminated SIGSEGV code=2 fltno=11 ip=01b9c8f8 mapaddr=0004f8f8. ref=1103a960
</pre><br>

<p>
把ffmpeg改成shared library
</p>
<pre>
$ cd ffmpeg
$ vim blackberry-build.sh
  #--disable-shared \
  #--enable-static \
  --enable-shared \

$ ./blackberry-build.sh
$ cd ../Blackberry
$ mkdir -p lib
$ cp ../ffmpeg/blackberry/armv7/lib/*.so* .
$ cp ../ffmpeg/blackberry/armv7/lib/*.so* lib
$ vim CMakeFiles/PPSSPPBlackberry.dir/link.txt
  ntoarmv7-g++ -march=armv7-a -mfpu=neon -mcpu=cortex-a9 -std=c++11 -g CMakeFiles/PPSSPPBlackberry.dir/android/jni/TestRunner.cpp.o CMakeFiles/PPSSPPBlackberry.dir/UI/NativeApp.cpp.o CMakeFiles/PPSSPPBlackberry.dir/UI/BackgroundAudio.cpp.o CMakeFiles/PPSSPPBlackberry.dir/UI/DevScreens.cpp.o CMakeFiles/PPSSPPBlackberry.dir/UI/EmuScreen.cpp.o CMakeFiles/PPSSPPBlackberry.dir/UI/GameInfoCache.cpp.o CMakeFiles/PPSSPPBlackberry.dir/UI/MainScreen.cpp.o CMakeFiles/PPSSPPBlackberry.dir/UI/MiscScreens.cpp.o CMakeFiles/PPSSPPBlackberry.dir/UI/PauseScreen.cpp.o CMakeFiles/PPSSPPBlackberry.dir/UI/GameScreen.cpp.o CMakeFiles/PPSSPPBlackberry.dir/UI/GameSettingsScreen.cpp.o CMakeFiles/PPSSPPBlackberry.dir/UI/TiltAnalogSettingsScreen.cpp.o CMakeFiles/PPSSPPBlackberry.dir/UI/TiltEventProcessor.cpp.o CMakeFiles/PPSSPPBlackberry.dir/UI/TouchControlLayoutScreen.cpp.o CMakeFiles/PPSSPPBlackberry.dir/UI/TouchControlVisibilityScreen.cpp.o CMakeFiles/PPSSPPBlackberry.dir/UI/GamepadEmu.cpp.o CMakeFiles/PPSSPPBlackberry.dir/UI/OnScreenDisplay.cpp.o CMakeFiles/PPSSPPBlackberry.dir/UI/ControlMappingScreen.cpp.o CMakeFiles/PPSSPPBlackberry.dir/UI/ReportScreen.cpp.o CMakeFiles/PPSSPPBlackberry.dir/UI/Store.cpp.o CMakeFiles/PPSSPPBlackberry.dir/UI/CwCheatScreen.cpp.o CMakeFiles/PPSSPPBlackberry.dir/UI/InstallZipScreen.cpp.o CMakeFiles/PPSSPPBlackberry.dir/UI/ui_atlas.cpp.o  -o PPSSPPBlackberry  -L/home/steward/Downloads/ppsspp/ffmpeg/blackberry/armv7/lib -Wl,-rpath,/home/steward/Downloads/ppsspp/ffmpeg/blackberry/armv7/lib:/home/steward/qnx10/target_10_3_1_995/qnx6/armle-v7/usr/lib lib/libCore.a -lOpenAL -lbps -lscreen -lsocket -lEGL lib/libCommon.a -Wl,-Bstatic -Wl,-Bdynamic /home/steward/qnx10/target_10_3_1_995/qnx6/armle-v7/usr/lib/libiconv.so lib/libnative.a lib/liblibzip.a /home/steward/qnx10/target_10_3_1_995/qnx6/armle-v7/usr/lib/libz.so lib/libpng17.a lib/librg_etc1.a lib/libvjson.a lib/libstb_vorbis.a lib/libsnappy.a lib/libudis86.a lib/libkirk.a lib/libcityhash.a lib/libxbrz.a lib/libxxhash.a -lGLESv2 libavcodec.so libavformat.so libavcodec.so libavutil.so libswresample.so libswscale.so

$ make -j 4
</pre><br>

<p>
接著打包Bar檔案
</p>
<pre>
$ vim bar-descriptor.xml
  &lt;asset path="lib"&gt;lib&lt;/asset&gt;
  &lt;env var="LD_LIBRARY_PATH" value="app/native/lib"/&gt;

$ DEBUG="-devMode -debugToken ${HOME}/.rim/debugtoken_q30.bar"
$ blackberry-nativepackager -package PPSSPP.bar bar-descriptor.xml $DEBUG
</pre><br>

<p>
完成<br>
<img src="build_ppsspp-1.0/1.jpg" class="maxSize">
</p>

<p>
<br><a href="../../../phone.htm">返回上一頁</a>
</p>

</div>
</div>
</div>
</body>
</html>
