<!--
 ____________________________________________________________
|                                                            |
|    DESIGN + Pat Heard { http://fullahead.org }             |
|      DATE + 2006.09.12                                     |
| COPYRIGHT + Free use if this notice is kept in place.      |
|____________________________________________________________|

-->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>司徒的教學網站</title>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <meta http-lowast="content-type" content="application/xhtml+xml; charset=UTF-8" />
  <meta name="author" content="fullahead.org" />
  <meta name="keywords" content="XHTML, CSS, template, FullAhead" />
  <meta name="description" content="A valid, XHTML 1.0 template" />
  <meta name="robots" content="index, follow, noarchive" />
  <meta name="googlebot" content="noarchive" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes, minimum-scale=0.1, maximum-scale=100.0"/>

  <link rel="shortcut icon" href="../../website.ico">
  <link rel="stylesheet" type="text/css" href="../../styles/shCore.css" />
  <link rel="stylesheet" type="text/css" href="../../styles/shThemeDefault.css" />
  <link rel="stylesheet" type="text/css" href="../../css/html.css" media="screen, projection, tv " />
  <link rel="stylesheet" type="text/css" href="../../css/layout.css" media="screen, projection, tv" />
  <link rel="stylesheet" type="text/css" href="../../css/print.css" media="print" />
  
  <script type="text/javascript" src="../../scripts/shCore.js"></script>
  <script type="text/javascript" src="../../scripts/shBrushCpp.js"></script>

  <!-- Conditional comment to apply opacity fix for IE #content background.
       Invalid CSS, but can be removed without harming design -->
  <!--[if gt IE 5]>
  <link rel="stylesheet" type="text/css" href="css/ie.css" media="screen, projection, tv " />
  <![endif]-->
</head>

<body>
<script type="text/javascript">SyntaxHighlighter.all();</script>
<div id="wrapper">
<div id="content">
<script type="text/javascript" src="../../header.js"></script>
<div id="page">
<h3>RetroGame</h3>
<p><b>移植Hugo</b></p>
<hr size="1">
<p>
目前移植的重點擺在畫面的縮放上(320x240 &rArr; 320x480)，因此，只要針對Pixel操作就可以完成初步的移植工作，而Hugo模擬器比較特別的地方在於，它有針對丁果A320硬體做一些特殊處理，因此，這一部分目前都先註解掉就可以
</p>

<pre class="brush:cpp">
diff -Nr old_hugo/src/cpudingux.c new_hugo/src/cpudingux.c
1,42d0
&lt; /*  
&lt;     This program is free software; you can redistribute it and/or modify
&lt;     it under the terms of the GNU General Public License as published by
&lt;     the Free Software Foundation; either version 2 of the License, or
&lt;     (at your option) any later version.
&lt; 
&lt;     This program is distributed in the hope that it will be useful,
&lt;     but WITHOUT ANY WARRANTY; without even the implied warranty of
&lt;     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
&lt;     GNU General Public License for more details.
&lt; 
&lt;     You should have received a copy of the GNU General Public License
&lt;     along with this program; if not, write to the Free Software
&lt;     Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
&lt; */
&lt; 
&lt; 
&lt; #include &lt;stdio.h&gt;
&lt; #include &lt;stdlib.h&gt;
&lt; #include &lt;sys/mman.h&gt;
&lt; #include &lt;unistd.h&gt;
&lt; #include &lt;fcntl.h&gt;
&lt; 
&lt; #include "cpudingux.h"
&lt; 
&lt; /* Define this to the CPU frequency */
&lt; #define CPU_FREQ 336000000    /* CPU clock: 336 MHz */
&lt; #define CFG_EXTAL 12000000    /* EXT clock: 12 Mhz */
&lt; 
&lt; // SDRAM Timings, unit: ns
&lt; #define SDRAM_TRAS    45  /* RAS# Active Time */
&lt; #define SDRAM_RCD    20  /* RAS# to CAS# Delay */
&lt; #define SDRAM_TPC    20  /* RAS# Precharge Time */
&lt; #define SDRAM_TRWL    7  /* Write Latency Time */
&lt; #define SDRAM_TREF          15625  /* Refresh period: 4096 refresh cycles/64ms */ 
&lt; //#define SDRAM_TREF      7812  /* Refresh period: 8192 refresh cycles/64ms */
&lt; 
&lt; #include "jz4740.h"
&lt; 
&lt; static unsigned long jz_dev=0;
&lt; static volatile unsigned long  *jz_cpmregl, *jz_emcregl;
&lt; volatile unsigned short *jz_emcregs; 
44,109d1
&lt; static inline int sdram_convert(unsigned int pllin,unsigned int *sdram_freq)
&lt; {
&lt;   register unsigned int ns, tmp;
&lt;  
&lt;   ns = 1000000000 / pllin;
&lt;   /* Set refresh registers */
&lt;   tmp = SDRAM_TREF/ns;
&lt;   tmp = tmp/64 + 1;
&lt;   if (tmp &gt; 0xff) tmp = 0xff;
&lt;         *sdram_freq = tmp; 
&lt; 
&lt;   return 0;
&lt; 
&lt; }
&lt;  
&lt; static int 
&lt; pll_init(unsigned int clock)
&lt; {
&lt;   register unsigned int cfcr, plcr1;
&lt;   unsigned int sdramclock = 0;
&lt;   int n2FR[33] = {
&lt;     0, 0, 1, 2, 3, 0, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0,
&lt;     7, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0,
&lt;     9
&lt;   };
&lt;   //int div[5] = {1, 4, 4, 4, 4}; /* divisors of I:S:P:L:M */
&lt;     int div[5] = {1, 3, 3, 3, 3}; /* divisors of I:S:P:L:M */
&lt;   int nf, pllout2;
&lt; 
&lt;   cfcr = CPM_CPCCR_CLKOEN |
&lt;     (n2FR[div[0]] &lt;&lt; CPM_CPCCR_CDIV_BIT) | 
&lt;     (n2FR[div[1]] &lt;&lt; CPM_CPCCR_HDIV_BIT) | 
&lt;     (n2FR[div[2]] &lt;&lt; CPM_CPCCR_PDIV_BIT) |
&lt;     (n2FR[div[3]] &lt;&lt; CPM_CPCCR_MDIV_BIT) |
&lt;     (n2FR[div[4]] &lt;&lt; CPM_CPCCR_LDIV_BIT);
&lt; 
&lt;   pllout2 = (cfcr &amp; CPM_CPCCR_PCS) ? clock : (clock / 2);
&lt; 
&lt;   /* Init UHC clock */
&lt;   //  REG_CPM_UHCCDR = pllout2 / 48000000 - 1;
&lt;   jz_cpmregl[0x6C&gt;&gt;2] = pllout2 / 48000000 - 1;
&lt; 
&lt;   nf = clock * 2 / CFG_EXTAL;
&lt;   plcr1 = ((nf - 2) &lt;&lt; CPM_CPPCR_PLLM_BIT) | /* FD */
&lt;     (0 &lt;&lt; CPM_CPPCR_PLLN_BIT) |  /* RD=0, NR=2 */
&lt;     (0 &lt;&lt; CPM_CPPCR_PLLOD_BIT) |    /* OD=0, NO=1 */
&lt;     (0x20 &lt;&lt; CPM_CPPCR_PLLST_BIT) | /* PLL stable time */
&lt;     CPM_CPPCR_PLLEN;                /* enable PLL */          
&lt; 
&lt;   /* init PLL */
&lt;   //  REG_CPM_CPCCR = cfcr;
&lt;   //  REG_CPM_CPPCR = plcr1;
&lt;   jz_cpmregl[0] = cfcr;
&lt;   jz_cpmregl[0x10&gt;&gt;2] = plcr1;
&lt;   
&lt;   sdram_convert(clock,&amp;sdramclock);
&lt;   if (sdramclock &gt; 0) {
&lt; //  REG_EMC_RTCOR = sdramclock;
&lt; //  REG_EMC_RTCNT = sdramclock;    
&lt;     jz_emcregs[0x8C&gt;&gt;1] = sdramclock;
&lt;     jz_emcregs[0x88&gt;&gt;1] = sdramclock;  
&lt; 
&lt;   }
&lt; }
&lt; 
&lt; void 
112,115c4,7
&lt;   jz_dev = open("/dev/mem", O_RDWR);
&lt;   jz_cpmregl=(unsigned long  *)mmap(0, 0x80, PROT_READ|PROT_WRITE, MAP_SHARED, jz_dev, 0x10000000);
&lt;   jz_emcregl=(unsigned long  *)mmap(0, 0x90, PROT_READ|PROT_WRITE, MAP_SHARED, jz_dev, 0x13010000);
&lt;   jz_emcregs=(unsigned short *)jz_emcregl;
---
&gt;   //jz_dev = open("/dev/mem", O_RDWR);
&gt;   //jz_cpmregl=(unsigned long  *)mmap(0, 0x80, PROT_READ|PROT_WRITE, MAP_SHARED, jz_dev, 0x10000000);
&gt;   //jz_emcregl=(unsigned long  *)mmap(0, 0x90, PROT_READ|PROT_WRITE, MAP_SHARED, jz_dev, 0x13010000);
&gt;   //jz_emcregs=(unsigned short *)jz_emcregl;
122,127c14,19
&lt;   cpu_set_clock( GP2X_DEF_CLOCK );
&lt;   munmap((void *)jz_cpmregl, 0x80); 
&lt;   munmap((void *)jz_emcregl, 0x90);   
&lt;   close(jz_dev);
&lt;   fcloseall();
&lt;   sync();
---
&gt;   //cpu_set_clock( GP2X_DEF_CLOCK );
&gt;   //munmap((void *)jz_cpmregl, 0x80); 
&gt;   //munmap((void *)jz_emcregl, 0x90);   
&gt;   //close(jz_dev);
&gt;   //fcloseall();
&gt;   //sync();
133,135c25,27
&lt;   if (clock_in_mhz &gt;= GP2X_MIN_CLOCK &amp;&amp; clock_in_mhz &lt;= GP2X_MAX_CLOCK) {
&lt;     pll_init( clock_in_mhz * 1000000 );
&lt;   }
---
&gt;   //if (clock_in_mhz &gt;= GP2X_MIN_CLOCK &amp;&amp; clock_in_mhz &lt;= GP2X_MAX_CLOCK) {
&gt;     //pll_init( clock_in_mhz * 1000000 );
&gt;   //}
138c30
&lt; static unsigned int loc_clock_in_mhz = GP2X_DEF_CLOCK;
---
&gt; //static unsigned int loc_clock_in_mhz = GP2X_DEF_CLOCK;
143,144c35,36
&lt;   if (clock_in_mhz == loc_clock_in_mhz) return;
&lt;   loc_clock_in_mhz = clock_in_mhz;
---
&gt;   //if (clock_in_mhz == loc_clock_in_mhz) return;
&gt;   //loc_clock_in_mhz = clock_in_mhz;
146c38
&lt;   loc_set_clock(clock_in_mhz);
---
&gt;   //loc_set_clock(clock_in_mhz);
148c40
&lt;   return;
---
&gt;   //return;
154c46
&lt;   return loc_clock_in_mhz;
---
&gt;   //return loc_clock_in_mhz;
Binary files old_hugo/src/cpuwiz.o and new_hugo/src/cpuwiz.o differ
Binary files old_hugo/src/dingux-hugo.exe and new_hugo/src/dingux-hugo.exe differ
diff -Nr old_hugo/src/global.h new_hugo/src/global.h
39c39
&lt; # define SNAP_HEIGHT  106
---
&gt; # define SNAP_HEIGHT  (106*2)
diff -Nr old_hugo/src/gp2x_psp.c new_hugo/src/gp2x_psp.c
26c26
&lt; static int    loc_Volume = 50;
---
&gt; static int    loc_Volume = 100;
diff -Nr old_hugo/src/Hugo.c new_hugo/src/Hugo.c
71a72
&gt; #if 1
81c82
&lt;   dstRect.h = 240;
---
&gt;   dstRect.h = 480;
85a87,100
&gt; #else
&gt; 	// will crash
&gt;   // for retrogame device
&gt; 	int x, y;
&gt;   uint32_t *src = blit_surface-&gt;pixels;
&gt;   uint32_t *dst = back_surface-&gt;pixels;
&gt; 
&gt;   for(y=0; y&lt;240; y++){
&gt;     for(x=0; x&lt;160; x++){
&gt;       *dst++ = *src++;
&gt;     }
&gt;     dst+= 160;
&gt;   }
&gt; #endif
103a119,120
&gt; 	
&gt; 	printf("%s, %d %d\n", __func__, screen_h, screen_w);
120a138
&gt;     tgt += 160; // fix for retrogame
155a174
&gt;       tgt += 160; // fix for retrogame
200d218
&lt; 
217c235
&lt;       u16 *tgt_next = tgt + 320;
---
&gt;       u16 *tgt_next = tgt + 320 + 320; // fix for retrogame
676c694
&lt;   HUGO.hugo_render_mode       = HUGO_RENDER_FAST_MAX;
---
&gt;   HUGO.hugo_render_mode       = HUGO_RENDER_FAST;
714a733
&gt;     printf("Failed to open: %s\n", chFileName);
1166c1185
&lt;   strcpy(HUGO.hugo_home_dir,".");
---
&gt;   strcpy(HUGO.hugo_home_dir,"/mnt/game/hugo");
diff -Nr old_hugo/src/Makefile new_hugo/src/Makefile
1,3d0
&lt; #
&lt; # HUGO port on PSP 
&lt; #
4a2
&gt; TARGET = hugo
6,7c4,10
&lt; TARGET = dingux-hugo
&lt; SDL_CONFIG = sdl-config
---
&gt; CROSS_COMPILE ?= mipsel-linux-
&gt; CC          := $(CROSS_COMPILE)gcc
&gt; STRIP       := $(CROSS_COMPILE)strip
&gt; 
&gt; SYSROOT     := $(shell $(CC) --print-sysroot)
&gt; SDL_CFLAGS  := $(shell $(SYSROOT)/usr/bin/sdl-config --cflags)
&gt; SDL_LIBS    := $(shell $(SYSROOT)/usr/bin/sdl-config --libs)
10,78c13,74
&lt; cpudingux.o \
&lt; Hugo.o \
&lt; psp_main.o \
&lt; psp_sdl.o \
&lt; psp_font.o \
&lt; psp_kbd.o \
&lt; psp_menu.o \
&lt; psp_danzeff.o \
&lt; psp_menu_set.o \
&lt; psp_menu_help.o \
&lt; psp_menu_cheat.o \
&lt; psp_menu_list.o \
&lt; psp_menu_kbd.o \
&lt; psp_menu_joy.o \
&lt; psp_editor.o \
&lt; psp_fmgr.o \
&lt; psp_audio.o \
&lt; psp_joy.o \
&lt; core/psp/osd_psp_cd.o \
&lt; core/psp/osd_psp_mix.o \
&lt; core/psp/osd_psp_gfx.o \
&lt; core/psp/osd_psp_snd.o \
&lt; core/psp/osd_psp_machine.o \
&lt; core/psp/osd_psp_keyboard.o \
&lt; core/cd.o \
&lt; core/dis.o \
&lt; core/edit_ram.o \
&lt; core/followop.o \
&lt; core/format.o \
&lt; core/gfx.o \
&lt; core/h6280.o \
&lt; core/hard_pce.o \
&lt; core/hugo.o \
&lt; core/list_rom.o \
&lt; core/lsmp3.o \
&lt; core/mix.o \
&lt; core/optable.o \
&lt; core/pce.o \
&lt; core/pcecd.o \
&lt; core/sound.o \
&lt; core/sprite.o \
&lt; core/utils.o \
&lt; core/hcd.o  \
&lt; core/miniunz.o  \
&lt; core/unzip.o  \
&lt; core/bios.o core/cheat.o core/debug.o core/iniconfig.o core/bp.o
&lt; 
&lt; CC=gcc
&lt; STRIP=strip
&lt; 
&lt; DEFAULT_CFLAGS = $(shell $(SDL_CONFIG) --cflags)
&lt; 
&lt; MORE_CFLAGS = -I. -I/usr/include -I/usr/include/SDL -static \
&lt; -Icore -Icore/psp \
&lt; -DDINGUX_MODE -DNO_STDIO_REDIRECT -DMPU_JZ4740 -DHUGO_VERSION=\"$(HUGO_VERSION)\" \
&lt; -O3 -D_GNU_SOURCE=1 -D_REENTRANT -DIS_LITTLE_ENDIAN -DFINAL_RELEASE \
&lt; -fsigned-char -ffast-math -fomit-frame-pointer \
&lt; -fexpensive-optimizations -fno-strength-reduce 
&lt; # -funroll-loops  -finline-functions 
&lt; 
&lt; # -DHUGO_OPTIM_IDLE
&lt; 
&lt; # -ffast-math -fomit-frame-pointer -fno-strength-reduce 
&lt; #  -funroll-loops  -finline-functions
&lt; 
&lt; # -funroll-loops -ffast-math -fomit-frame-pointer -fno-strength-reduce -finline-functions \
&lt; # -pipe -D_GNU_SOURCE=1 -D_REENTRANT -DIS_LITTLE_ENDIAN \
&lt; -DUNIX -DBPP16 -DLSB_FIRST -DSOUND  -DNO_STDIO_REDIRECT  \
&lt; -DDINGUX_MODE -O2
---
&gt;   cpudingux.o \
&gt;   Hugo.o \
&gt;   psp_main.o \
&gt;   psp_sdl.o \
&gt;   psp_font.o \
&gt;   psp_kbd.o \
&gt;   psp_menu.o \
&gt;   psp_danzeff.o \
&gt;   psp_menu_set.o \
&gt;   psp_menu_help.o \
&gt;   psp_menu_cheat.o \
&gt;   psp_menu_list.o \
&gt;   psp_menu_kbd.o \
&gt;   psp_menu_joy.o \
&gt;   psp_editor.o \
&gt;   psp_fmgr.o \
&gt;   psp_audio.o \
&gt;   psp_joy.o \
&gt;   core/psp/osd_psp_cd.o \
&gt;   core/psp/osd_psp_mix.o \
&gt;   core/psp/osd_psp_gfx.o \
&gt;   core/psp/osd_psp_snd.o \
&gt;   core/psp/osd_psp_machine.o \
&gt;   core/psp/osd_psp_keyboard.o \
&gt;   core/cd.o \
&gt;   core/dis.o \
&gt;   core/edit_ram.o \
&gt;   core/followop.o \
&gt;   core/format.o \
&gt;   core/gfx.o \
&gt;   core/h6280.o \
&gt;   core/hard_pce.o \
&gt;   core/hugo.o \
&gt;   core/list_rom.o \
&gt;   core/lsmp3.o \
&gt;   core/mix.o \
&gt;   core/optable.o \
&gt;   core/pce.o \
&gt;   core/pcecd.o \
&gt;   core/sound.o \
&gt;   core/sprite.o \
&gt;   core/utils.o \
&gt;   core/hcd.o  \
&gt;   core/miniunz.o  \
&gt;   core/unzip.o  \
&gt;   core/bios.o core/cheat.o core/debug.o core/iniconfig.o core/bp.o
&gt; 
&gt; DEFAULT_CFLAGS = -I. \
&gt;   -Icore -Icore/psp \
&gt;   -DDINGUX_MODE -DHUGO_VERSION=\"$(HUGO_VERSION)\" \
&gt;   -O3 -D_GNU_SOURCE=1 -D_REENTRANT -DIS_LITTLE_ENDIAN -DFINAL_RELEASE \
&gt;   -fsigned-char -ffast-math -fomit-frame-pointer \
&gt;   -fexpensive-optimizations -fno-strength-reduce 
&gt;   #-DDINGUX_MODE -DNO_STDIO_REDIRECT -DMPU_JZ4740 -DHUGO_VERSION=\"$(HUGO_VERSION)\" \
&gt;   # -funroll-loops  -finline-functions 
&gt;   # -DHUGO_OPTIM_IDLE
&gt;   # -ffast-math -fomit-frame-pointer -fno-strength-reduce 
&gt;   #  -funroll-loops  -finline-functions
&gt;   # -funroll-loops -ffast-math -fomit-frame-pointer -fno-strength-reduce -finline-functions \
&gt;   # -pipe -D_GNU_SOURCE=1 -D_REENTRANT -DIS_LITTLE_ENDIAN \
&gt;   -DUNIX -DBPP16 -DLSB_FIRST -DSOUND  -DNO_STDIO_REDIRECT  \
&gt;   -DDINGUX_MODE -O2
80,84c76,77
&lt; CFLAGS = $(DEFAULT_CFLAGS) $(MORE_CFLAGS) 
&lt; LDFLAGS = -static -s
&lt; 
&lt; LIBS += -lSDL_image -lSDL \
&lt; -lpng -lz -lm -lpthread -ldl
---
&gt; CFLAGS = $(DEFAULT_CFLAGS) $(SDL_CFLAGS) 
&gt; LDFLAGS = $(SDL_LIBS) -lSDL_image -lpng -lz
90,93c83
&lt; 	$(CC) $(LDFLAGS) $(CFLAGS) $(OBJS) $(LIBS) -o $(TARGET) &amp;&amp; $(STRIP) $(TARGET)
&lt; 
&lt; install: $(TARGET)
&lt; 	cp $&lt; /media/dingux/local/emulators/dingux-hugo/
---
&gt; 	$(CC) $(LDFLAGS) $(CFLAGS) $(OBJS) -o $(TARGET) &amp;&amp; $(STRIP) $(TARGET)
Binary files old_hugo/src/psp_battery.o and new_hugo/src/psp_battery.o differ
Binary files old_hugo/src/psp_gu.o and new_hugo/src/psp_gu.o differ
diff -Nr old_hugo/src/psp_main.c new_hugo/src/psp_main.c
80,83c80,83
&lt;   freopen(STDOUT_FILE, "w", stdout);
&lt;   freopen(STDERR_FILE, "w", stderr);
&lt;   setvbuf(stdout, NULL, _IOLBF, BUFSIZ);  /* Line buffered */
&lt;   setbuf(stderr, NULL);          /* No buffering */
---
&gt;   //freopen(STDOUT_FILE, "w", stdout);
&gt;   //freopen(STDERR_FILE, "w", stderr);
&gt;   //setvbuf(stdout, NULL, _IOLBF, BUFSIZ);  /* Line buffered */
&gt;   //setbuf(stderr, NULL);          /* No buffering */
Binary files old_hugo/src/pspsdk_linux.o and new_hugo/src/pspsdk_linux.o differ
diff -Nr old_hugo/src/psp_sdl.c new_hugo/src/psp_sdl.c
212d211
&lt; 
230a230
&gt;   y*= 2;
238c238
&lt;         if (drawfg) vram[cx + cy * PSP_LINE_SIZE] = color;
---
&gt;         if (drawfg) vram[cx + cy * PSP_LINE_SIZE * 2] = color;
240c240
&lt;         if (drawbg) vram[cx + cy * PSP_LINE_SIZE] = bgcolor;
---
&gt;         if (drawbg) vram[cx + cy * PSP_LINE_SIZE * 2] = bgcolor;
260a261
&gt;   y*= 2;
262d262
&lt; 
269c269
&lt;         vram[cx + cy * PSP_LINE_SIZE] = color;
---
&gt;         vram[cx + cy * PSP_LINE_SIZE * 2] = color;
271c271
&lt;         vram[cx + cy * PSP_LINE_SIZE] = psp_sdl_get_back2_color(x + cx, y + cy);
---
&gt;         vram[cx + cy * PSP_LINE_SIZE * 2] = psp_sdl_get_back2_color(x + cx, y + cy);
360a361,362
&gt; 
&gt;   dst_y*= 2;
368a371,386
&gt; psp_sdl_quick_copy(SDL_Surface *src, SDL_Surface *dst)
&gt; {
&gt;   int x, y;
&gt;   uint32_t *s = src-&gt;pixels;
&gt;   uint32_t *d = dst-&gt;pixels;
&gt; 
&gt;   for(y=0; y&lt;240; y++){
&gt;     for(x=0; x&lt;160; x++){
&gt;       *d++ = *s++;
&gt;     }
&gt;     d+= 160;
&gt;   }
&gt;   //SDL_SoftStretch(src, NULL, dst, NULL);
&gt; }
&gt; 
&gt; void
395c413
&lt;   int col = psp_sdl_rgb(0x0, 0x0, 0x0);
---
&gt;   int col = psp_sdl_rgb(0xff, 0xff, 0x00);
405d422
&lt; 
551,553c568,573
&lt;   png_uint_32 width = info_ptr-&gt;width;
&lt;   png_uint_32 height = info_ptr-&gt;height;
&lt;   int color_type = info_ptr-&gt;color_type;
---
&gt;   //png_uint_32 width = info_ptr-&gt;width;
&gt;   //png_uint_32 height = info_ptr-&gt;height;
&gt;   //int color_type = info_ptr-&gt;color_type;
&gt;   png_int_32 width = png_get_image_width( png_ptr,  info_ptr);
&gt;   png_int_32 height = png_get_image_height( png_ptr,  info_ptr);
&gt;   int color_type = png_get_color_type( png_ptr,  info_ptr);
562c582,583
&lt;   png_byte **pRowTable = info_ptr-&gt;row_pointers;
---
&gt;   //png_byte **pRowTable = info_ptr-&gt;row_pointers;
&gt;   png_byte **pRowTable = png_get_rows( png_ptr,  info_ptr);
666,668c687
&lt;   back_surface=SDL_SetVideoMode(PSP_SDL_SCREEN_WIDTH,PSP_SDL_SCREEN_HEIGHT, 16 , 
&lt;                                 SDL_SWSURFACE);
&lt; 
---
&gt;   back_surface=SDL_SetVideoMode(PSP_SDL_SCREEN_WIDTH, PSP_SDL_SCREEN_HEIGHT, 16 , SDL_SWSURFACE);
672d690
&lt; 
diff -Nr old_hugo/src/psp_sdl.h new_hugo/src/psp_sdl.h
31c31
&lt; # define PSP_SDL_SCREEN_HEIGHT   240
---
&gt; # define PSP_SDL_SCREEN_HEIGHT   480
</pre><br>

<p>
完成<br>
<img src="port_hugo/1.jpg" class="maxSize"><br>
<img src="port_hugo/2.jpg" class="maxSize">
</p>

<p>
<br><a href="../../handheld.htm">返回上一頁</a>
</p>

</div>
</div>
</div>
</body>
</html>
