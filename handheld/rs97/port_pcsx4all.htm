<!--
 ____________________________________________________________
|                                                            |
|    DESIGN + Pat Heard { http://fullahead.org }             |
|      DATE + 2006.09.12                                     |
| COPYRIGHT + Free use if this notice is kept in place.      |
|____________________________________________________________|

-->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>司徒的教學網站</title>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <meta http-lowast="content-type" content="application/xhtml+xml; charset=UTF-8" />
  <meta name="author" content="fullahead.org" />
  <meta name="keywords" content="XHTML, CSS, template, FullAhead" />
  <meta name="description" content="A valid, XHTML 1.0 template" />
  <meta name="robots" content="index, follow, noarchive" />
  <meta name="googlebot" content="noarchive" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes, minimum-scale=0.1, maximum-scale=100.0"/>

  <link rel="shortcut icon" href="../../website.ico">
  <link rel="stylesheet" type="text/css" href="../../styles/shCore.css" />
  <link rel="stylesheet" type="text/css" href="../../styles/shThemeDefault.css" />
  <link rel="stylesheet" type="text/css" href="../../css/html.css" media="screen, projection, tv " />
  <link rel="stylesheet" type="text/css" href="../../css/layout.css" media="screen, projection, tv" />
  <link rel="stylesheet" type="text/css" href="../../css/print.css" media="print" />
  
  <script type="text/javascript" src="../../scripts/shCore.js"></script>
  <script type="text/javascript" src="../../scripts/shBrushCpp.js"></script>

  <!-- Conditional comment to apply opacity fix for IE #content background.
       Invalid CSS, but can be removed without harming design -->
  <!--[if gt IE 5]>
  <link rel="stylesheet" type="text/css" href="css/ie.css" media="screen, projection, tv " />
  <![endif]-->
</head>

<body>
<script type="text/javascript">SyntaxHighlighter.all();</script>
<div id="wrapper">
<div id="content">
<script type="text/javascript" src="../../header.js"></script>
<div id="page">
<h3>RetroGame</h3>
<p><b>移植PCSX4ALL</b></p>
<hr size="1">
<p>
PCSX4ALL模擬器應該是目前唯一一款針對MIPS CPU優化的PS1模擬器，司徒最早接觸這款模擬器是在丁果A320掌機，當初確實被其效果嚇到，先不論效果如何(畢竟當初Sony如何阻止模擬器發展，最近卻又開始販賣PlayStation Classic，據傳裡面就是PCSX ReARMed模擬器，淋淋種種，大家心中自有一把尺)，畢竟很多東西都還是Undocument，可以達到如此效果，已經遠遠超出司徒的預期，當然效果還是無法跟PSP Go掌機相提並論，而PCSX4ALL模擬器得於GCW Zero掌機的出現，加上網友Dmitrysmagin再度深度優化MIPS相關效能，頓時讓PCSX4ALL可以流暢運行於GCW Zero掌機，因此，司徒特意移植PCSX4ALL到RetroGame掌機，藉此測試其效能表現是否有異於A320掌機，結果證明確實有蠻大的改進，而相較於GCW Zero掌機，由於RetroGame掌機的CPU速度較慢以及缺乏IPU(Image Process Unit)的硬體拉伸支援，因此，目前速度還不及GCW Zero掌機，而軟體畫面拉伸的程式碼如下：
</p>
<pre class="brush:cpp">
diff -Nr old_pcsx4all/gcw0_pcsx4all_changelog.txt new_pcsx4all/gcw0_pcsx4all_changelog.txt
0a1,20
&gt; gcw0_pcsx4all_20170830_4.opk:
&gt; 1. fix bug: some case cannot press any key
&gt; 2. use strip --strip-unneeded to reduce size
&gt; 
&gt; gcw0_pcsx4all_20170830_3.opk:
&gt; 1. long press start+select can speedup(force frameskip 3), and then press start or select to restore the menu setting
&gt; 
&gt; gcw0_pcsx4all_20170830_2.opk:
&gt; 1. Analog Arrow Keys off: press analog down(but not analog left+down/right+down) can into menu
&gt; 
&gt; gcw0_pcsx4all_20170830_1.opk:
&gt; 1. auto fix Grandia(SLPS02124)'s 368x240 -&gt; 352x240
&gt; 2. change [pixel skip] to [Clip 368 -&gt; 352], for fix other disp bug like Grandia
&gt; 3. change menu key:
&gt; 	select+start: menu
&gt; 	start+select: none(for tekken3 quit to main menu)
&gt; 4. add [Analog Arrow Keys] in core settings,
&gt; 	Analog Arrow Keys off: analog left=L2, analog right=R2, analog up=L2+R2, analog down=menu
&gt; 	Analog Arrow Keys on: analog stick = arrow keys, select+B=B, select+L1=L2, select+L2=R2
&gt; 
diff -Nr old_pcsx4all/Makefile new_pcsx4all/Makefile
0a1,215
&gt; TARGET = pcsx4all
&gt; PORT   = sdl
&gt; 
&gt; # Using 'gpulib' adapted from PCSX Rearmed is default, specify
&gt; #  USE_GPULIB=0 as param to 'make' when building to disable it.
&gt; USE_GPULIB ?= 1
&gt; 
&gt; #GPU   = gpu_dfxvideo
&gt; #GPU   = gpu_drhell
&gt; #GPU   = gpu_null
&gt; GPU   = gpu_unai
&gt; 
&gt; SPU   = spu_pcsxrearmed
&gt; 
&gt; RECOMPILER = mips
&gt; 
&gt; RM     = rm -f
&gt; MD     = mkdir
&gt; CC     = mipsel-linux-gcc
&gt; CXX    = mipsel-linux-g++
&gt; LD     = mipsel-linux-g++
&gt; 
&gt; SYSROOT     := $(shell $(CC) --print-sysroot)
&gt; SDL_CONFIG  := $(SYSROOT)/usr/bin/sdl-config
&gt; SDL_CFLAGS  := $(shell $(SDL_CONFIG) --cflags)
&gt; SDL_LIBS    := $(shell $(SDL_CONFIG) --libs)
&gt; 
&gt; MCD1_FILE = \"mcd001.mcr\"
&gt; MCD2_FILE = \"mcd002.mcr\"
&gt; 
&gt; ifdef A320
&gt; 	C_ARCH = -mips32 -msoft-float -DTMPFS_MIRRORING -DTMPFS_DIR=\"/tmp\"
&gt; else
&gt; 	#C_ARCH = -mips32r2 -DSHMEM_MIRRORING
&gt; 	C_ARCH = -mips32 -DSHMEM_MIRRORING
&gt; endif
&gt; 
&gt; CFLAGS = $(C_ARCH) -mplt -mno-shared -ggdb3 -O2 -DGCW_ZERO \
&gt; 	-Wall -Wunused -Wpointer-arith \
&gt; 	-Wno-sign-compare -Wno-cast-align \
&gt; 	-Isrc -Isrc/spu/$(SPU) -D$(SPU) -Isrc/gpu/$(GPU) \
&gt; 	-Isrc/port/$(PORT) \
&gt; 	-Isrc/plugin_lib \
&gt; 	-DXA_HACK \
&gt; 	-DINLINE="static __inline__" -Dasm="__asm__ __volatile__" \
&gt; 	$(SDL_CFLAGS)
&gt; 
&gt; # Convert plugin names to uppercase and make them CFLAG defines
&gt; CFLAGS += -D$(shell echo $(GPU) | tr a-z A-Z)
&gt; CFLAGS += -D$(shell echo $(SPU) | tr a-z A-Z)
&gt; 
&gt; ifdef RECOMPILER
&gt; CFLAGS += -DPSXREC -D$(RECOMPILER)
&gt; endif
&gt; 
&gt; LDFLAGS = $(SDL_LIBS) -lSDL_mixer -lSDL_image -lrt -lz
&gt; 
&gt; OBJDIRS = obj obj/gpu obj/gpu/$(GPU) obj/spu obj/spu/$(SPU) \
&gt; 	  obj/recompiler obj/recompiler/$(RECOMPILER) \
&gt; 	  obj/port obj/port/$(PORT) \
&gt; 	  obj/plugin_lib
&gt; 
&gt; all: maketree $(TARGET)
&gt; 
&gt; OBJS = \
&gt; 	obj/r3000a.o obj/misc.o obj/plugins.o obj/psxmem.o obj/psxhw.o \
&gt; 	obj/psxcounters.o obj/psxdma.o obj/psxbios.o obj/psxhle.o obj/psxevents.o \
&gt; 	obj/psxcommon.o \
&gt; 	obj/plugin_lib/plugin_lib.o obj/plugin_lib/pl_sshot.o \
&gt; 	obj/psxinterpreter.o \
&gt; 	obj/mdec.o obj/decode_xa.o \
&gt; 	obj/cdriso.o obj/cdrom.o obj/ppf.o \
&gt; 	obj/sio.o obj/pad.o
&gt; 
&gt; ifdef RECOMPILER
&gt; OBJS += \
&gt; 	obj/recompiler/mips/recompiler.o \
&gt; 	obj/recompiler/mips/mips_disasm.o
&gt; endif
&gt; 
&gt; ######################################################################
&gt; #  GPULIB from PCSX Rearmed:
&gt; #  Fixes many game incompatibilities and centralizes/improves many
&gt; #  things that once were the responsibility of individual GPU plugins.
&gt; #  NOTE: For now, only GPU Unai has been adapted.
&gt; ifeq ($(USE_GPULIB),1)
&gt; CFLAGS += -DUSE_GPULIB
&gt; OBJDIRS += obj/gpu/gpulib
&gt; OBJS += obj/gpu/$(GPU)/gpulib_if.o
&gt; OBJS += obj/gpu/gpulib/gpu.o obj/gpu/gpulib/vout_port.o
&gt; else
&gt; OBJS += obj/gpu/$(GPU)/gpu.o
&gt; endif
&gt; ######################################################################
&gt; 
&gt; OBJS += obj/gte.o
&gt; OBJS += obj/spu/$(SPU)/spu.o
&gt; 
&gt; OBJS += obj/port/$(PORT)/port.o
&gt; OBJS += obj/port/$(PORT)/frontend.o
&gt; 
&gt; OBJS += obj/plugin_lib/perfmon.o
&gt; 
&gt; #******************************************
&gt; # spu_pcsxrearmed section BEGIN
&gt; #******************************************
&gt; 
&gt; ##########
&gt; # Use a non-default SPU update frequency for these slower devices
&gt; #  to avoid audio dropouts. 0: once-per-frame (default)   5: 32-times-per-frame
&gt; #
&gt; #  On slower Dingoo A320, update 8 times per frame
&gt; ifdef A320
&gt; CFLAGS += -DSPU_UPDATE_FREQ_DEFAULT=3
&gt; else
&gt; #  On faster GCW Zero platform, update 4 times per frame
&gt; CFLAGS += -DSPU_UPDATE_FREQ_DEFAULT=2
&gt; endif
&gt; ##########
&gt; 
&gt; ##########
&gt; # Similarly, set higher XA audio update frequency for slower devices
&gt; #
&gt; #  On slower Dingoo A320, force XA to update 8 times per frame (val 4)
&gt; ifdef A320
&gt; CFLAGS += -DFORCED_XA_UPDATES_DEFAULT=4
&gt; else
&gt; #  On faster GCW Zero platform, use auto-update
&gt; CFLAGS += -DFORCED_XA_UPDATES_DEFAULT=1
&gt; endif
&gt; ##########
&gt; 
&gt; ifeq ($(SPU),spu_pcsxrearmed)
&gt; # Specify which audio backend to use:
&gt; SOUND_DRIVERS=sdl
&gt; #SOUND_DRIVERS=alsa
&gt; #SOUND_DRIVERS=oss
&gt; #SOUND_DRIVERS=pulseaudio
&gt; 
&gt; # Note: obj/spu/spu_pcsxrearmed/spu.o will already have been added to OBJS
&gt; #		list previously in Makefile
&gt; OBJS += obj/spu/spu_pcsxrearmed/dma.o obj/spu/spu_pcsxrearmed/freeze.o \
&gt; 	obj/spu/spu_pcsxrearmed/out.o obj/spu/spu_pcsxrearmed/nullsnd.o \
&gt; 	obj/spu/spu_pcsxrearmed/registers.o
&gt; ifeq "$(ARCH)" "arm"
&gt; OBJS += obj/spu/spu_pcsxrearmed/arm_utils.o
&gt; endif
&gt; ifeq "$(HAVE_C64_TOOLS)" "1"
&gt; obj/spu/spu_pcsxrearmed/spu.o: CFLAGS += -DC64X_DSP
&gt; obj/spu/spu_pcsxrearmed/spu.o: obj/spu/spu_pcsxrearmed/spu_c64x.c
&gt; frontend/menu.o: CFLAGS += -DC64X_DSP
&gt; endif
&gt; ifneq ($(findstring oss,$(SOUND_DRIVERS)),)
&gt; obj/spu/spu_pcsxrearmed/out.o: CFLAGS += -DHAVE_OSS
&gt; OBJS += obj/spu/spu_pcsxrearmed/oss.o
&gt; endif
&gt; ifneq ($(findstring alsa,$(SOUND_DRIVERS)),)
&gt; obj/spu/spu_pcsxrearmed/out.o: CFLAGS += -DHAVE_ALSA
&gt; OBJS += obj/spu/spu_pcsxrearmed/alsa.o
&gt; LDFLAGS += -lasound
&gt; endif
&gt; ifneq ($(findstring sdl,$(SOUND_DRIVERS)),)
&gt; obj/spu/spu_pcsxrearmed/out.o: CFLAGS += -DHAVE_SDL
&gt; OBJS += obj/spu/spu_pcsxrearmed/sdl.o
&gt; endif
&gt; ifneq ($(findstring pulseaudio,$(SOUND_DRIVERS)),)
&gt; obj/spu/spu_pcsxrearmed/out.o: CFLAGS += -DHAVE_PULSE
&gt; OBJS += obj/spu/spu_pcsxrearmed/pulseaudio.o
&gt; endif
&gt; ifneq ($(findstring libretro,$(SOUND_DRIVERS)),)
&gt; obj/spu/spu_pcsxrearmed/out.o: CFLAGS += -DHAVE_LIBRETRO
&gt; endif
&gt; 
&gt; endif
&gt; #******************************************
&gt; # spu_pcsxrearmed END
&gt; #******************************************
&gt; 
&gt; CXXFLAGS := $(CFLAGS) -fno-rtti -fno-exceptions
&gt; 
&gt; #If V=1 was passed to 'make', do not hide commands:
&gt; ifdef V
&gt; 	HIDECMD:=
&gt; else
&gt; 	HIDECMD:=@
&gt; endif
&gt; 
&gt; $(TARGET): $(OBJS)
&gt; 	@echo Linking $(TARGET)...
&gt; 	$(HIDECMD)$(LD) $(OBJS) $(LDFLAGS) -o $@
&gt; 
&gt; obj/%.o: src/%.c
&gt; 	@echo Compiling $&lt;...
&gt; 	$(HIDECMD)$(CC) $(CFLAGS) -c $&lt; -o $@
&gt; 
&gt; obj/%.o: src/%.cpp
&gt; 	@echo Compiling $&lt;...
&gt; 	$(HIDECMD)$(CXX) $(CXXFLAGS) -c $&lt; -o $@
&gt; 
&gt; obj/%.o: src/%.s
&gt; 	@echo Compiling $&lt;...
&gt; 	$(HIDECMD)$(CXX) $(CFLAGS) -c $&lt; -o $@
&gt; 
&gt; obj/%.o: src/%.S
&gt; 	@echo Compiling $&lt;...
&gt; 	$(HIDECMD)$(CXX) $(CFLAGS) -c $&lt; -o $@
&gt; 
&gt; $(sort $(OBJDIRS)):
&gt; 	$(HIDECMD)$(MD) $@
&gt; 
&gt; maketree: $(sort $(OBJDIRS))
&gt; 
&gt; clean:
&gt; 	$(RM) -r obj
&gt; 	$(RM) $(TARGET)
diff -Nr old_pcsx4all/make_opk.sh new_pcsx4all/make_opk.sh
12c12
&lt; Exec=pcsx4all
---
&gt; Exec=pcsx4all -iso %f
19a20
&gt; #MimeType=application/x-pcsx4all-rom;application/x-pcsx4all-rom;application/bin;application/iso;
Binary files old_pcsx4all/pcsx4all.opk and new_pcsx4all/pcsx4all.opk differ
diff -Nr old_pcsx4all/src/gpu/gpulib/gpu.cpp new_pcsx4all/src/gpu/gpulib/gpu.cpp
226c226
&lt;   gpulib_frameskip_prepare();
---
&gt;   gpulib_frameskip_prepare(Config.FrameSkip);
794c794
&lt; void gpulib_frameskip_prepare(void)
---
&gt; void gpulib_frameskip_prepare(s8 frameskip)
796c796
&lt;   gpu.frameskip.set = Config.FrameSkip;
---
&gt;   gpu.frameskip.set = frameskip;
diff -Nr old_pcsx4all/src/gpu/gpulib/gpu.h new_pcsx4all/src/gpu/gpulib/gpu.h
129c129
&lt; void gpulib_frameskip_prepare(void);
---
&gt; void gpulib_frameskip_prepare(signed char frameskip);
diff -Nr old_pcsx4all/src/gpu/gpulib/vout_port.cpp new_pcsx4all/src/gpu/gpulib/vout_port.cpp
25c25,27
&lt; #define RGB16(C)		(((C)&amp;(0x1f&lt;&lt;10))&gt;&gt;10) | (((C)&amp;(0x1f&lt;&lt;5))&lt;&lt;1) | (((C)&amp;(0x1f&lt;&lt;0))&lt;&lt;11)
---
&gt; //#define RGB16(C)		(((C)&amp;(0x1f&lt;&lt;10))&gt;&gt;10) | (((C)&amp;(0x1f&lt;&lt;5))&lt;&lt;1) | (((C)&amp;(0x1f&lt;&lt;0))&lt;&lt;11)
&gt; //#define RGB16(C)		( (C)&gt;&gt;10 | ((C) &amp; 0x03e0)&lt;&lt;1 | ((C) &amp; 0x1f)&lt;&lt;11 )
&gt; #define RGB16(C)		( ((C) &amp; 0x7c00)&gt;&gt;10 | ((C) &amp; 0x03e0)&lt;&lt;1 | ((C) &amp; 0x1f)&lt;&lt;11 )
37a40,84
&gt; bool use_clip_368;
&gt; 
&gt; static inline u16 middle(u16 s1, u16 s2, u16 s3)
&gt; {
&gt; 	u16 x, y, temp;
&gt; 	u16 a[] = {s1, s2, s3};
&gt; 
&gt; 	for(y=0; y&lt;2; y++){
&gt; 		for(x=1; x&lt;3; x++){
&gt; 			if(a[x] &gt; a[y]){
&gt; 				temp = a[x];
&gt; 				a[x] = a[y];
&gt; 				a[y] = temp;
&gt; 			}
&gt; 		}
&gt; 	}
&gt; 	return a[1];
&gt; }
&gt; 
&gt; static inline u16 mask_filter(u16 *s)
&gt; {/*
&gt; 	u16 r0 = (s[0] &amp; 0x7c00) &gt;&gt; 10;
&gt; 	u16 r1 = (s[1] &amp; 0x7c00) &gt;&gt; 10;
&gt; 
&gt; 	u16 g0 = (s[0] &amp; 0x03e0) &gt;&gt; 5;
&gt; 	u16 g1 = (s[1] &amp; 0x03e0) &gt;&gt; 5;
&gt; 	
&gt; 	u16 b0 = s[0] &amp; 0x1f;
&gt; 	u16 b1 = s[1] &amp; 0x1f;
&gt; 
&gt; 	u16 r = (r0 + r1) / 2;
&gt; 	u16 g = (g0 + g1) / 2;
&gt; 	u16 b = (b0 + b1) / 2;
&gt; 
&gt; 	return (b&lt;&lt;11) | (g&lt;&lt;6) | r;*/
&gt; 
&gt; 	u16 c1 = s[0];
&gt; 	u16 c2 = s[1];
&gt; 	u16 r = (u16)((u16)(c1 &amp; 0x7c00) + (u16)(c2 &amp; 0x7c00)) &gt;&gt; 11;
&gt; 	u16 g = (u16)((u16)(c1 &amp; 0x03e0) + (u16)(c2 &amp; 0x03e0)); //&gt;&gt; 6
&gt; 	u16 b = (u16)((u16)(c1 &amp; 0x001f) + (u16)(c2 &amp; 0x001f)) &gt;&gt; 1;
&gt; 
&gt; 	return (b&lt;&lt;11) | (g) | r; //(g&lt;&lt;6)
&gt; }
&gt; 
41c88,89
&lt; static inline void GPU_BlitWW(const void* src, u16* dst16, bool isRGB24)
---
&gt; // GPU_BlitWW
&gt; static inline void GPU_Blit320(const void* src, u16* dst16, bool isRGB24)
68c116
&lt; 		const u8* src8 = (const u8*)src;
---
&gt; 		u8* src8 = (u8*)src;
93c141,142
&lt; static inline void GPU_BlitWWSWWSWS(const void* src, u16* dst16, bool isRGB24)
---
&gt; //  GPU_BlitWWSWWSWS
&gt; static inline void GPU_Blit512(const void* src, u16* dst16, bool isRGB24)
100c149
&lt; 		const u16* src16 = (const u16*) src;
---
&gt; 		u16* src16 = (u16*)src;
101a151
&gt; 		#if 0
111a162,173
&gt; 		#else
&gt; 			dst16[ 0] = RGB16(src16[0]);
&gt; 			dst16[ 1] = mask_filter(&amp;src16[1]);
&gt; 			dst16[ 2] = RGB16(src16[3]);
&gt; 			dst16[ 3] = mask_filter(&amp;src16[4]);
&gt; 			dst16[ 4] = mask_filter(&amp;src16[6]);
&gt; 			dst16[ 5] = RGB16(src16[8]);
&gt; 			dst16[ 6] = mask_filter(&amp;src16[9]);
&gt; 			dst16[ 7] = RGB16(src16[11]);
&gt; 			dst16[ 8] = mask_filter(&amp;src16[12]);
&gt; 			dst16[ 9] = mask_filter(&amp;src16[14]);
&gt; 		#endif
152c214,215
&lt; static inline void GPU_BlitWWWWWS(const void* src, u16* dst16, bool isRGB24)
---
&gt; //  GPU_BlitWWWWWS
&gt; static inline void GPU_Blit384(const void* src, u16* dst16, bool isRGB24)
159c222
&lt; 		const u16* src16 = (const u16*) src;
---
&gt; 		u16* src16 = (u16*)src;
160a224
&gt; 		#if 0
170a235,246
&gt; 		#else
&gt; 			dst16[ 0] = RGB16(src16[0]);
&gt; 			dst16[ 1] = RGB16(src16[1]);
&gt; 			dst16[ 2] = RGB16(src16[2]);
&gt; 			dst16[ 3] = RGB16(src16[3]);
&gt; 			dst16[ 4] = mask_filter(&amp;src16[4]);
&gt; 			dst16[ 5] = RGB16(src16[6]);
&gt; 			dst16[ 6] = RGB16(src16[7]);
&gt; 			dst16[ 7] = RGB16(src16[8]);
&gt; 			dst16[ 8] = RGB16(src16[9]);
&gt; 			dst16[ 9] = mask_filter(&amp;src16[10]);
&gt; 		#endif
207c283,332
&lt; static inline void GPU_BlitWWWWWWWWS(const void* src, u16* dst16, bool isRGB24, u32 uClip_src)
---
&gt; //  GPU_Blit368: 320 -6 -6 = 308
&gt; static inline void GPU_Blit368_clip(const void* src, u16* dst16)
&gt; {/*
&gt; 	u32 uCount;
&gt; 	u16* src16 = ((u16*) src);
&gt; 	uCount = 22;
&gt; 	//
&gt; 	do {
&gt; 		dst16[ 0] = RGB16(src16[0]);
&gt; 		dst16[ 1] = RGB16(src16[1]);
&gt; 		dst16[ 2] = RGB16(src16[2]);
&gt; 		dst16[ 3] = RGB16(src16[3]);
&gt; 		dst16[ 4] = RGB16(src16[4]);
&gt; 		dst16[ 5] = RGB16(src16[5]);
&gt; 		dst16[ 6] = mask_filter(&amp;src16[6]);
&gt; 		dst16[ 7] = RGB16(src16[8]);
&gt; 		dst16[ 8] = RGB16(src16[9]);
&gt; 		dst16[ 9] = RGB16(src16[10]);
&gt; 		dst16[10] = RGB16(src16[11]);
&gt; 		dst16[11] = RGB16(src16[12]);
&gt; 		dst16[12] = RGB16(src16[13]);
&gt; 		dst16[13] = mask_filter(&amp;src16[14]);
&gt; 		dst16 += 14;
&gt; 		src16 += 16;
&gt; 	} while (--uCount);   //6 + 22 * 14 = 314, 320 - 314 = 6
&gt; 	// 补齐末尾
&gt; 	dst16[0] = dst16[1] = dst16[2] = dst16[3] = dst16[4] = dst16[5] = 0;*/
&gt; 	u32 uCount;
&gt; 	u16* src16 = ((u16*) src);
&gt; 	uCount = 32;
&gt; 	//
&gt; 	do {
&gt; 		dst16[ 0] = RGB16(src16[0]);
&gt; 		dst16[ 1] = RGB16(src16[1]);
&gt; 		dst16[ 2] = RGB16(src16[2]);
&gt; 		dst16[ 3] = RGB16(src16[3]);
&gt; 		dst16[ 4] = RGB16(src16[4]);
&gt; 		dst16[ 5] = RGB16(src16[5]);
&gt; 		dst16[ 6] = RGB16(src16[6]);
&gt; 		dst16[ 7] = RGB16(src16[7]);
&gt; 		dst16[ 8] = RGB16(src16[8]);
&gt; 		dst16[ 9] = mask_filter(&amp;src16[9]);
&gt; 		dst16 += 10;
&gt; 		src16 += 11;
&gt; 	} while (--uCount);
&gt; }
&gt; 
&gt; 
&gt; //  GPU_BlitWWWWWWWWS
&gt; static inline void GPU_Blit368(const void* src, u16* dst16, bool isRGB24/*, u32 uClip_src*/)
212a338,339
&gt; 		u16* src16 = ((u16*) src)/* + uClip_src*/;
&gt;     #if 0
214d340
&lt; 		const u16* src16 = ((const u16*) src) + uClip_src;
224d349
&lt; 
235a361,411
&gt; 	#else
&gt; 	   {/*
&gt; 			u16 x, cnt=0, sx=0;
&gt; 			for(x=0; x&lt;320; x++){
&gt; 				sx++;
&gt; 				if(++cnt == 7){
&gt; 					cnt = 0;
&gt; 					dst16[x] = mask_filter(&amp;src16[sx]);
&gt; 					sx++;
&gt; 				}
&gt; 				else{
&gt; 					dst16[x] = RGB16(src16[sx]);
&gt; 				}
&gt; 			}*/
&gt; 		}
&gt; 		uCount = 22;
&gt; 		dst16[0] = RGB16(src16[0]);
&gt; 		dst16++;
&gt; 		src16++;
&gt; 		do {
&gt; 			dst16[ 0] = RGB16(src16[0]);
&gt; 			dst16[ 1] = RGB16(src16[1]);
&gt; 			dst16[ 2] = RGB16(src16[2]);
&gt; 			dst16[ 3] = RGB16(src16[3]);
&gt; 			dst16[ 4] = RGB16(src16[4]);
&gt; 			dst16[ 5] = RGB16(src16[5]);
&gt; 			dst16[ 6] = mask_filter(&amp;src16[6]);
&gt; 			dst16[ 7] = RGB16(src16[8]);
&gt; 			dst16[ 8] = RGB16(src16[9]);
&gt; 			dst16[ 9] = RGB16(src16[10]);
&gt; 			dst16[10] = RGB16(src16[11]);
&gt; 			dst16[11] = RGB16(src16[12]);
&gt; 			dst16[12] = RGB16(src16[13]);
&gt; 			dst16[13] = mask_filter(&amp;src16[14]);
&gt; 			dst16 += 14;
&gt; 			src16 += 16;
&gt; 		} while (--uCount);   //1 + 22 * 14 = 309, 320 - 309 = 11
&gt; 		{// 补齐末尾
&gt; 			dst16[ 0] = RGB16(src16[0]);
&gt; 			dst16[ 1] = RGB16(src16[1]);
&gt; 			dst16[ 2] = RGB16(src16[2]);
&gt; 			dst16[ 3] = RGB16(src16[3]);
&gt; 			dst16[ 4] = RGB16(src16[4]);
&gt; 			dst16[ 5] = RGB16(src16[5]);
&gt; 			dst16[ 6] = mask_filter(&amp;src16[6]);
&gt; 			dst16[ 7] = RGB16(src16[8]);
&gt; 			dst16[ 8] = RGB16(src16[9]);
&gt; 			dst16[ 9] = RGB16(src16[10]);
&gt; 			dst16[10] = RGB16(src16[11]);
&gt; 		}
&gt; 		#endif
238c414
&lt; 		const u16* src16 = ((const u16*) src) + uClip_src;
---
&gt; 		const u16* src16 = ((const u16*) src)/* + uClip_src*/;
251c427,428
&lt; 	} else
---
&gt; 	}
&gt; 	else
254c431
&lt; 		const u8* src8 = (const u8*)src + (uClip_src&lt;&lt;1) + uClip_src;
---
&gt; 		const u8* src8 = (const u8*)src/* + (uClip_src&lt;&lt;1) + uClip_src*/;
279c456,458
&lt; static inline void GPU_BlitWWDWW(const void* src, u16* dst16, bool isRGB24)
---
&gt; 
&gt; // GPU_BlitWWDWW
&gt; static inline void GPU_Blit256(const void* src, u16* dst16, bool isRGB24)
335c514,515
&lt; static inline void GPU_BlitWS(const void* src, u16* dst16, bool isRGB24)
---
&gt; // GPU_BlitWS
&gt; static inline void GPU_Blit640(const void* src, u16* dst16, bool isRGB24)
341c521
&lt; 		const u16* src16 = (const u16*) src;
---
&gt; 		u16* src16 = (u16*)src;
342a523
&gt; 		#if 0
361a543,563
&gt; 		#else
&gt; 			dst16[ 0] = mask_filter(&amp;src16[0]);
&gt; 			dst16[ 1] = mask_filter(&amp;src16[2]);
&gt; 			dst16[ 2] = mask_filter(&amp;src16[4]);
&gt; 			dst16[ 3] = mask_filter(&amp;src16[6]);
&gt; 
&gt; 			dst16[ 4] = mask_filter(&amp;src16[8]);
&gt; 			dst16[ 5] = mask_filter(&amp;src16[10]);
&gt; 			dst16[ 6] = mask_filter(&amp;src16[12]);
&gt; 			dst16[ 7] = mask_filter(&amp;src16[14]);
&gt; 
&gt; 			dst16[ 8] = mask_filter(&amp;src16[16]);
&gt; 			dst16[ 9] = mask_filter(&amp;src16[18]);
&gt; 			dst16[10] = mask_filter(&amp;src16[20]);
&gt; 			dst16[11] = mask_filter(&amp;src16[22]);
&gt; 
&gt; 			dst16[12] = mask_filter(&amp;src16[24]);
&gt; 			dst16[13] = mask_filter(&amp;src16[26]);
&gt; 			dst16[14] = mask_filter(&amp;src16[28]);
&gt; 			dst16[15] = mask_filter(&amp;src16[30]);	
&gt; 		#endif
456c658
&lt; 
---
&gt;   //printf("steward, %s, x:%d y:%d w:%d h0:%d h1:%d\n", __func__, x0, y0, w0, h0, h1);
461c663,665
&lt; 				GPU_BlitWWDWW(src16 + src16_offs, dst16, isRGB24);
---
&gt; 				GPU_Blit256(src16 + src16_offs, dst16, isRGB24);
&gt; 				//GPU_Blit256(src16 + src16_offs, dst16 + VIDEO_WIDTH, isRGB24);
&gt; 				dst16 += VIDEO_WIDTH;
468,469c672,683
&lt; 			for (int y1=y0+h1; y0&lt;y1; y0+=incY) {
&lt; 				GPU_BlitWWWWWWWWS(src16 + src16_offs, dst16, isRGB24, 4);
---
&gt; 			for (int y1=y0+h1; y0&lt;y1; y0+=incY) {//SLPS02124
&gt; 				if (use_clip_368 == false || isRGB24)
&gt; 				{
&gt; 				    GPU_Blit368(src16 + src16_offs, dst16, isRGB24/*, 0*/);
&gt; 				    //GPU_Blit368(src16 + src16_offs, dst16 + VIDEO_WIDTH, isRGB24/*, 0*/);
&gt; 				}
&gt; 				else
&gt; 				{
&gt; 				    GPU_Blit368_clip(src16 + src16_offs, dst16);
&gt; 				    //GPU_Blit368_clip(src16 + src16_offs, dst16 + VIDEO_WIDTH);
&gt; 				}
&gt; 				dst16 += VIDEO_WIDTH;
479c693,695
&lt; 				GPU_BlitWW(src16 + src16_offs, dst16, isRGB24);
---
&gt; 				GPU_Blit320(src16 + src16_offs, dst16, isRGB24);
&gt; 				//GPU_Blit320(src16 + src16_offs, dst16 + VIDEO_WIDTH, isRGB24);
&gt; 				dst16 += VIDEO_WIDTH;
487c703,705
&lt; 				GPU_BlitWWWWWS(src16 + src16_offs, dst16, isRGB24);
---
&gt; 				GPU_Blit384(src16 + src16_offs, dst16, isRGB24);
&gt; 				//GPU_Blit384(src16 + src16_offs, dst16 + VIDEO_WIDTH, isRGB24);
&gt; 				dst16 += VIDEO_WIDTH;
495c713,715
&lt; 				GPU_BlitWWSWWSWS(src16 + src16_offs, dst16, isRGB24);
---
&gt; 				GPU_Blit512(src16 + src16_offs, dst16, isRGB24);
&gt; 				//GPU_Blit512(src16 + src16_offs, dst16 + VIDEO_WIDTH, isRGB24);
&gt; 				dst16 += VIDEO_WIDTH;
503c723,725
&lt; 				GPU_BlitWS(src16 + src16_offs, dst16, isRGB24);
---
&gt; 				GPU_Blit640(src16 + src16_offs, dst16, isRGB24);
&gt; 				//GPU_Blit640(src16 + src16_offs, dst16 + VIDEO_WIDTH, isRGB24);
&gt; 				dst16 += VIDEO_WIDTH;
509d730
&lt; 
diff -Nr old_pcsx4all/src/gpu/gpu_unai/gpu.h new_pcsx4all/src/gpu/gpu_unai/gpu.h
26c26,27
&lt; 	uint8_t pixel_skip:1;     // If 1, allows skipping rendering pixels that
---
&gt;     uint8_t clip_368:1;
&gt; 	//uint8_t pixel_skip:1;     // If 1, allows skipping rendering pixels that
diff -Nr old_pcsx4all/src/gpu/gpu_unai/gpulib_if.cpp new_pcsx4all/src/gpu/gpu_unai/gpulib_if.cpp
107c107
&lt; {
---
&gt; {/*
119c119
&lt;   } else {
---
&gt;   } else */{
diff -Nr old_pcsx4all/src/gpu/gpu_unai/gpu_unai.h new_pcsx4all/src/gpu/gpu_unai/gpu_unai.h
305c305
&lt; static inline bool PixelSkipEnabled()
---
&gt; /*static inline bool PixelSkipEnabled()
308c308
&lt; }
---
&gt; }*/
diff -Nr old_pcsx4all/src/plugin_lib/plugin_lib.cpp new_pcsx4all/src/plugin_lib/plugin_lib.cpp
40c40
&lt; static void pl_frameskip_prepare(void);
---
&gt; static void pl_frameskip_prepare(s8 frameskip);
64c64
&lt; static void pl_frameskip_prepare(void)
---
&gt; static void pl_frameskip_prepare(s8 frameskip)
67c67
&lt; 	pl_data.frameskip = Config.FrameSkip;
---
&gt; 	pl_data.frameskip = frameskip;
80c80
&lt; 	gpulib_frameskip_prepare();
---
&gt; 	gpulib_frameskip_prepare(frameskip);
110c110,111
&lt; 
---
&gt;     extern boolean use_speedup;
&gt;     s8 framskip = use_speedup == false ? Config.FrameSkip : 3;
112c113
&lt; 	if (pl_data.frameskip != Config.FrameSkip ||
---
&gt; 	if (pl_data.frameskip != framskip ||
115c116
&lt; 		pl_frameskip_prepare();
---
&gt; 		pl_frameskip_prepare(framskip);
140c141
&lt; 	if (Config.FrameLimit &amp;&amp; (diff &gt; pl_data.frame_interval)) {
---
&gt; 	if ((Config.FrameLimit &amp;&amp; !use_speedup) &amp;&amp; (diff &gt; pl_data.frame_interval)) {
177c178
&lt; 	pl_frameskip_prepare();
---
&gt; 	pl_frameskip_prepare(Config.FrameSkip);
192c193
&lt; 	pl_frameskip_prepare();
---
&gt; 	pl_frameskip_prepare(Config.FrameSkip);
diff -Nr old_pcsx4all/src/port/sdl/frontend.cpp new_pcsx4all/src/port/sdl/frontend.cpp
42c42
&lt; 
---
&gt; #define _KEY_BACK   (KEY_SELECT|KEY_B)
246c246
&lt; 		if (keys &amp; KEY_SELECT) {
---
&gt; 		if (keys &amp; _KEY_BACK) {
929c929
&lt; 		if ((swapping_cd) &amp;&amp; (keys &amp; KEY_SELECT)) {
---
&gt; 		if ((swapping_cd) &amp;&amp; (keys &amp; _KEY_BACK)) {
1050a1051,1053
&gt; 	{(char *)"GPU settings", &amp;gui_GPUSettings, NULL, NULL, NULL},
&gt; 	{(char *)"SPU settings", &amp;gui_SPUSettings, NULL, NULL, NULL},
&gt; 	{(char *)"Core settings", &amp;gui_Settings, NULL, NULL, NULL},
1174a1178,1200
&gt; static int Analog1_alter(u32 keys)
&gt; {
&gt; 	if (keys &amp; KEY_RIGHT) {
&gt; 		if (Config.AnalogArrow &lt; 1) Config.AnalogArrow = 1;
&gt; 	} else if (keys &amp; KEY_LEFT) {
&gt; 		if (Config.AnalogArrow &gt; 0) Config.AnalogArrow = 0;
&gt; 	}
&gt; 
&gt; 	return 0;
&gt; }
&gt; 
&gt; static void Analog1_hint()
&gt; {
&gt; 	port_printf(6 * 8, 10 * 8, "Analog Stick -&gt; Arrow Keys");
&gt; }
&gt; 
&gt; static char *Analog1_show()
&gt; {
&gt; 	static char buf[16] = "\0";
&gt; 	sprintf(buf, "%s", Config.AnalogArrow ? "on" : "off");
&gt; 	return buf;
&gt; }
&gt; 
1187a1214
&gt; 	Config.AnalogArrow = 0;
1208a1236
&gt; 	{(char *)"Analog Arrow Keys    ", NULL, &amp;Analog1_alter, &amp;Analog1_show, &amp;Analog1_hint},
1395c1423
&lt; static int pixel_skip_alter(u32 keys)
---
&gt; static int clip_368_alter(u32 keys)
1398,1399c1426,1427
&lt; 		if (gpu_unai_config_ext.pixel_skip == false)
&lt; 			gpu_unai_config_ext.pixel_skip = true;
---
&gt; 		if (gpu_unai_config_ext.clip_368 == false)
&gt; 			gpu_unai_config_ext.clip_368 = true;
1401,1402c1429,1430
&lt; 		if (gpu_unai_config_ext.pixel_skip == true)
&lt; 			gpu_unai_config_ext.pixel_skip = false;
---
&gt; 		if (gpu_unai_config_ext.clip_368 == true)
&gt; 			gpu_unai_config_ext.clip_368 = false;
1408c1436
&lt; static char *pixel_skip_show()
---
&gt; static char *clip_368_show()
1411c1439
&lt; 	sprintf(buf, "%s", gpu_unai_config_ext.pixel_skip == true ? "on" : "off");
---
&gt; 	sprintf(buf, "%s", gpu_unai_config_ext.clip_368 == true ? "on" : "off");
1427c1455
&lt; 	gpu_unai_config_ext.pixel_skip = 1;
---
&gt; 	gpu_unai_config_ext.clip_368 = 0;
1451c1479
&lt; 	{(char *)"Pixel skip           ", NULL, &amp;pixel_skip_alter, &amp;pixel_skip_show, NULL},
---
&gt; 	{(char *)"Clip 368 -&gt; 352      ", NULL, &amp;clip_368_alter, &amp;clip_368_show, NULL},
1767c1795,1802
&lt; 		if (keys &amp; KEY_SELECT) {
---
&gt; 		if (keys &amp; _KEY_BACK) {
&gt; 		    if (menu == &amp;gui_GameMenu)
&gt; 		    {
&gt; 		        while (key_read() != 0)
&gt;                 {
&gt;                     timer_delay(50);
&gt;                 }
&gt; 			}
1823d1857
&lt; 
diff -Nr old_pcsx4all/src/port/sdl/port.cpp new_pcsx4all/src/port/sdl/port.cpp
238a239,241
&gt; 		} else if (!strcmp(line, "AnalogArrow")) {
&gt; 			sscanf(arg, "%d", &amp;value);
&gt; 			Config.AnalogArrow = value;
298c301
&lt; 		else if (!strcmp(line, "pixel_skip")) {
---
&gt; 		else if (!strcmp(line, "clip_368")) {
300c303
&lt; 			gpu_unai_config_ext.pixel_skip = value;
---
&gt; 			gpu_unai_config_ext.clip_368 = value;
358c361,362
&lt; 		   "FrameSkip %d\n",
---
&gt; 		   "FrameSkip %d\n"
&gt; 		   "AnalogArrow %d\n",
363c367
&lt; 		   Config.FrameSkip);
---
&gt; 		   Config.FrameSkip, Config.AnalogArrow);
377c381
&lt; 		   "pixel_skip %d\n"
---
&gt; 		   "clip_368 %d\n"
383c387
&lt; 		   gpu_unai_config_ext.pixel_skip,
---
&gt; 		   gpu_unai_config_ext.clip_368,
444c448
&lt; 	//{ SDLK_ESCAPE,		DKEY_SELECT },
---
&gt; 	{ SDLK_ESCAPE,		DKEY_SELECT },
460c464
&lt; static unsigned short pad1 = 0xffff;
---
&gt; static unsigned short pad1 = 0xffff, _pad1 = 0xffff;
461a466,509
&gt; static unsigned short analog1 = 0;
&gt; static int menu_check = 0;
&gt; static int select_count = 0;
&gt; boolean use_speedup = false;
&gt; SDL_Joystick * sdl_joy;
&gt; #define joy_commit_range    3276
&gt; enum
&gt; {
&gt;     ANALOG_UP = 1,
&gt;     ANALOG_DOWN = 2,
&gt;     ANALOG_LEFT = 4,
&gt;     ANALOG_RIGHT = 8
&gt; };
&gt; 
&gt; void joy_init(void)
&gt; {
&gt;     sdl_joy = SDL_JoystickOpen(0);
&gt;     SDL_JoystickEventState(SDL_ENABLE);
&gt; /*
&gt; 	int i;
&gt; 	int joy_count;
&gt; 	
&gt; 	if (SDL_InitSubSystem(SDL_INIT_JOYSTICK))
&gt; 		return;
&gt; 	
&gt; 	joy_count = SDL_NumJoysticks();
&gt; 	
&gt; 	if (!joy_count)
&gt; 		return;
&gt; 
&gt; 	// now try and open one. If, for some reason it fails, move on to the next one
&gt; 	for (i = 0; i &lt; joy_count; i++)
&gt; 	{
&gt; 		sdl_joy = SDL_JoystickOpen(i);
&gt; 		if (sdl_joy)
&gt; 		{
&gt; 			sdl_joy_num = i;
&gt; 			break;
&gt; 		}	
&gt; 	}
&gt; 	
&gt; 	// make sure that Joystick event polling is a go
&gt; 	SDL_JoystickEventState(SDL_ENABLE);*/
&gt; }
464a513
&gt;     int axisval;
468,469c517,520
&lt; 	while (SDL_PollEvent(&amp;event)) {
&lt; 		switch (event.type) {
---
&gt; 	while (SDL_PollEvent(&amp;event))
&gt; 	{
&gt; 		switch (event.type)
&gt; 		{
474,475c525,527
&lt; 			switch (event.key.keysym.sym) {
&lt; #ifndef GCW_ZERO
---
&gt; 			switch (event.key.keysym.sym)
&gt; 			{
&gt;             #ifndef GCW_ZERO
480c532
&lt; #endif
---
&gt;             #endif
485c537,567
&lt; 
---
&gt;         case SDL_JOYAXISMOTION:
&gt;             switch (event.jaxis.axis)
&gt; 			{
&gt; 			case 0: /* X axis */
&gt; 			    axisval = event.jaxis.value;
&gt; 			    analog1 &amp;= ~(ANALOG_LEFT | ANALOG_RIGHT);
&gt; 				if (axisval &gt; joy_commit_range)
&gt; 				{
&gt; 				    analog1 |= ANALOG_RIGHT;
&gt; 				}
&gt; 				else if (axisval &lt; -joy_commit_range)
&gt; 				{
&gt; 				    analog1 |= ANALOG_LEFT;
&gt; 				}
&gt; 				break;
&gt; 		    case 1: /* Y axis*/
&gt; 				axisval = event.jaxis.value;
&gt; 				analog1 &amp;= ~(ANALOG_UP | ANALOG_DOWN);
&gt; 				if (axisval &gt; joy_commit_range)
&gt; 				{
&gt; 				    analog1 |= ANALOG_DOWN;
&gt; 				}
&gt; 				else if (axisval &lt; -joy_commit_range)
&gt; 				{
&gt; 				    analog1 |= ANALOG_UP;
&gt; 				}
&gt; 				break;
&gt; 		    }
&gt; 		    break;
&gt; 		case SDL_JOYBUTTONDOWN:
&gt; 		    break;
493c575
&lt; 			pad1 &amp;= ~(1 &lt;&lt; keymap[k].bit);
---
&gt; 			_pad1 &amp;= ~(1 &lt;&lt; keymap[k].bit);
495c577
&lt; 			pad1 |= (1 &lt;&lt; keymap[k].bit);
---
&gt; 			_pad1 |= (1 &lt;&lt; keymap[k].bit);
498a581
&gt; 	pad1 = _pad1;
502,524c585,685
&lt; 	// SELECT+B for psx's SELECT
&lt; 	if (keys[SDLK_ESCAPE] &amp;&amp; keys[SDLK_LALT]) {
&lt; 		pad1 &amp;= ~(1 &lt;&lt; DKEY_SELECT);
&lt; 		pad1 |= (1 &lt;&lt; DKEY_CROSS);
&lt; 	} else {
&lt; 		pad1 |= (1 &lt;&lt; DKEY_SELECT);
&lt; 	}
&lt; 
&lt; 	// SELECT+L1 for psx's L2
&lt; 	if (keys[SDLK_ESCAPE] &amp;&amp; keys[SDLK_TAB]) {
&lt; 		pad1 &amp;= ~(1 &lt;&lt; DKEY_L2);
&lt; 		pad1 |= (1 &lt;&lt; DKEY_L1);
&lt; 	} else {
&lt; 		pad1 |= (1 &lt;&lt; DKEY_L2);
&lt; 	}
&lt; 
&lt; 	// SELECT+R1 for R2
&lt; 	if (keys[SDLK_ESCAPE] &amp;&amp; keys[SDLK_BACKSPACE]) {
&lt; 		pad1 &amp;= ~(1 &lt;&lt; DKEY_R2);
&lt; 		pad1 |= (1 &lt;&lt; DKEY_R1);
&lt; 	} else {
&lt; 		pad1 |= (1 &lt;&lt; DKEY_R2);
&lt; 	}
---
&gt;     // SELECT + 
&gt;     if (keys[SDLK_ESCAPE])
&gt;     {
&gt;         if (!keys[SDLK_RETURN])
&gt;         {
&gt;             menu_check = 1; //SELECT only
&gt;         }
&gt;         else if (menu_check == 1)
&gt;         {
&gt;             menu_check = 2; //SELECT + START
&gt;         }
&gt;         else
&gt;         {// START + SELECT
&gt;             if (use_speedup == false &amp;&amp; ++select_count == 70)
&gt;             {
&gt;                 use_speedup = true;
&gt;             }
&gt;         }
&gt;     }
&gt;     else
&gt;     {
&gt;         menu_check = 0;
&gt;     }
&gt;     if (use_speedup)
&gt;     {
&gt;         if (!keys[SDLK_ESCAPE] &amp;&amp; !keys[SDLK_RETURN])
&gt;         {
&gt;             select_count = 0;
&gt;         }
&gt;         else if (select_count == 0)
&gt;         {
&gt;             use_speedup = false;
&gt;         }
&gt;     }
&gt;     //
&gt;     if (Config.AnalogArrow)
&gt;     {
&gt;         pad1 |= (1 &lt;&lt; DKEY_SELECT);
&gt;     	// SELECT+B for psx's SELECT
&gt;     	if (keys[SDLK_ESCAPE] &amp;&amp; keys[SDLK_LALT])
&gt;     	{
&gt;     		pad1 &amp;= ~(1 &lt;&lt; DKEY_SELECT);
&gt;     		pad1 |= (1 &lt;&lt; DKEY_CROSS);
&gt;     	}
&gt;     	// SELECT+L1 for psx's L2
&gt;     	if (keys[SDLK_ESCAPE] &amp;&amp; keys[SDLK_TAB])
&gt;     	{
&gt;     		pad1 &amp;= ~(1 &lt;&lt; DKEY_L2);
&gt;     		pad1 |= (1 &lt;&lt; DKEY_L1);
&gt;     	}
&gt;     	else
&gt;     	{
&gt;     		pad1 |= (1 &lt;&lt; DKEY_L2);
&gt;     	}
&gt;     	// SELECT+R1 for R2
&gt;     	if (keys[SDLK_ESCAPE] &amp;&amp; keys[SDLK_BACKSPACE])
&gt;     	{
&gt;     		pad1 &amp;= ~(1 &lt;&lt; DKEY_R2);
&gt;     		pad1 |= (1 &lt;&lt; DKEY_R1);
&gt;     	}
&gt;     	else
&gt;     	{
&gt;     		pad1 |= (1 &lt;&lt; DKEY_R2);
&gt;     	}
&gt;     	if ((_pad1 &amp; (1 &lt;&lt; DKEY_UP)) &amp;&amp; (analog1 &amp; ANALOG_UP))
&gt;     	{
&gt;     	    pad1 &amp;= ~(1 &lt;&lt; DKEY_UP);
&gt;     	}
&gt;     	if ((_pad1 &amp; (1 &lt;&lt; DKEY_DOWN)) &amp;&amp; (analog1 &amp; ANALOG_DOWN))
&gt;     	{
&gt;     	    pad1 &amp;= ~(1 &lt;&lt; DKEY_DOWN);
&gt;     	}
&gt;     	if ((_pad1 &amp; (1 &lt;&lt; DKEY_LEFT)) &amp;&amp; (analog1 &amp; ANALOG_LEFT))
&gt;     	{
&gt;     	    pad1 &amp;= ~(1 &lt;&lt; DKEY_LEFT);
&gt;     	}
&gt;     	if ((_pad1 &amp; (1 &lt;&lt; DKEY_RIGHT)) &amp;&amp; (analog1 &amp; ANALOG_RIGHT))
&gt;     	{
&gt;     	    pad1 &amp;= ~(1 &lt;&lt; DKEY_RIGHT);
&gt;     	}
&gt;     }
&gt;     else
&gt; 	{// Analog Arrow Off
&gt;         pad1 |= (1 &lt;&lt; DKEY_L2) | (1 &lt;&lt; DKEY_R2);
&gt;         if (analog1 == ANALOG_UP)
&gt;         {
&gt;             pad1 &amp;= ~((1 &lt;&lt; DKEY_L2) | (1 &lt;&lt; DKEY_R2));
&gt;         }
&gt;         else if (analog1 == ANALOG_DOWN)
&gt;         {
&gt;             menu_check = 2;
&gt;         }
&gt;         else if (analog1 &amp; ANALOG_LEFT)
&gt;         {
&gt;             pad1 &amp;= ~(1 &lt;&lt; DKEY_L2);
&gt;         }
&gt;         else if (analog1 &amp; ANALOG_RIGHT)
&gt;         {
&gt;             pad1 &amp;= ~(1 &lt;&lt; DKEY_R2);
&gt;         }
&gt;     }
527c688,689
&lt; 	if (keys[SDLK_ESCAPE] &amp;&amp; keys[SDLK_RETURN] &amp;&amp; !keys[SDLK_LALT]) {
---
&gt; 	if (menu_check == 2 &amp;&amp; !keys[SDLK_LALT])
&gt; 	{
537,538c699,702
&lt; 		pad1 |= (1 &lt;&lt; DKEY_START);
&lt; 		pad1 |= (1 &lt;&lt; DKEY_CROSS);
---
&gt; 		use_speedup = false;
&gt; 		menu_check = 0;
&gt; 		analog1 = 0;
&gt; 		pad1 |= (1 &lt;&lt; DKEY_START) | (1 &lt;&lt; DKEY_CROSS) | (1 &lt;&lt; DKEY_SELECT);
649a814
&gt; 	Config.AnalogArrow = false;
729c894
&lt; 	gpu_unai_config_ext.pixel_skip = 1;
---
&gt; 	gpu_unai_config_ext.clip_368 = 0;
915c1080
&lt; 			gpu_unai_config_ext.pixel_skip = 0;
---
&gt; 			gpu_unai_config_ext.clip_368 = 0;
1048c1213
&lt; 	screen = SDL_SetVideoMode(320, 240, 16, flags);
---
&gt; 	screen = SDL_SetVideoMode(320, 480, 16, flags);
1050c1215
&lt; 		puts("NO Set VideoMode 320x240x16");
---
&gt; 		puts("NO Set VideoMode 320x480x16");
1106a1272,1279
&gt; 	
&gt; 	extern bool use_clip_368;
&gt; 	use_clip_368 = gpu_unai_config_ext.clip_368;
&gt; 	if (strncmp(CdromId, "SLPS02124", 9) == 0)
&gt; 	{// fix Grandia
&gt; 		use_clip_368 = true;
&gt; 	}
&gt; 	joy_init();
1209a1383,1384
&gt; 
&gt;   y*= 2;
1213,1220c1388,1395
&lt; 			screen[l*320+0]=(fontdata8x8[((text[i])*8)+l]&amp;0x80)?0xffff:0x0000;
&lt; 			screen[l*320+1]=(fontdata8x8[((text[i])*8)+l]&amp;0x40)?0xffff:0x0000;
&lt; 			screen[l*320+2]=(fontdata8x8[((text[i])*8)+l]&amp;0x20)?0xffff:0x0000;
&lt; 			screen[l*320+3]=(fontdata8x8[((text[i])*8)+l]&amp;0x10)?0xffff:0x0000;
&lt; 			screen[l*320+4]=(fontdata8x8[((text[i])*8)+l]&amp;0x08)?0xffff:0x0000;
&lt; 			screen[l*320+5]=(fontdata8x8[((text[i])*8)+l]&amp;0x04)?0xffff:0x0000;
&lt; 			screen[l*320+6]=(fontdata8x8[((text[i])*8)+l]&amp;0x02)?0xffff:0x0000;
&lt; 			screen[l*320+7]=(fontdata8x8[((text[i])*8)+l]&amp;0x01)?0xffff:0x0000;
---
&gt; 			screen[l*320*2+0]=(fontdata8x8[((text[i])*8)+l]&amp;0x80)?0xffff:0x0000;
&gt; 			screen[l*320*2+1]=(fontdata8x8[((text[i])*8)+l]&amp;0x40)?0xffff:0x0000;
&gt; 			screen[l*320*2+2]=(fontdata8x8[((text[i])*8)+l]&amp;0x20)?0xffff:0x0000;
&gt; 			screen[l*320*2+3]=(fontdata8x8[((text[i])*8)+l]&amp;0x10)?0xffff:0x0000;
&gt; 			screen[l*320*2+4]=(fontdata8x8[((text[i])*8)+l]&amp;0x08)?0xffff:0x0000;
&gt; 			screen[l*320*2+5]=(fontdata8x8[((text[i])*8)+l]&amp;0x04)?0xffff:0x0000;
&gt; 			screen[l*320*2+6]=(fontdata8x8[((text[i])*8)+l]&amp;0x02)?0xffff:0x0000;
&gt; 			screen[l*320*2+7]=(fontdata8x8[((text[i])*8)+l]&amp;0x01)?0xffff:0x0000;
diff -Nr old_pcsx4all/src/psxcommon.h new_pcsx4all/src/psxcommon.h
164c164,165
&lt; 
---
&gt; 	// add new ...
&gt;     boolean AnalogArrow;
</pre><br>

<p>
完成<br>
<img src="port_pcsx4all/1.jpg" class="maxSize">
</p>

<p>
<br><a href="../../handheld.htm">返回上一頁</a>
</p>

</div>
</div>
</div>
</body>
</html>
