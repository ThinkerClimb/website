<!--
 ____________________________________________________________
|                                                            |
|    DESIGN + Pat Heard { http://fullahead.org }             |
|      DATE + 2006.09.12                                     |
| COPYRIGHT + Free use if this notice is kept in place.      |
|____________________________________________________________|

-->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>司徒的教學網站</title>
  <meta http-lowast="content-type" content="application/xhtml+xml; charset=UTF-8" />
  <meta name="author" content="fullahead.org" />
  <meta name="keywords" content="XHTML, CSS, template, FullAhead" />
  <meta name="description" content="A valid, XHTML 1.0 template" />
  <meta name="robots" content="index, follow, noarchive" />
  <meta name="googlebot" content="noarchive" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes, minimum-scale=0.1, maximum-scale=100.0"/>

  <link rel="shortcut icon" href="../../../../website.ico">
  <link rel="stylesheet" type="text/css" href="../../../../styles/shCore.css" />
  <link rel="stylesheet" type="text/css" href="../../../../styles/shThemeDefault.css" />
  <link rel="stylesheet" type="text/css" href="../../../../css/html.css" media="screen, projection, tv " />
  <link rel="stylesheet" type="text/css" href="../../../../css/layout.css" media="screen, projection, tv" />
  <link rel="stylesheet" type="text/css" href="../../../../css/print.css" media="print" />
  
  <script type="text/javascript" src="../../../../scripts/shCore.js"></script>
  <script type="text/javascript" src="../../../../scripts/shBrushCpp.js"></script>

  <!-- Conditional comment to apply opacity fix for IE #content background.
       Invalid CSS, but can be removed without harming design -->
  <!--[if gt IE 5]>
  <link rel="stylesheet" type="text/css" href="css/ie.css" media="screen, projection, tv " />
  <![endif]-->
</head>

<body>
<script type="text/javascript">SyntaxHighlighter.all();</script>
<div id="wrapper">
<div id="content">
<script type="text/javascript" src="../../../../header.js"></script>
<div id="page">
<h3>Linux Device Driver >> ARM CPU >> Assembly >> Advanced >> Char (Kernel 2.6)</h3>
<p><b>File Operation</b></p>
<hr size="1">
<p>
[Github] <a href="https://github.com/steward-fu/gh_driver.git">https://github.com/steward-fu/gh_driver.git</a>
</p>

<p>
主程式
</p>

<pre>
$ vim main.S
</pre>

<pre class="brush:cpp">
#//===========================================================================
#// Linux Device Driver for ARM in Assembly
#// This file can be distributed or modified under GPL license
#// http://steward-fu.github.io/website/../../../../driver.htm
#// Steward Fu 2016/02/15
#//===========================================================================
.include "main.inc"

.section .data
dev_no:   .zero          4; .align
kdev:     .zero          4; .align
major:    .zero          1; .align
buffer:   .zero        255; .align 
fops:     .zero _fops_size; .align

.section .text
THIS_MODULE: .word  __this_module; .align
dev_name:    .asciz "lddia";       .align

.section .text
#//===========================================================================
#// description:
#//  open function for file operation
#//
#// parameter:
#//  r0
#//   pointer to struct inode
#//  r1
#//   pointer to struct file
#//
#// return:
#//   errno
#//===========================================================================
lddia_open:
   push {lr}
  # printk()
  _push _r0, _sz, "lddia, open\n"
  _call printk

  # return 0
  mov r0, #0
  pop {pc}

#//===========================================================================
#// description:
#//  close function for file operation
#//
#// parameter:
#//  r0
#//   pointer to struct inode
#//  r1
#//   pointer to struct file
#//
#// return:
#//  errno
#//===========================================================================
lddia_close:
  push {lr}
  # printk()
  _push _r0, _sz, "lddia, close\n"
  _call printk

  # return 0
  mov r0, #0
  pop {pc}

#//===========================================================================
#// description:
#//  read function for file operation
#//
#// parameter:
#//  r0
#//   struct file* filep
#//  r1
#//   char __user* buff
#//  r2
#//   size_t count
#//  r3
#//   loff_t* offp
#//
#// return:
#//  read length
#//===========================================================================
lddia_read:
  push {lr}
  # printk()
  _push _r0, _sz, "lddia, read\n"
  _call printk

  # return 0
  mov r0, #0
  pop {pc}

#//===========================================================================
#// description:
#//  write function for file operation
#//
#// parameter:
#//  r0
#//   struct file* filep
#//  r1
#//   char __user* buff
#//  r2
#//   size_t count
#//  r3
#//   loff_t* offp
#//
#// return:
#//  write length
#//===========================================================================
lddia_write:
  push {r4, r5, lr}
  mov r4, r1
  mov r5, r2
  # memset(buffer, 0, sizeof(buffer))
  _push _r2, _dw, 255
  _push _r1, _dw, 0
  _push _r0, _va, buffer
  _call memset

  # memcpy(buffer, buff, count)
  # it is better to use copy_from_user than this one
  _push _r2, _rn, r5
  _push _r1, _rn, r4
  _push _r0, _va, buffer
  _call memcpy

  # printk()
  _push _r1, _va, buffer
  _push _r0, _sz, "lddia, write buffer: %s"
  _call printk

  # return count
  mov r0, r5
  pop {r4, r5, pc}

#//===========================================================================
#// description:
#//  unload driver
#//
#// parameter:
#//  none
#//
#// return:
#//  nothing
#//===========================================================================
cleanup_module:
  push {lr}
  .if _use_kernel == 24
    # unregister(major, dev_name)
    _push _r1, _va, dev_name
    _push _r0, _vv, major
    _call unregister_chrdev
  .else
    # cdev_del(kdev)
    _push _r0, _vv, kdev
    _call cdev_del

    # unregister_chrdev_region(dev_no, 1)
    _push _r1, _dw, 1
    _push _r0, _vv, dev_no
    _call unregister_chrdev_region
  .endif
  # printk()
  _push _r0, _sz, "lddia, unload it!\n"
  _call printk
  pop {pc}

#//===========================================================================
#// description:
#//  load driver
#//
#// parameter:
#//  none
#//
#// return:
#//  errno
#//===========================================================================
init_module:
  push {lr}
  # printk()
  _push _r0, _sz, "lddia, load it!\n"
  _call printk

  # fops.owner = THIS_MODULE
  # fops.open  = lddia_open
  # fops.read  = lddia_read
  # fops.write = lddia_write
  # fops.close = lddia_close
  _set_fops_struct fops, _fops_owner,   THIS_MODULE
  _set_fops_struct fops, _fops_open,    lddia_open
  _set_fops_struct fops, _fops_read,    lddia_read
  _set_fops_struct fops, _fops_write,   lddia_write
  _set_fops_struct fops, _fops_release, lddia_close

  .if _use_kernel == 24
    # printk()
    _push _r0, _sz, "lddia, kernel 2.4\n"
    _call printk

    # major = register_chrdev(0, dev_name, &amp;fops)
    _push _r2, _va, fops
    _push _r1, _va, dev_name
    _push _r0, _dw, 0
    _call register_chrdev
    ldr r1, =major
    str r0, [r1]
  .else 
    # printk()
    _push _r0, _sz, "lddia, kernel 2.6\n"
    _call printk

    # alloc_chrdev_region(&amp;dev_no, 0, 1, dev_name)
    _push _r3, _va, dev_name
    _push _r2, _dw, 1
    _push _r1, _dw, 0
    _push _r0, _va, dev_no
    _call alloc_chrdev_region

    # kdev = cdev_alloc()
    _call cdev_alloc
    ldr r1, =kdev
    str r0, [r1]

    # kdev->owner = THIS_MODULE
    # kdev->ops   = &amp;fops
    _set_cdev_struct kdev, _cdev_owner, THIS_MODULE
    _set_cdev_struct kdev, _cdev_fops, fops

    # cdev_add(kdev, dev_no, 1)
    _push _r2, _dw, 1
    _push _r1, _vv, dev_no 
    _push _r0, _vv, kdev
    _call cdev_add

    # major = MAJOR(dev_no)
    MAJOR dev_no
    ldr r1, =major
    str r0, [r1]
  .endif
  # printk()
  _push _r1, _vv, major
  _push _r0, _sz, "lddia, major number is %d\n"
  _call printk

  # return 0
  mov r0, #0
  pop {pc}
 .end
</pre>

<p>
Include檔案
</p>

<pre>
$ vim main.inc
</pre>

<pre class="brush:cpp">
#//===========================================================================
#// Linux Device Driver for ARM in Assembly
#// This file can be distributed or modified under GPL license
#// http://steward-fu.github.io/website/../../../../driver.htm
#// Steward Fu 2016/02/15
#//===========================================================================
# 24 -&gt; 2.4
# 26 -&gt; 2.6
.equiv _use_kernel,             26

# file operations definition
.equiv _fops_owner,             0
.equiv _fops_llseek,            1
.equiv _fops_read,              2
.equiv _fops_write,             3
.equiv _fops_aio_read,          4
.equiv _fops_aio_write,         5
.equiv _fops_readdir,           6
.equiv _fops_poll,              7
.equiv _fops_ioctl,             8
.equiv _fops_unlocked_ioctl,    9
.equiv _fops_compat_ioctl,      10
.equiv _fops_mmap,              11
.equiv _fops_open,              12
.equiv _fops_flush,             13
.equiv _fops_release,           14
.equiv _fops_fsync,             15
.equiv _fops_aio_fsync,         16
.equiv _fops_fasync,            17
.equiv _fops_lock,              18
.equiv _fops_sendpage,          19
.equiv _fops_get_unmapped_area, 20
.equiv _fops_check_flags,       21
.equiv _fops_dir_notify,        22
.equiv _fops_flock,             23
.equiv _fops_splice_write,      24
.equiv _fops_splice_read,       25
.equiv _fops_setlease,          26
.equiv _fops_index,             27
.equiv _fops_size,              (_fops_index &lt;&lt; 2)

# cdev definition
.equiv _cdev_owner,     9
.equiv _cdev_fops,      10
.equiv _cdev_size,      (_kobj_size + 4 + 4 + _list_head_size + 4 + 4)
.equiv _kobj_size,      36
.equiv _list_head_size, 8

# parameter for _push macro
.equiv _r0, 0  @ r0 register
.equiv _r1, 1  @ r1 register
.equiv _r2, 2  @ r2 register
.equiv _r3, 3  @ r3 register
.equiv _sp, 4  @ sp register
.equiv _sz, 5  @ string with zero char
.equiv _dw, 6  @ data word
.equiv _db, 7  @ data byte
.equiv _va, 8  @ variable address
.equiv _vv, 9  @ variable value
.equiv _rn, 10 @ register value

# retrive from linux header file
# please keep original name
.equiv MINORBITS, 20
.equiv MINORMASK, ((1 &lt;&lt; MINORBITS) - 1)

# #define MAJOR(dev) ((unsigned int) ((dev) MINORBITS))
.macro MAJOR arg:req
  ldr r0, =\arg
  ldr r0, [r0]
  lsr r0, r0, #MINORBITS 
.endm

# #define MINOR(dev) ((unsigned int) ((dev) &amp; MINORMASK))
.macro MINOR arg:req
  ldr r0, =\arg
  ldr r0, [r0]
  and r0, r0, #MINORMASK
.endm

# #define MKDEV(ma,mi) (((ma) &lt;&lt; MINORBITS) | (mi))
.macro MKDEV ma:req, mi:req
  mov r1, #mi
  mov r0, #ma
  lsl r0, #MINORBITS
  or r0, r0, r1
.endm

# emulate push instruction
# howto: _push param1, param2, param3
#  param1: where (push to register or stack)
#   _r0, _r1, _r2, _r3: push to register
#   _sp: push to stack
#  param2: param3's data type
#   _sz: string
#   _dw: word
#   _db: byte
#   _va: variable address
#   _vv: variable value
#   _rn: register value
#  param3: data
.macro _push where:req, type:req, arg:req
  .if \type == _sz
    b l_push_sz\@
    _tmp\@: .asciz "\arg"; .align
    l_push_sz\@:
      ldr r0, =_tmp\@
  .elseif \type == _dw
    b l_push_dw\@
    _tmp\@: .word \arg; .align
    l_push_dw\@:
      ldr r0, =_tmp\@
      ldr r0, [r0]
  .elseif \type == _db
    b l_push_db\@
    _tmp\@: .byte \arg; .align
    l_push_db\@:
      ldr r0, =_tmp\@
      ldr r0, [r0]
  .elseif \type == _va
    ldr r0, =\arg
  .elseif \type == _vv
    ldr r0, =\arg
    ldr r0, [r0]
  .elseif \type == _rn
    mov r0, \arg
  .else
    .exitm
  .endif
  .if \where == _r0
  .elseif \where == _r1
    mov r1, r0
  .elseif \where == _r2
    mov r2, r0
  .elseif \where == _r3
    mov r3, r0
  .elseif \where == _sp
    push {r0}
  .else
    .exitm
  .endif
.endm

# emulate call instruction
# it includes import(.extern) declaration
.macro _call fun:req
  .extern \fun
  bl \fun
.endm

# set the item of file operation structure
# howto: _set_fops_struct param1, param2, param3
#  param1: pointer to fops strcuture
#  param2: which item to set
#  param3: data
# example: _set_fops_struct fops, _fops_open, open_function
# (in cpp) =&gt; struct file_operations fops = {.open = open_function};
.macro _set_fops_struct base:req, index:req, addr:req
  ldr r2, =\addr
  ldr r0, =\base
  mov r1, #\index
  add r0, r0, r1, lsl #2
  str r2, [r0]
.endm

# set the item of cdev structure
# howto: _set_cdev_struct param1, param2, param3
#  param1: pointer to cdev strcuture
#  param2: which item to set
#  param3: data
# example: _set_cdev_struct kdev, _cdev_ops, ops
# (in cpp) =&gt; struct cdev kdev = {.ops = &amp;ops};
.macro _set_cdev_struct base:req, index:req, addr:req
  ldr r2, =\addr
  ldr r0, =\base
  ldr r0, [r0]
  mov r1, #\index
  add r0, r0, r1, lsl #2
  str r2, [r0]
.endm

# kernel information
.section .modinfo;
__module_kernel_version: .asciz "kernel_version=2.6.28";    .align 
__module_license:        .asciz "license=GPL";              .align 
__module_author:         .asciz "author=Steward";           .align 
__module_description:    .asciz "description=Linux Driver"; .align

# export functions
.section .text
.global init_module
.global cleanup_module
</pre>

<p>
新增Makefile編譯檔案(檔案名稱的大小寫是固定的)
</p>

<pre>
$ vim Makefile
obj-m += ldd.o
ldd-objs:= main.o
all:
    as -o main.o main.S
    make -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules
clean:
    make -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean
</pre>

<p>
make指令的前面有一個Tab字元，請不要使用空白鍵代替，不然會無法編譯驅動程式
</p>

<p>
接著輸入<b>make</b>指令進行編譯就可以產生Linux驅動程式檔案(main.ko)
</p>

<pre>
$ make
as -o main.o main.S
make -C /lib/modules/2.6.28.10-power53/build M=/home/user/Data/n900/ldd/asm/char/reg-2.6 modules
make[1]: Entering directory `/usr/src/2.6.28.10-power54'
  LD [M]  /home/user/Data/n900/ldd/asm/char/reg-2.6/ldd.o
  Building modules, stage 2.
  MODPOST 1 modules
  LD [M]  /home/user/Data/n900/ldd/asm/char/reg-2.6/ldd.ko
make[1]: Leaving directory `/usr/src/2.6.28.10-power54'
</pre>

<p>
編譯完成後(Linux Kernel 2.6的驅動程式附檔名為<b>*.ko</b>, Linux Kernel 2.4的驅動程式附檔名為<b>*.o</b>)
</p>

<p>
載入驅動程式(insmod)和查看Debug訊息(dmesg)
</p>

<pre>
$ sudo insmod ldd.ko
$ dmesg
[31533.556335] lddia, load it!
[31533.556365] lddia, kernel 2.6
[31533.556396] lddia, major number is 246
</pre>

<p>
裝置資訊
</p>

<pre>
$ cat /proc/devices
Character devices:
 ...
246 lddia
 ...
</pre>

<p>
建立Symbolic
</p>

<pre>
$ sudo mknod /dev/lddia c 246 0
$ sudo chmod 0777 /dev/lddia
</pre>

<p>
測試
</p>

<pre>
$ sudo echo "test" > /dev/lddia
$ dmesg
[31569.904266] lddia, open
[31569.904479] lddia, write buffer: test
[31569.904510] lddia, close
</pre>

<p>
刪除Symbolic
</p>

<pre>
$ sudo rm /dev/lddia
</pre>

<p>
卸載驅動程式(rmmod)和查看Debug訊息(dmesg)
</p>

<pre>
$ sudo rmmod ldd
$ dmesg
[31580.370819] lddia, unload it!
</pre>

<p>
<br><a href="../../../../driver.htm">返回上一頁</a>
</p>

</div>
</div>
</div>
</body>
</html>
