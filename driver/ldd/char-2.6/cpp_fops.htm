<!--
 ____________________________________________________________
|                                                            |
|    DESIGN + Pat Heard { http://fullahead.org }             |
|      DATE + 2006.09.12                                     |
| COPYRIGHT + Free use if this notice is kept in place.      |
|____________________________________________________________|

-->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>司徒的教學網站</title>
  <meta http-lowast="content-type" content="application/xhtml+xml; charset=UTF-8" />
  <meta name="author" content="fullahead.org" />
  <meta name="keywords" content="XHTML, CSS, template, FullAhead" />
  <meta name="description" content="A valid, XHTML 1.0 template" />
  <meta name="robots" content="index, follow, noarchive" />
  <meta name="googlebot" content="noarchive" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes, minimum-scale=0.1, maximum-scale=100.0"/>

  <link rel="shortcut icon" href="../../../website.ico">
  <link rel="stylesheet" type="text/css" href="../../../styles/shCore.css" />
  <link rel="stylesheet" type="text/css" href="../../../styles/shThemeDefault.css" />
  <link rel="stylesheet" type="text/css" href="../../../css/html.css" media="screen, projection, tv " />
  <link rel="stylesheet" type="text/css" href="../../../css/layout.css" media="screen, projection, tv" />
  <link rel="stylesheet" type="text/css" href="../../../css/print.css" media="print" />
  
  <script type="text/javascript" src="../../../scripts/shCore.js"></script>
  <script type="text/javascript" src="../../../scripts/shBrushCpp.js"></script>

  <!-- Conditional comment to apply opacity fix for IE #content background.
       Invalid CSS, but can be removed without harming design -->
  <!--[if gt IE 5]>
  <link rel="stylesheet" type="text/css" href="css/ie.css" media="screen, projection, tv " />
  <![endif]-->
</head>

<body>
<script type="text/javascript">SyntaxHighlighter.all();</script>
<div id="wrapper">
<div id="content">
<script type="text/javascript" src="../../../header.js"></script>
<div id="page">
<h3>Linux Device Driver >> C/C++ >> Advanced >> Char (Kernel 2.6)</h3>
<p><b>File Operation</b></p>
<hr size="1">
<p>
[Github] <a href="https://github.com/steward-fu/gh_driver.git">https://github.com/steward-fu/gh_driver.git</a>
</p>

<p>
Kernel程式
</p>

<pre>
$ vim main.c
</pre>

<pre class="brush:cpp">
//============================================================================
// Linux Device Driver in C/CPP
// This file can be distributed or modified under GPL license
// http://steward-fu.github.io/website/../../../driver.htm
// Steward Fu 2016/02/15
//============================================================================
#include &lt;linux/fs.h&gt;
#include &lt;linux/cdev.h&gt;
#include &lt;linux/init.h&gt;
#include &lt;linux/device.h&gt;
#include &lt;linux/module.h&gt;
 
MODULE_AUTHOR("Steward");
MODULE_DESCRIPTION("Linux Driver");
MODULE_LICENSE("GPL");

#define DRIVER_NAME "lddic"

int major=-1;
struct cdev *kdev;
dev_t dev_no;

//============================================================================
// description:
//  open() function for file operation
//
// parameter:
//  inode
//   inode information
//  filep
//   file infomation
//
// return:
//  errno
//============================================================================
int lddic_open(struct inode* inode, struct file* filep)
{
 printk("lddic, open\n");
 return 0;
}

//============================================================================
// description:
//  close() function for file operation
//
// parameter:
//  inode
//   inode information
//  filep
//   file infomation
//
// return:
//  errno
//============================================================================
int lddic_close(struct inode* inode, struct file* filep)
{
 printk("lddic, close\n");
 return 0;
}

//============================================================================
// description:
//  read() function for file operation
//
// parameter:
//  filep
//   file infomation
//  buff
//   buffer back to user
//  count
//   buffer length
//  offp
//   offset information
//
// return:
//  errno
//============================================================================
int lddic_read(struct file* filep, char __user *buff, size_t count, loff_t *offp)
{
 printk("lddic, read\n");
 return 0;
}

//============================================================================
// description:
//  write() function for file operation
//
// parameter:
//  filep
//   file infomation
//  buff
//   buffer to kernel
//  count
//   buffer length
//  offp
//   offset information
//
// return:
//  errno
//============================================================================
int lddic_write(struct file* filep, const char __user *buff, size_t count, loff_t *offp)
{
 char buffer[255]={0};

 memcpy(buffer, buff, count);
 printk("lddic, write buffer: %s", buffer);
 return count;
}

// file operation for our device driver
struct file_operations lddic_ops = {
 .owner = THIS_MODULE,
 .open = lddic_open,
 .release = lddic_close,
 .read = lddic_read,
 .write = lddic_write
};
 
//============================================================================
// description:
//  load driver
//
// parameter:
//  none
//
// return:
//  errno
//============================================================================
static int __init lddic_init(void)
{
 printk("lddic, load it!\n");
 //major = register_chrdev(0, DRIVER_NAME, &amp;lddic_ops);
 alloc_chrdev_region(&amp;dev_no, 0, 1, DRIVER_NAME);
 kdev = cdev_alloc();
 kdev-&gt;ops = &amp;lddic_ops;
 kdev-&gt;owner = THIS_MODULE;
 cdev_add(kdev, dev_no, 1);
 major = MAJOR(dev_no);
 printk("lddic, major number is %d\n", major);
 return 0;
}
 
//============================================================================
// description:
//  unload driver
//
// parameter:
//  none
//
// return:
//  nothing
//============================================================================
static void __exit lddic_exit(void)
{
 //unregister_chrdev(major, DRIVER_NAME);
 cdev_del(kdev);
 unregister_chrdev_region(dev_no, 1);
 printk("lddic, unload it!\n");
}

// redefine load/unload function
module_init(lddic_init);
module_exit(lddic_exit);
</pre>

<p>
新增Makefile編譯檔案(檔案名稱的大小寫是固定的)
</p>

<pre>
$ vim Makefile
obj-m += main.o
all:
    make -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules
clean:
    make -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean
</pre>

<p>
make指令的前面有一個Tab字元，請不要使用空白鍵代替，不然會無法編譯驅動程式
</p>

<p>
接著輸入<b>make</b>指令進行編譯就可以產生Linux驅動程式檔案(main.ko)
</p>

<pre>
$ make
make -C /lib/modules/2.6.28.10-power53/build M=/home/user/Data/n900/ldd/cpp/char/reg-2.6 modules
make[1]: Entering directory `/usr/src/2.6.28.10-power54'
  CC [M]  /home/user/Data/n900/ldd/cpp/char/reg-2.6/main.o
  Building modules, stage 2.
  MODPOST 1 modules
  CC      /home/user/Data/n900/ldd/cpp/char/reg-2.6/main.mod.o
  LD [M]  /home/user/Data/n900/ldd/cpp/char/reg-2.6/main.ko
make[1]: Leaving directory `/usr/src/2.6.28.10-power54'
</pre>

<p>
編譯完成後(Linux Kernel 2.6的驅動程式附檔名為<b>*.ko</b>, Linux Kernel 2.4的驅動程式附檔名為<b>*.o</b>)
</p>

<p>
載入驅動程式(insmod)和查看Debug訊息(dmesg)
</p>

<pre>
$ sudo insmod main.ko
$ dmesg
[109884.417083] lddic, load it!
[109884.417114] lddic, major number is 246
</pre>

<p>
裝置資訊
</p>

<pre>
$ cat /proc/devices
Character devices:
 ...
246 lddic
 ...
</pre>

<p>
建立Symbolic
</p>

<pre>
$ sudo mknod /dev/lddic c 246 0
$ sudo chmod 0777 /dev/lddic
</pre>

<p>
測試
</p>

<pre>
$ sudo echo "ok" > /dev/lddic
$ dmesg
[109933.685821] lddic, open
[109933.887908] lddic, write buffer: ok
[109933.887939] lddic, close
</pre>

<p>
刪除Symbolic
</p>

<pre>
$ sudo rm /dev/lddic
</pre>

<p>
卸載驅動程式(rmmod)和查看Debug訊息(dmesg)
</p>

<pre>
$ sudo rmmod main
$ dmesg
[109947.930450] lddic, unload it!
</pre>

<p>
<br><a href="../../../driver.htm">返回上一頁</a>
</p>

</div>
</div>
</div>
</body>
</html>
