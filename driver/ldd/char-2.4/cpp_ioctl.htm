<!--
 ____________________________________________________________
|                                                            |
|    DESIGN + Pat Heard { http://fullahead.org }             |
|      DATE + 2006.09.12                                     |
| COPYRIGHT + Free use if this notice is kept in place.      |
|____________________________________________________________|

-->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>司徒的教學網站</title>
  <meta http-lowast="content-type" content="application/xhtml+xml; charset=UTF-8" />
  <meta name="author" content="fullahead.org" />
  <meta name="keywords" content="XHTML, CSS, template, FullAhead" />
  <meta name="description" content="A valid, XHTML 1.0 template" />
  <meta name="robots" content="index, follow, noarchive" />
  <meta name="googlebot" content="noarchive" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes, minimum-scale=0.1, maximum-scale=100.0"/>

  <link rel="shortcut icon" href="../../../website.ico">
  <link rel="stylesheet" type="text/css" href="../../../styles/shCore.css" />
  <link rel="stylesheet" type="text/css" href="../../../styles/shThemeDefault.css" />
  <link rel="stylesheet" type="text/css" href="../../../css/html.css" media="screen, projection, tv " />
  <link rel="stylesheet" type="text/css" href="../../../css/layout.css" media="screen, projection, tv" />
  <link rel="stylesheet" type="text/css" href="../../../css/print.css" media="print" />
  
  <script type="text/javascript" src="../../../scripts/shCore.js"></script>
  <script type="text/javascript" src="../../../scripts/shBrushCpp.js"></script>

  <!-- Conditional comment to apply opacity fix for IE #content background.
       Invalid CSS, but can be removed without harming design -->
  <!--[if gt IE 5]>
  <link rel="stylesheet" type="text/css" href="css/ie.css" media="screen, projection, tv " />
  <![endif]-->
</head>

<body>
<script type="text/javascript">SyntaxHighlighter.all();</script>
<div id="wrapper">
<div id="content">
<script type="text/javascript" src="../../../header.js"></script>
<div id="page">
<h3>Linux Device Driver >> C/C++ >> Advanced >> Char (Kernel 2.4)</h3>
<p><b>IOCTL</b></p>
<hr size="1">
<p>
[Github] <a href="https://github.com/steward-fu/gh_driver.git">https://github.com/steward-fu/gh_driver.git</a>
</p>

<p>
Kernel程式
</p>
<pre>$ vim main.c</pre>
<pre class="brush: cpp">
//============================================================================
// Linux Device Driver in C/CPP
// This file can be distributed or modified under GPL license
// http://steward-fu.github.io/website/../../../driver.htm
// Steward Fu 2016/02/17
//============================================================================
#include &lt;linux/fs.h&gt;
#include &lt;linux/cdev.h&gt;
#include &lt;linux/init.h&gt;
#include &lt;linux/device.h&gt;
#include &lt;linux/module.h&gt;
#include &lt;linux/kobject.h&gt;
 
MODULE_AUTHOR("Steward");
MODULE_DESCRIPTION("Linux Driver");
MODULE_LICENSE("GPL");

#define DEV_NAME       "lddic"
#define _APP_BASE      0x00
#define _APP_IOCTL_CMD _IO(_APP_BASE, 0)
#define _APP_IOCTL_SET _IOR(_APP_BASE, 1, int)
#define _APP_IOCTL_GET _IOW(_APP_BASE, 2, int)
#define _APP_IOCTL_BID _IOWR(_APP_BASE, 3, int)

struct cdev *kdev;
dev_t dev_no;

//============================================================================
// description:
//  file operation for open() function
//
// parameter:
//  inode
//   inode information
//  filp
//   file infomation
//
// return:
//  errno
//============================================================================
int lddic_open(struct inode* inode, struct file* filp)
{
  printk("lddic, open\n");
  return 0;
}

//============================================================================
// description:
//  file operation for close() function
//
// parameter:
//  inode
//   inode information
//  filp
//   file infomation
//
// return:
//  errno
//============================================================================
int lddic_close(struct inode* inode, struct file* filp)
{
  printk("lddic, close\n");
  return 0;
}

//============================================================================
// description:
//  file operation for ioctl() function
//
// parameter:
//  inode
//   inode information
//  filp
//   file infomation
//  buff
//   buffer back to user
//  cmd
//   ioctl command
//  arg
//   ioctl argument
//
// return:
//  errno
//============================================================================
int lddic_ioctl(struct inode *inode, struct file* filp, unsigned int cmd, unsigned long arg)
{
  switch(cmd){
  case _APP_IOCTL_CMD:
    printk("lddic, ioctl _APP_IOCTL_CMD(0x%X), arg:0x%lx\n", cmd, arg);
    break;
  case _APP_IOCTL_GET:
    printk("lddic, ioctl _APP_IOCTL_GET(0x%X), arg:0x%lx\n", cmd, arg);
    break;
  case _APP_IOCTL_SET:
    printk("lddic, ioctl _APP_IOCTL_SET(0x%X), arg:0x%lx\n", cmd, arg);
    break;
  case _APP_IOCTL_BID:
    printk("lddic, ioctl _APP_IOCTL_BID(0x%X), arg:0x%lx\n", cmd, arg);
    break;
  default:
    printk("lddic, invalid ioctl 0x%X\n", cmd);
    break;
  }
  return 0;
}

// file operation forour device driver
struct file_operations lddic_ops = {
  .owner = THIS_MODULE,
  .open = lddic_open,
  .release = lddic_close,
  .ioctl = lddic_ioctl,
};
 
//============================================================================
// description:
//  load driver
//
// parameter:
//  none
//
// return:
//  errno
//============================================================================
static int __init lddic_init(void)
{
  int major=-1;
  printk("lddic, load it!\n");
  alloc_chrdev_region(&amp;dev_no, 0, 1, DEV_NAME);
  kdev = cdev_alloc();
  kdev-&gt;ops = &lddic_ops;
  kdev-&gt;owner = THIS_MODULE;
  cdev_add(kdev, dev_no, 1);
  major = MAJOR(dev_no);
  printk("lddic, major number is %d\n", major);
  return 0;
}
 
//============================================================================
// description:
//  unload driver
//
// parameter:
//  none
//
// return:
//  nothing
//============================================================================
static void __exit lddic_exit(void)
{
  cdev_del(kdev);
  unregister_chrdev_region(dev_no, 1);
  printk("lddic, unload it!\n");
}

// define load and unload function
module_init(lddic_init);
module_exit(lddic_exit);
</pre><br>

<p>Application程式</p>
<pre>
$ vim app.c
</pre>
<pre class="brush: cpp">
//============================================================================
// Linux Application in C/CPP
// This file can be distributed or modified under GPL license
// http://steward-fu.github.io/website/../../../driver.htm
// Steward Fu 2016/02/17
//============================================================================
#include &lt;fcntl.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;linux/ioctl.h&gt;

#define _APP_BASE      0x00
#define _APP_IOCTL_CMD _IO(_APP_BASE, 0)
#define _APP_IOCTL_SET _IOR(_APP_BASE, 1, int)
#define _APP_IOCTL_GET _IOW(_APP_BASE, 2, int)
#define _APP_IOCTL_BID _IOWR(_APP_BASE, 3, int)

//============================================================================
// description:
//  main entry point
//
// parameter:
// argc
//  arg number
// argv
//  arg data
//
// return:
//  errno
//============================================================================
int main(int argc, char** argv)
{
  int fd=-1;

  printf("app, run it!\n");
  fd = open("/dev/lddic", O_RDWR);
  if(fd == -1){
    printf("app, failed to open lddic!\n");
    return -1;
  }
  // command only
  printf("app, ioctl _APP_IOCTL_CMD(0x%X): 0\n", _APP_IOCTL_CMD);
  ioctl(fd, _APP_IOCTL_CMD, 0);

  // read from kernel
  printf("app, ioctl _APP_IOCTL_GET(0x%X): 1\n", _APP_IOCTL_GET);
  ioctl(fd, _APP_IOCTL_GET, 1);

  // write to kernel
  printf("app, ioctl _APP_IOCTL_SET(0x%X): 2\n", _APP_IOCTL_SET);
  ioctl(fd, _APP_IOCTL_SET, 2);

  // read and write with kernel
  printf("app, ioctl _APP_IOCTL_BID(0x%X): 3\n", _APP_IOCTL_BID);
  ioctl(fd, _APP_IOCTL_BID, 3);

  close(fd);
  printf("app, exit!\n");
  return 0;
}
</pre><br>

<p>
新增Makefile編譯檔案(檔案名稱的大小寫是固定的)
</p>

<pre>
$ vim Makefile
obj-m += main.o
all:
    gcc -o app app.c
    make -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules
clean:
    make -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean
</pre>

<p>
make指令的前面有一個Tab字元，請不要使用空白鍵代替，不然會無法編譯驅動程式<br><br>


接著輸入<b>make</b>指令進行編譯就可以產生Linux驅動程式檔案(main.ko)</p>
<pre>
$ make
gcc -o app app.c
make -C /lib/modules/2.6.28.10-power53/build M=/home/user/Data/n900/ldd/cpp/char/ioctl modules
make[1]: Entering directory `/usr/src/2.6.28.10-power54'
  CC [M]  /home/user/Data/n900/ldd/cpp/char/ioctl/main.o
  Building modules, stage 2.
  MODPOST 1 modules
  LD [M]  /home/user/Data/n900/ldd/cpp/char/ioctl/main.ko
make[1]: Leaving directory `/usr/src/2.6.28.10-power54'
</pre>

<p>
編譯完成後(Linux Kernel 2.6的驅動程式附檔名為<b>*.ko</b>, Linux Kernel 2.4的驅動程式附檔名為<b>*.o</b>)<br><br>


載入驅動程式(insmod)和查看Debug訊息(dmesg)
</p>
<pre>
$ sudo insmod main.ko
$ dmesg
[108368.336547] lddic, load it!
[108368.336608] lddic, major number is 246
</pre><br>

<p>
裝置資訊
</p>
<pre>
$ cat /proc/devices
Character devices:
 ...
246 lddic
 ...
</pre><br>

<p>
建立Symbolic
</p>
<pre>
$ sudo mknod /dev/lddic c 246 0
$ sudo chmod 0777 /dev/lddic
</pre><br>

<p>
測試IOCTL
</p>
<pre>
$ ./app
app, run it!
app, ioctl _APP_IOCTL_CMD(0x0): 0
app, ioctl _APP_IOCTL_GET(0x40040002): 1
app, ioctl _APP_IOCTL_SET(0x80040001): 2
app, ioctl _APP_IOCTL_BID(0xC0040003): 3
app, exit!

$ dmesg
[19924.206329] lddic, open
[19924.206909] lddic, ioctl _APP_IOCTL_CMD(0x0), arg:0x0
[19924.207214] lddic, ioctl _APP_IOCTL_GET(0x40040002), arg:0x1
[19924.207519] lddic, ioctl _APP_IOCTL_SET(0x80040001), arg:0x2
[19924.207763] lddic, ioctl _APP_IOCTL_BID(0xC0040003), arg:0x3
[19924.207794] lddic, close
</pre><br>

<p>
刪除Symbolic
</p>
<pre>
$ sudo rm /dev/lddic
</pre><br>

<p>
卸載驅動程式(rmmod)和查看Debug訊息(dmesg)
</p>
<pre>
$ sudo rmmod main
$ dmesg
[20243.124328] lddic, unload it!
</pre><br>

<p>
<br><a href="../../../driver.htm">返回上一頁</a>
</p>

</div>
</div>
</div>
</body>
</html>
