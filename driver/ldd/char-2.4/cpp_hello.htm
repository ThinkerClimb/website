<!--
 ____________________________________________________________
|                                                            |
|    DESIGN + Pat Heard { http://fullahead.org }             |
|      DATE + 2006.09.12                                     |
| COPYRIGHT + Free use if this notice is kept in place.      |
|____________________________________________________________|

-->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>司徒的教學網站</title>
  <meta http-lowast="content-type" content="application/xhtml+xml; charset=UTF-8" />
  <meta name="author" content="fullahead.org" />
  <meta name="keywords" content="XHTML, CSS, template, FullAhead" />
  <meta name="description" content="A valid, XHTML 1.0 template" />
  <meta name="robots" content="index, follow, noarchive" />
  <meta name="googlebot" content="noarchive" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes, minimum-scale=0.1, maximum-scale=100.0"/>

  <link rel="shortcut icon" href="../../../website.ico">
  <link rel="stylesheet" type="text/css" href="../../../styles/shCore.css" />
  <link rel="stylesheet" type="text/css" href="../../../styles/shThemeDefault.css" />
  <link rel="stylesheet" type="text/css" href="../../../css/html.css" media="screen, projection, tv " />
  <link rel="stylesheet" type="text/css" href="../../../css/layout.css" media="screen, projection, tv" />
  <link rel="stylesheet" type="text/css" href="../../../css/print.css" media="print" />
  
  <script type="text/javascript" src="../../../scripts/shCore.js"></script>
  <script type="text/javascript" src="../../../scripts/shBrushCpp.js"></script>

  <!-- Conditional comment to apply opacity fix for IE #content background.
       Invalid CSS, but can be removed without harming design -->
  <!--[if gt IE 5]>
  <link rel="stylesheet" type="text/css" href="css/ie.css" media="screen, projection, tv " />
  <![endif]-->
</head>

<body>
<script type="text/javascript">SyntaxHighlighter.all();</script>
<div id="wrapper">
<div id="content">
<script type="text/javascript" src="../../../header.js"></script>
<div id="page">
<h3>Linux Device Driver >> C/C++ >> Advanced >> Char (Kernel 2.4)</h3>
<p><b>Hello, world!</b></p>
<hr size="1">
<p>
[Github] <a href="https://github.com/steward-fu/gh_driver.git">https://github.com/steward-fu/gh_driver.git</a>
</p>

<p>
相較於Windows驅動程式的DriverEntry()載入點，Linux提供更彈性的設定方式，使用者可以經由module_init()和module_exit()指定，加上在Linux系統上安裝驅動程式變得相當簡單，使用者可以透過insmod、rmmod指令，即可Load、Unload驅動程式，而且Linux系統不像Windows系統那麼容易Crash，因此，開發Linux驅動程式變成是一種樂趣，而不像Windows那樣恐怖，不過<b>Hello, world!</b>依舊是使用者跨出的第一步，因此，司徒將在下面介紹如何寫出一個簡單的Linux Hello, world!驅動程式。
</p>

<p>
為了避免編譯失敗，請先安裝如下套件(於Ubuntu系統)：
</p>

<pre>
$ sudo apt-get install build-essential linux-headers-$(uname -r)
</pre>

<p>
接著開始寫主程式
</p>

<pre>
$ vim main.c
</pre>

<pre class="brush:cpp">
//============================================================================
// Linux Device Driver in C/CPP
// This file can be distributed or modified under GPL license
// http://steward-fu.github.io/website/../../../driver.htm
// Steward Fu 2016/02/16
//============================================================================
#include &lt;linux/init.h&gt;
#include &lt;linux/device.h&gt;
#include &lt;linux/module.h&gt;

MODULE_AUTHOR("Steward");
MODULE_DESCRIPTION("Linux Driver");
MODULE_LICENSE("GPL");

//============================================================================
// description:
//  load driver
//
// parameter:
//  none
//
// return:
//  errno
//============================================================================
static int __init main_init(void)
{
 printk("main, hello, world!\n");
 return 0;
}

//============================================================================
// description:
//  unload driver
//
// parameter:
//  none
//
// return:
//  nothing
//============================================================================
static void __exit main_exit(void)
{
 printk("main, unload it!\n");
}

module_init(main_init);
module_exit(main_exit);
</pre>

<p>
首先程式引入標頭檔，接著宣告使用的License，在Linux Kernel 2.6以上的版本必須宣告使用的License才可以讓驅動程式掛載成功，接著就是使用巨集(module_init、module_exit)做驅動程式init、exit的宣告，這樣系統才會知道驅動程式的載入點是哪一個副程式，那是否可以不要使用這種巨集宣告方式呢？答案是可以的，不過這樣的話，必須額外附加很多副程式的參數，對於可攜式程式來說，會有很大的問題，因為每個平台的參數不一定一樣，因此建議使用者還是使用巨集方式宣告比較好，而__init、__exit則是額外的副程式參數，說明該副程式編譯後是位於哪一個Section，__init代表初始化後，就可以丟棄的程式碼，對於嵌入式平台的記憶體用途比較有幫助，最後就是使用printk輸出<b>Hello, world!</b>字串。
</p>

<p>
新增Makefile編譯檔案(檔案名稱的大小寫是固定的)
</p>

<pre>
$ vim Makefile
obj-m += main.o
all:
    make -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules
clean:
    make -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean
</pre>

<p>
make指令的前面有一個Tab字元，請不要使用空白鍵代替，不然會無法編譯驅動程式
</p>

<p>
接著輸入<b>make</b>指令進行編譯就可以產生Linux驅動程式檔案(main.ko)
</p>

<pre>
$ make
make -C /lib/modules/2.6.38-8-generic/build M=/tmp modules
make[1]: Entering directory `/usr/src/linux-headers-2.6.38-8-generic'
  CC [M]  /tmp/main.o
  Building modules, stage 2.
  MODPOST 1 modules
  CC      /tmp/main.mod.o
  LD [M]  /tmp/main.ko
make[1]: Leaving directory `/usr/src/linux-headers-2.6.38-8-generic
</pre>

<p>
編譯完成後(Linux Kernel 2.6的驅動程式附檔名為<b>*.ko</b>, Linux Kernel 2.4的驅動程式附檔名為<b>*.o</b>)。
</p>

<p>
載入驅動程式(insmod)和查看Debug訊息(dmesg)
</p>

<pre>
$ sudo insmod main.ko
$ dmesg
[ 4673.221191] main, hello, world!
</pre>

<p>
卸載驅動程式(rmmod)和查看Debug訊息(dmesg)
</p>

<pre>
$ sudo rmmod main
$ dmesg
[ 4745.106872] main, unload it!
</pre>

<p>
<br><a href="../../../driver.htm">返回上一頁</a>
</p>

</div>
</div>
</div>
</body>
</html>
