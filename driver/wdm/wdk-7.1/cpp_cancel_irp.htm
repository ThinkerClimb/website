<!--
 ____________________________________________________________
|                                                            |
|    DESIGN + Pat Heard { http://fullahead.org }             |
|      DATE + 2006.09.12                                     |
| COPYRIGHT + Free use if this notice is kept in place.      |
|____________________________________________________________|

-->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>司徒的教學網站</title>
  <meta http-lowast="content-type" content="application/xhtml+xml; charset=UTF-8" />
  <meta name="author" content="fullahead.org" />
  <meta name="keywords" content="XHTML, CSS, template, FullAhead" />
  <meta name="description" content="A valid, XHTML 1.0 template" />
  <meta name="robots" content="index, follow, noarchive" />
  <meta name="googlebot" content="noarchive" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes, minimum-scale=0.1, maximum-scale=100.0"/>

  <link rel="shortcut icon" href="../../../website.ico">
  <link rel="stylesheet" type="text/css" href="../../../styles/shCore.css" />
  <link rel="stylesheet" type="text/css" href="../../../styles/shThemeDefault.css" />
  <link rel="stylesheet" type="text/css" href="../../../css/html.css" media="screen, projection, tv " />
  <link rel="stylesheet" type="text/css" href="../../../css/layout.css" media="screen, projection, tv" />
  <link rel="stylesheet" type="text/css" href="../../../css/print.css" media="print" />
  
  <script type="text/javascript" src="../../../scripts/shCore.js"></script>
  <script type="text/javascript" src="../../../scripts/shBrushCpp.js"></script>

  <!-- Conditional comment to apply opacity fix for IE #content background.
       Invalid CSS, but can be removed without harming design -->
  <!--[if gt IE 5]>
  <link rel="stylesheet" type="text/css" href="css/ie.css" media="screen, projection, tv " />
  <![endif]-->
</head>

<body>
<script type="text/javascript">SyntaxHighlighter.all();</script>
<div id="wrapper">
<div id="content">
<script type="text/javascript" src="../../../header.js"></script>
<div id="page">
<h3>Windows Driver Model >> WDK 7.1 >> C/C++ >> Advanced</h3>
<p><b>Cancel IRP</b></p>
<hr size="1">
<p>
[Github] <a href="https://github.com/steward-fu/gh_driver.git">https://github.com/steward-fu/gh_driver.git</a>
</p>

<p>
main.c
</p>

<pre class="brush:cpp">
/*========================================================================================================
  Basically, all of files downloaded from my website can be modified or redistributed for any purpose.
  It is my honor to share my interesting to everybody.
  If you find any illeage content out from my website, please contact me firstly.
  I will remove all of the illeage parts.
  Thanks :)
   
  Steward Fu
  steward.fu@gmail.com
  https://steward-fu.github.io/website/index.htm
========================================================================================================*/
#include &lt;wdm.h&gt;

#define IOCTL_QUEUE_IT    CTL_CODE(FILE_DEVICE_UNKNOWN, 0x800, METHOD_NEITHER, FILE_ANY_ACCESS)
#define IOCTL_PROCESS_IT  CTL_CODE(FILE_DEVICE_UNKNOWN, 0x801, METHOD_NEITHER, FILE_ANY_ACCESS)

#define DEV_NAME  L"\\Device\\firstCancel"
#define SYM_NAME  L"\\DosDevices\\firstCancel"
#define MSG       "WDM driver tutorial for Cancel"

PDEVICE_OBJECT gNextDevice=NULL;
LIST_ENTRY stQueue={0};
KDPC stTimeDPC={0};
KTIMER stTime={0};

//*** timer routine
VOID OnTimer(struct _KDPC *Dpc, PVOID DeferredContext, PVOID SystemArgument1, PVOID SystemArgument2)
{
  PIRP pIrp;
  PLIST_ENTRY plist;
  if(IsListEmpty(&amp;stQueue) == TRUE){
    KeCancelTimer(&amp;stTime);
    DbgPrint("OnTimer: Process successfully");
  }
  else{
    plist = RemoveHeadList(&amp;stQueue);
    pIrp = CONTAINING_RECORD(plist, IRP, Tail.Overlay.ListEntry);
    if(pIrp-&gt;Cancel != TRUE){
      pIrp-&gt;IoStatus.Status = STATUS_SUCCESS;
      pIrp-&gt;IoStatus.Information = 0;
      IoCompleteRequest(pIrp, IO_NO_INCREMENT);
      DbgPrint("OnTimer: Complete Irp");
    }
    else{
      pIrp-&gt;CancelRoutine = NULL;
      pIrp-&gt;IoStatus.Status = STATUS_CANCELLED;
      pIrp-&gt;IoStatus.Information = 0;
      IoCompleteRequest(pIrp, IO_NO_INCREMENT);
      DbgPrint("OnTimer: Cancel Irp");
    }
  }
}

//*** system will vist this routine when it needs to add new device
NTSTATUS AddDevice(PDRIVER_OBJECT pOurDriver, PDEVICE_OBJECT pPhyDevice)
{
  PDEVICE_OBJECT pOurDevice=NULL;
  UNICODE_STRING usDeviceName;
  UNICODE_STRING usSymboName;

  DbgPrint(MSG);
  RtlInitUnicodeString(&amp;usDeviceName, DEV_NAME);
  IoCreateDevice(pOurDriver, 0, &amp;usDeviceName, FILE_DEVICE_UNKNOWN, 0, FALSE, &amp;pOurDevice);
  RtlInitUnicodeString(&amp;usSymboName, SYM_NAME);
  IoCreateSymbolicLink(&amp;usSymboName, &amp;usDeviceName);
  gNextDevice = IoAttachDeviceToDeviceStack(pOurDevice, pPhyDevice);
  pOurDevice-&gt;Flags&amp;= ~DO_DEVICE_INITIALIZING;
  pOurDevice-&gt;Flags|= DO_BUFFERED_IO;
  
  InitializeListHead(&amp;stQueue);
  KeInitializeTimer(&amp;stTime);
  KeInitializeDpc(&amp;stTimeDPC, OnTimer, pOurDevice);
  return STATUS_SUCCESS;
}
  
//*** it is time to unload our driver
void Unload(PDRIVER_OBJECT pOurDriver)
{
  pOurDriver = pOurDriver;
}

//*** process pnp irp
NTSTATUS IrpPnp(PDEVICE_OBJECT pOurDevice, PIRP pIrp)
{
  PIO_STACK_LOCATION psk = IoGetCurrentIrpStackLocation(pIrp);
  UNICODE_STRING usSymboName;

  if(psk-&gt;MinorFunction == IRP_MN_REMOVE_DEVICE){
    RtlInitUnicodeString(&amp;usSymboName, SYM_NAME);
    IoDeleteSymbolicLink(&amp;usSymboName);
    IoDetachDevice(gNextDevice);
    IoDeleteDevice(pOurDevice);
  }
  IoSkipCurrentIrpStackLocation(pIrp);
  return IoCallDriver(gNextDevice, pIrp);
}

//*** process ioctl irp
NTSTATUS IrpIOCTL(PDEVICE_OBJECT pOurDevice, PIRP pIrp)
{
  LARGE_INTEGER stTimePeriod;
  PIO_STACK_LOCATION psk = IoGetCurrentIrpStackLocation(pIrp);

  switch(psk-&gt;Parameters.DeviceIoControl.IoControlCode){
  case IOCTL_QUEUE_IT:
    DbgPrint("IrpIOCTL, IOCTL_QUEUE_IT\n");
    InsertHeadList(&amp;stQueue, &amp;pIrp-&gt;Tail.Overlay.ListEntry);
    IoMarkIrpPending(pIrp);
    return STATUS_PENDING;
  case IOCTL_PROCESS_IT:
    DbgPrint("IrpIOCTL, IOCTL_PROCESS_IT\n");
    stTimePeriod.HighPart|= -1;
    stTimePeriod.LowPart = -1000000;
    KeSetTimerEx(&amp;stTime, stTimePeriod, 1000, &amp;stTimeDPC);
    break;
  }
  pIrp-&gt;IoStatus.Information = 0;
  pIrp-&gt;IoStatus.Status = STATUS_SUCCESS;
  IoCompleteRequest(pIrp, IO_NO_INCREMENT);
  return STATUS_SUCCESS;
}

//*** process file irp
NTSTATUS IrpFile(PDEVICE_OBJECT pOurDevice, PIRP pIrp)
{
  PIO_STACK_LOCATION psk = IoGetCurrentIrpStackLocation(pIrp);

  switch(psk-&gt;MajorFunction){
  case IRP_MJ_CREATE:
    DbgPrint("IrpFile, IRP_MJ_CREATE\n");
    break;
  case IRP_MJ_CLOSE:
    DbgPrint("IrpFile, IRP_MJ_CLOSE\n");
    break;
  }
  IoCompleteRequest(pIrp, IO_NO_INCREMENT);
  return STATUS_SUCCESS;
}
  
//*** driver entry
NTSTATUS DriverEntry(PDRIVER_OBJECT pOurDriver, PUNICODE_STRING pOurRegistry)
{
  pOurDriver-&gt;MajorFunction[IRP_MJ_PNP] = IrpPnp;
  pOurDriver-&gt;MajorFunction[IRP_MJ_CREATE] =
  pOurDriver-&gt;MajorFunction[IRP_MJ_CLOSE] = IrpFile;
  pOurDriver-&gt;MajorFunction[IRP_MJ_DEVICE_CONTROL] = IrpIOCTL;
  pOurDriver-&gt;DriverExtension-&gt;AddDevice = AddDevice;
  pOurDriver-&gt;DriverUnload = Unload;
  return STATUS_SUCCESS;
}
</pre>

<p>
main.inf
</p>

<pre class="brush:cpp">
;/*========================================================================================================
;//  Basically, all of files downloaded from my website can be modified or redistributed for any purpose.
;//  It is my honor to share my interesting to everybody.
;//  If you find any illeage content out from my website, please contact me firstly.
;//  I will remove all of the illeage parts.
;//  Thanks :)
;//   
;//  Steward Fu
;//  steward.fu@gmail.com
;//  https://steward-fu.github.io/website/index.htm
;//========================================================================================================*/
[Version]
Signature=$CHICAGO$
Class=Unknown
Provider=%MFGNAME%
DriverVer=01/06/2017,1.0.0.0
 
[Manufacturer]
%MFGNAME%=DeviceList
 
[DeviceList]
%DESCRIPTION%=DriverInstall, *firstCancel
 
[DestinationDirs]
DefaultDestDir=10,System32\Drivers
 
[SourceDisksFiles]
main.sys=1,,,
 
[SourceDisksNames]
1=%INSTDISK%,,,
 
[DriverInstall.NT]
CopyFiles=DriverCopyFiles
 
[DriverCopyFiles]
main.sys,,,2
 
[DriverInstall.NT.Services]
AddService=firstCancel,2,DriverService
 
[DriverService]
ServiceType=1
StartType=3
ErrorControl=1
ServiceBinary=%10%\system32\drivers\main.sys
 
[DriverInstall.NT.HW]
AddReg=DriverHwAddReg
 
[DriverHwAddReg]
HKR,,SampleInfo,,""
 
[DriverInstall]
AddReg=DriverAddReg
CopyFiles=DriverCopyFiles
 
[DriverAddReg]
HKR,,DevLoader,,*ntkern
HKR,,NTMPDriver,,main.sys
 
[DriverInstall.HW]
AddReg=DriverHwAddReg
 
[Strings]
MFGNAME="firstCancel"
INSTDISK="firstCancel Disc"
DESCRIPTION="firstCancel"
</pre>

<p>
app.cpp
</p>

<pre class="brush:cpp">
/*========================================================================================================
  Basically, all of files downloaded from my website can be modified or redistributed for any purpose.
  It is my honor to share my interesting to everybody.
  If you find any illeage content out from my website, please contact me firstly.
  I will remove all of the illeage parts.
  Thanks :)
   
  Steward Fu
  steward.fu@gmail.com
  https://steward-fu.github.io/website/index.htm
========================================================================================================*/
#include &lt;DriverSpecs.h&gt;
__user_code  
#define INITGUID
#include &lt;windows.h&gt;
#include &lt;winioctl.h&gt;
#include &lt;strsafe.h&gt;
#include &lt;setupapi.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#define WHILE(a) __pragma(warning(suppress:4127)) while(a)

#define IOCTL_QUEUE_IT    CTL_CODE(FILE_DEVICE_UNKNOWN, 0x800, METHOD_NEITHER, FILE_ANY_ACCESS)
#define IOCTL_PROCESS_IT  CTL_CODE(FILE_DEVICE_UNKNOWN, 0x801, METHOD_NEITHER, FILE_ANY_ACCESS)
 
//*** main entry point
int __cdecl main(int argc, char* argv[])
{
  int i=0;
  HANDLE hFile = NULL;
  DWORD dwRet = 0;
  OVERLAPPED ov={0};

  hFile = CreateFile("\\\\.\\firstCancel", GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, FILE_FLAG_OVERLAPPED | FILE_ATTRIBUTE_NORMAL, NULL);
  if (hFile == INVALID_HANDLE_VALUE) {
    printf("failed to open driver\n");
    return 1;
  }
  for(i=0; i&lt;3; i++){
    memset(&amp;ov, 0, sizeof(ov));
    ov.hEvent = CreateEvent(NULL, TRUE, FALSE, NULL);
    DeviceIoControl(hFile, IOCTL_QUEUE_IT, NULL, 0, NULL, 0, &amp;dwRet, &amp;ov);
  }
  DeviceIoControl(hFile, IOCTL_PROCESS_IT, NULL, 0, NULL, 0, &amp;dwRet, NULL);
  Sleep(1000);
  CancelIo(hFile);
  Sleep(10000);
  CloseHandle(hFile);
  return 0;
}
</pre>

<p>
<img src="cpp_cancel_irp/1.jpg" class="maxSize">
</p>

<p>
<img src="cpp_cancel_irp/2.jpg" class="maxSize">
</p>

<p>
<img src="cpp_cancel_irp/3.jpg" class="maxSize">
</p>

<p>
<img src="cpp_cancel_irp/4.jpg" class="maxSize">
</p>

<p>
<img src="cpp_cancel_irp/5.jpg" class="maxSize">
</p>

<p>
<img src="cpp_cancel_irp/6.jpg" class="maxSize">
</p>

<p>
<br><a href="../../../driver.htm">返回上一頁</a>
</p>

</div>
</div>
</div>
</body>
</html>
