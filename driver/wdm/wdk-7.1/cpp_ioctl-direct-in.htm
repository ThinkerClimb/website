<!--
 ____________________________________________________________
|                                                            |
|    DESIGN + Pat Heard { http://fullahead.org }             |
|      DATE + 2006.09.12                                     |
| COPYRIGHT + Free use if this notice is kept in place.      |
|____________________________________________________________|

-->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>司徒的教學網站</title>
  <meta http-lowast="content-type" content="application/xhtml+xml; charset=UTF-8" />
  <meta name="author" content="fullahead.org" />
  <meta name="keywords" content="XHTML, CSS, template, FullAhead" />
  <meta name="description" content="A valid, XHTML 1.0 template" />
  <meta name="robots" content="index, follow, noarchive" />
  <meta name="googlebot" content="noarchive" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes, minimum-scale=0.1, maximum-scale=100.0"/>

  <link rel="shortcut icon" href="../../../website.ico">
  <link rel="stylesheet" type="text/css" href="../../../styles/shCore.css" />
  <link rel="stylesheet" type="text/css" href="../../../styles/shThemeDefault.css" />
  <link rel="stylesheet" type="text/css" href="../../../css/html.css" media="screen, projection, tv " />
  <link rel="stylesheet" type="text/css" href="../../../css/layout.css" media="screen, projection, tv" />
  <link rel="stylesheet" type="text/css" href="../../../css/print.css" media="print" />
  
  <script type="text/javascript" src="../../../scripts/shCore.js"></script>
  <script type="text/javascript" src="../../../scripts/shBrushCpp.js"></script>

  <!-- Conditional comment to apply opacity fix for IE #content background.
       Invalid CSS, but can be removed without harming design -->
  <!--[if gt IE 5]>
  <link rel="stylesheet" type="text/css" href="css/ie.css" media="screen, projection, tv " />
  <![endif]-->
</head>

<body>
<script type="text/javascript">SyntaxHighlighter.all();</script>
<div id="wrapper">
<div id="content">
<script type="text/javascript" src="../../../header.js"></script>
<div id="page">
<h3>Windows Driver Model >> WDK 7.1 >> C/C++ >> Advanced</h3>
<p><b>IOCTL(METHOD_IN_DIRECT)</b></p>
<hr size="1">
<p>
[Github] <a href="https://github.com/steward-fu/gh_driver.git">https://github.com/steward-fu/gh_driver.git</a>
</p><br>

<table>
  <thead>
    <tr>
      <th></th>
      <th>Type</th>
      <th>Buffer</th>
      <th>Length</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Input</td>
      <td>METHOD_IN_DIRECT</td>
      <td>(Irp)<br>AssociatedIrp.SystemBuffer</td>
      <td>(IrpStack)<br>Parameters.DeviceIoControl.InputBufferLength</td>
    </tr>
    <tr>
      <td>Output</td>
      <td>METHOD_IN_DIRECT</td>
      <td>(MDL)<br>MmGetSystemAddressForMdlSafe<br></td>
      <td>(IrpStack)<br>Parameters.DeviceIoControl.OutputBufferLength</td>
    </tr>
  </tbody>
</table>

<p>
main.c
</p>

<pre class="brush:cpp">
/*========================================================================================================
  Basically, all of files downloaded from my website can be modified or redistributed for any purpose.
  It is my honor to share my interesting to everybody.
  If you find any illeage content out from my website, please contact me firstly.
  I will remove all of the illeage parts.
  Thanks :)
   
  Steward Fu
  steward.fu@gmail.com
  https://steward-fu.github.io/website/index.htm
========================================================================================================*/
#include &lt;wdm.h&gt;

#define IOCTL_DIRECT_SET CTL_CODE(FILE_DEVICE_UNKNOWN, 0x800, METHOD_IN_DIRECT, FILE_ANY_ACCESS)
#define IOCTL_DIRECT_GET CTL_CODE(FILE_DEVICE_UNKNOWN, 0x801, METHOD_IN_DIRECT, FILE_ANY_ACCESS)

#define DEV_NAME  L"\\Device\\firstIOCTL-Direct-In"
#define SYM_NAME  L"\\DosDevices\\firstIOCTL-Direct-In"
#define MSG       "WDM driver tutorial for IOCTL-Direct-In"

PDEVICE_OBJECT gNextDevice=NULL;
char szBuffer[255]={0};

//*** system will vist this routine when it needs to add new device
NTSTATUS AddDevice(PDRIVER_OBJECT pOurDriver, PDEVICE_OBJECT pPhyDevice)
{
  PDEVICE_OBJECT pOurDevice=NULL;
  UNICODE_STRING usDeviceName;
  UNICODE_STRING usSymboName;

  DbgPrint(MSG);
  RtlInitUnicodeString(&amp;usDeviceName, DEV_NAME);
  IoCreateDevice(pOurDriver, 0, &amp;usDeviceName, FILE_DEVICE_UNKNOWN, 0, FALSE, &amp;pOurDevice);
  RtlInitUnicodeString(&amp;usSymboName, SYM_NAME);
  IoCreateSymbolicLink(&amp;usSymboName, &amp;usDeviceName);
  gNextDevice = IoAttachDeviceToDeviceStack(pOurDevice, pPhyDevice);
  pOurDevice-&gt;Flags&amp;= ~DO_DEVICE_INITIALIZING;
  pOurDevice-&gt;Flags|= DO_BUFFERED_IO;
  return STATUS_SUCCESS;
}
  
//*** it is time to unload our driver
void Unload(PDRIVER_OBJECT pOurDriver)
{
  pOurDriver = pOurDriver;
}

//*** process pnp irp
NTSTATUS IrpPnp(PDEVICE_OBJECT pOurDevice, PIRP pIrp)
{
  PIO_STACK_LOCATION psk = IoGetCurrentIrpStackLocation(pIrp);
  UNICODE_STRING usSymboName;

  if(psk-&gt;MinorFunction == IRP_MN_REMOVE_DEVICE){
    RtlInitUnicodeString(&amp;usSymboName, SYM_NAME);
    IoDeleteSymbolicLink(&amp;usSymboName);
    IoDetachDevice(gNextDevice);
    IoDeleteDevice(pOurDevice);
  }
  IoSkipCurrentIrpStackLocation(pIrp);
  return IoCallDriver(gNextDevice, pIrp);
}

//*** process ioctl irp
NTSTATUS IrpIOCTL(PDEVICE_OBJECT pOurDevice, PIRP pIrp)
{
  ULONG Len=0;
  PUCHAR pBuf;
  PIO_STACK_LOCATION psk = IoGetCurrentIrpStackLocation(pIrp);

  switch(psk-&gt;Parameters.DeviceIoControl.IoControlCode){
  case IOCTL_DIRECT_SET:
    DbgPrint("IrpIOCTL, IOCTL_DIRECT_SET\n");
    Len = psk-&gt;Parameters.DeviceIoControl.InputBufferLength;
    memcpy(szBuffer, pIrp-&gt;AssociatedIrp.SystemBuffer, Len);
    DbgPrint("IrpIOCTL, Buf: %s, Len: %d\n", szBuffer, Len);
    break;
  case IOCTL_DIRECT_GET:
    DbgPrint("IrpIOCTL, IOCTL_DIRECT_GET\n");
    pBuf = MmGetSystemAddressForMdlSafe(pIrp-&gt;MdlAddress, LowPagePriority);
    Len = psk-&gt;Parameters.DeviceIoControl.OutputBufferLength;
    memcpy(pBuf, szBuffer, Len);
    break;
  }
  pIrp-&gt;IoStatus.Status = STATUS_SUCCESS;
  pIrp-&gt;IoStatus.Information = Len;
  IoCompleteRequest(pIrp, IO_NO_INCREMENT);
  return STATUS_SUCCESS;
}

//*** process file irp
NTSTATUS IrpFile(PDEVICE_OBJECT pOurDevice, PIRP pIrp)
{
  PIO_STACK_LOCATION psk = IoGetCurrentIrpStackLocation(pIrp);

  switch(psk-&gt;MajorFunction){
  case IRP_MJ_CREATE:
    DbgPrint("IrpFile, IRP_MJ_CREATE\n");
    break;
  case IRP_MJ_CLOSE:
    DbgPrint("IrpFile, IRP_MJ_CLOSE\n");
    break;
  }
  IoCompleteRequest(pIrp, IO_NO_INCREMENT);
  return STATUS_SUCCESS;
}
  
//*** driver entry
NTSTATUS DriverEntry(PDRIVER_OBJECT pOurDriver, PUNICODE_STRING pOurRegistry)
{
  pOurDriver-&gt;MajorFunction[IRP_MJ_PNP] = IrpPnp;
  pOurDriver-&gt;MajorFunction[IRP_MJ_CREATE] =
  pOurDriver-&gt;MajorFunction[IRP_MJ_CLOSE] = IrpFile;
  pOurDriver-&gt;MajorFunction[IRP_MJ_DEVICE_CONTROL] = IrpIOCTL;
  pOurDriver-&gt;DriverExtension-&gt;AddDevice = AddDevice;
  pOurDriver-&gt;DriverUnload = Unload;
  return STATUS_SUCCESS;
}
</pre>

<p>
main.inf
</p>

<pre class="brush:cpp">
;/*========================================================================================================
;//  Basically, all of files downloaded from my website can be modified or redistributed for any purpose.
;//  It is my honor to share my interesting to everybody.
;//  If you find any illeage content out from my website, please contact me firstly.
;//  I will remove all of the illeage parts.
;//  Thanks :)
;//   
;//  Steward Fu
;//  steward.fu@gmail.com
;//  https://steward-fu.github.io/website/index.htm
;//========================================================================================================*/
[Version]
Signature=$CHICAGO$
Class=Unknown
Provider=%MFGNAME%
DriverVer=01/06/2017,1.0.0.0
 
[Manufacturer]
%MFGNAME%=DeviceList
 
[DeviceList]
%DESCRIPTION%=DriverInstall, *firstIOCTL-Direct-In
 
[DestinationDirs]
DefaultDestDir=10,System32\Drivers
 
[SourceDisksFiles]
main.sys=1,,,
 
[SourceDisksNames]
1=%INSTDISK%,,,
 
[DriverInstall.NT]
CopyFiles=DriverCopyFiles
 
[DriverCopyFiles]
main.sys,,,2
 
[DriverInstall.NT.Services]
AddService=firstIOCTL-Direct-In,2,DriverService
 
[DriverService]
ServiceType=1
StartType=3
ErrorControl=1
ServiceBinary=%10%\system32\drivers\main.sys
 
[DriverInstall.NT.HW]
AddReg=DriverHwAddReg
 
[DriverHwAddReg]
HKR,,SampleInfo,,""
 
[DriverInstall]
AddReg=DriverAddReg
CopyFiles=DriverCopyFiles
 
[DriverAddReg]
HKR,,DevLoader,,*ntkern
HKR,,NTMPDriver,,main.sys
 
[DriverInstall.HW]
AddReg=DriverHwAddReg
 
[Strings]
MFGNAME="firstIOCTL-Direct-In"
INSTDISK="firstIOCTL-Direct-In Disc"
DESCRIPTION="firstIOCTL-Direct-In"
</pre>

<p>
app.cpp
</p>

<pre class="brush:cpp">
/*========================================================================================================
  Basically, all of files downloaded from my website can be modified or redistributed for any purpose.
  It is my honor to share my interesting to everybody.
  If you find any illeage content out from my website, please contact me firstly.
  I will remove all of the illeage parts.
  Thanks :)
   
  Steward Fu
  steward.fu@gmail.com
  https://steward-fu.github.io/website/index.htm
========================================================================================================*/
#include &lt;DriverSpecs.h&gt;
__user_code  
#define INITGUID
#include &lt;windows.h&gt;
#include &lt;winioctl.h&gt;
#include &lt;strsafe.h&gt;
#include &lt;setupapi.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#define WHILE(a) __pragma(warning(suppress:4127)) while(a)

#define IOCTL_DIRECT_SET CTL_CODE(FILE_DEVICE_UNKNOWN, 0x800, METHOD_IN_DIRECT, FILE_ANY_ACCESS)
#define IOCTL_DIRECT_GET CTL_CODE(FILE_DEVICE_UNKNOWN, 0x801, METHOD_IN_DIRECT, FILE_ANY_ACCESS)
 
//*** main entry point
int __cdecl main(int argc, char* argv[])
{
  HANDLE hFile = NULL;
  DWORD dwRet = 0;
  char szBuffer[255]={"test is testing message"};

  hFile = CreateFile("\\\\.\\firstIOCTL-Direct-In", GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, 0, NULL);
  if (hFile == INVALID_HANDLE_VALUE) {
    printf("failed to open driver\n");
    return 1;
  }
  DeviceIoControl(hFile, IOCTL_DIRECT_SET, szBuffer, strlen(szBuffer), NULL, 0, &amp;dwRet, NULL);
  memset(szBuffer, 0, sizeof(szBuffer));
  DeviceIoControl(hFile, IOCTL_DIRECT_GET, NULL, 0, szBuffer, sizeof(szBuffer), &amp;dwRet, NULL);
  printf("IOCTL_DIRECT_GET: %s\n", szBuffer);
  CloseHandle(hFile);
  return 0;
}
</pre>
<p>
<img src="cpp_ioctl-direct-in/1.jpg" class="maxSize">
</p>

<p>
<img src="cpp_ioctl-direct-in/2.jpg" class="maxSize">
</p>

<p>
<img src="cpp_ioctl-direct-in/3.jpg" class="maxSize">
</p>

<p>
<img src="cpp_ioctl-direct-in/4.jpg" class="maxSize">
</p>

<p>
<img src="cpp_ioctl-direct-in/5.jpg" class="maxSize">
</p>

<p>
<img src="cpp_ioctl-direct-in/6.jpg" class="maxSize">
</p>

<p>
<br><a href="../../../driver.htm">返回上一頁</a>
</p>

</div>
</div>
</div>
</body>
</html>
