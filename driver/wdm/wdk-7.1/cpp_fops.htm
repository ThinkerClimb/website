<!--
 ____________________________________________________________
|                                                            |
|    DESIGN + Pat Heard { http://fullahead.org }             |
|      DATE + 2006.09.12                                     |
| COPYRIGHT + Free use if this notice is kept in place.      |
|____________________________________________________________|

-->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>司徒的教學網站</title>
  <meta http-lowast="content-type" content="application/xhtml+xml; charset=UTF-8" />
  <meta name="author" content="fullahead.org" />
  <meta name="keywords" content="XHTML, CSS, template, FullAhead" />
  <meta name="description" content="A valid, XHTML 1.0 template" />
  <meta name="robots" content="index, follow, noarchive" />
  <meta name="googlebot" content="noarchive" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes, minimum-scale=0.1, maximum-scale=100.0"/>

  <link rel="shortcut icon" href="../../../website.ico">
  <link rel="stylesheet" type="text/css" href="../../../styles/shCore.css" />
  <link rel="stylesheet" type="text/css" href="../../../styles/shThemeDefault.css" />
  <link rel="stylesheet" type="text/css" href="../../../css/html.css" media="screen, projection, tv " />
  <link rel="stylesheet" type="text/css" href="../../../css/layout.css" media="screen, projection, tv" />
  <link rel="stylesheet" type="text/css" href="../../../css/print.css" media="print" />
  
  <script type="text/javascript" src="../../../scripts/shCore.js"></script>
  <script type="text/javascript" src="../../../scripts/shBrushCpp.js"></script>

  <!-- Conditional comment to apply opacity fix for IE #content background.
       Invalid CSS, but can be removed without harming design -->
  <!--[if gt IE 5]>
  <link rel="stylesheet" type="text/css" href="css/ie.css" media="screen, projection, tv " />
  <![endif]-->
</head>

<body>
<script type="text/javascript">SyntaxHighlighter.all();</script>
<div id="wrapper">
<div id="content">
<script type="text/javascript" src="../../../header.js"></script>
<div id="page">
<h3>Windows Driver Model &gt;&gt; WDK 7.1 (C/C++) &gt;&gt; Advanced &gt;&gt; File Operation</h3>
<p><b>IRP用法</b></p>
<hr size="1">
<p>
Github <a href="https://github.com/steward-fu/driver">https://github.com/steward-fu/driver</a><br><br>

基本上，驅動程式(韌體)的基本功能就是當作User Mode Application(軟體)和硬體的溝通橋樑，軟體可以透過很多種方式和驅動程式溝通，而最常用的溝通方式就是把驅動程式當做是一個檔案在操作，軟體可以透過檔案讀寫的方式和驅動程式做資料傳遞的動作，在Windows系統上，可以使用CreateFile(檔案開啟)、ReadFile(讀取檔案)、WriteFile(寫入檔案)、CloseHandle(關閉檔案)等檔案操作的Win32 API，而驅動程式怎麼提供這些入口給軟體使用呢？驅動程式必須在DriverEntry()設定IRP_MJ_CREATE(<b>CreateFile</b>)、IRP_MJ_READ(<b>ReadFile</b>)、IRP_MJ_WRITE(<b>WriteFile</b>)、IRP_MJ_CLOSE(<b>CloseHandle</b>)的Callback副程式，這樣I/O Manager才會知道如何串起這條溝通管道。<br><br>

當然，使用者可能也很好奇，為何軟體不直接跟硬體溝通就好，還要透過一個這麼複雜的驅動程式當作溝通橋樑？這個話題，一旦開始談論時，變暴露出司徒的年齡，因此，司徒只能說去看看Win95以及Win98在驅動程式的演變就可以了解原因。當軟體可以直接溝通硬體時，會造成太多衝突，以及優先順序問題，而因為可以直接控制硬體，因此，寫出一個非惡意但具有破壞性的軟體時，是間接可以把一個系統搞壞掉，這也是為何要在Win98之後，架構出一個驅動程式的原因，至少有一個溝通和協調的機制，當然隨著系統的發展，規定就會變成越來嚴格，這也是Microsoft致力於保護系統核心的最好方式！<br><br>

User Mode對應Kernel Mode的溝通管道
</p>
<table>
<tr>
  <th>Win32 API</th>
  <th>Kernel IRP</th>
</tr>
<tr>
  <td>CreateFile()</td>
  <td>IRP_MJ_CREATE</td>
</tr>
<tr>
  <td>ReadFile()</td>
  <td>IRP_MJ_READ</td>
</tr>
<tr>
  <td>WriteFile()</td>
  <td>IRP_MJ_WRITE</td>
</tr>
<tr>
  <td>CloseHandle()</td>
  <td>IRP_MJ_CLOSE</td>
</tr>
</table>
<p>
接著司徒將介紹如何寫出一個最基本的File Operation驅動程式框架，使用者可以透過這個框架慢慢添加和學習一些更進階的驅動程式技巧。<br><br>

main.c
</p>

<pre class="brush:cpp">
#include &lt;wdm.h&gt;

PDEVICE_OBJECT gNextDevice=NULL;

NTSTATUS AddDevice(PDRIVER_OBJECT pOurDriver, PDEVICE_OBJECT pPhyDevice)
{
  PDEVICE_OBJECT pOurDevice=NULL;
  UNICODE_STRING usDeviceName;
  UNICODE_STRING usSymboName;

  DbgPrint("File operation !");
  RtlInitUnicodeString(&amp;usDeviceName, L"\\Device\\firstFile");
  IoCreateDevice(pOurDriver, 0, &amp;usDeviceName, FILE_DEVICE_UNKNOWN, 0, FALSE, &amp;pOurDevice);
  RtlInitUnicodeString(&amp;usSymboName, L"\\DosDevices\\firstFile");
  IoCreateSymbolicLink(&amp;usSymboName, &amp;usDeviceName);
  gNextDevice = IoAttachDeviceToDeviceStack(pOurDevice, pPhyDevice);
  pOurDevice-&gt;Flags&amp;= ~DO_DEVICE_INITIALIZING;
  pOurDevice-&gt;Flags|= DO_BUFFERED_IO;
  return STATUS_SUCCESS;
}

void Unload(PDRIVER_OBJECT pOurDriver)
{
}

NTSTATUS IrpPnp(PDEVICE_OBJECT pOurDevice, PIRP pIrp)
{
  PIO_STACK_LOCATION psk = IoGetCurrentIrpStackLocation(pIrp);
  UNICODE_STRING usSymboName;

  if(psk-&gt;MinorFunction == IRP_MN_REMOVE_DEVICE){
    RtlInitUnicodeString(&amp;usSymboName, L"\\DosDevices\\firstFile");
    IoDeleteSymbolicLink(&amp;usSymboName);
    IoDetachDevice(gNextDevice);
    IoDeleteDevice(pOurDevice);
  }
  IoSkipCurrentIrpStackLocation(pIrp);
  return IoCallDriver(gNextDevice, pIrp);
}

NTSTATUS IrpFile(PDEVICE_OBJECT pOurDevice, PIRP pIrp)
{
  PIO_STACK_LOCATION psk = IoGetCurrentIrpStackLocation(pIrp);
  switch(psk-&gt;MajorFunction){
  case IRP_MJ_CREATE:
    DbgPrint("IRP_MJ_CREATE\n");
    break;
  case IRP_MJ_READ:
    DbgPrint("IRP_MJ_READ\n");
    break;
  case IRP_MJ_WRITE:
    DbgPrint("IRP_MJ_WRITE\n");
    break;
  case IRP_MJ_CLOSE:
    DbgPrint("IRP_MJ_CLOSE\n");
    break;
  }
  IoCompleteRequest(pIrp, IO_NO_INCREMENT);
  return STATUS_SUCCESS;
}

NTSTATUS DriverEntry(PDRIVER_OBJECT pOurDriver, PUNICODE_STRING pOurRegistry)
{
  pOurDriver-&gt;MajorFunction[IRP_MJ_PNP] = IrpPnp;
  pOurDriver-&gt;MajorFunction[IRP_MJ_CREATE] =
  pOurDriver-&gt;MajorFunction[IRP_MJ_READ] =
  pOurDriver-&gt;MajorFunction[IRP_MJ_WRITE] =
  pOurDriver-&gt;MajorFunction[IRP_MJ_CLOSE] = IrpFile;
  pOurDriver-&gt;DriverExtension-&gt;AddDevice = AddDevice;
  pOurDriver-&gt;DriverUnload = Unload;
  return STATUS_SUCCESS;
}
</pre>
<p>
<b>DriverEntry()</b>設定檔案操作的相關Callback副程式。<br>
<b>AddDevice()</b>Create device object、Symbolic link和設定相關旗標，目前檔案讀寫是使用Buffer的記憶體操作方式，關於檔案讀寫的記憶體操作方式，司徒將會在其它教學文章介紹。<br>
<b>Unload</b>目前不作任何事情，因為釋放資源的地方已經改到IrpPnp()副程式。<br>
<b>IrpPnp()</b>在Remove device時釋放資源。<br>
<b>IrpFile()</b>處理檔案相關的IRP，目前只列印IRP資訊，其餘不處理。<br><br>

sources
</p>

<pre class="brush:cpp">
TARGETNAME=main
TARGETTYPE=DRIVER  
TARGETPATH=obj
SOURCES=main.c
</pre><br>

<p>
makefile
</p>

<pre class="brush:cpp">
!INCLUDE $(NTMAKEENV)\makefile.def
</pre><br>

<p>
main.inf
</p>

<pre class="brush:cpp">
[Version]
Signature=$CHICAGO$
Class=Unknown
Provider=%MFGNAME%
DriverVer=5/30/2018,1.0.0.0
 
[Manufacturer]
%MFGNAME%=DeviceList
 
[DeviceList]
%DESCRIPTION%=DriverInstall, *firstFile
 
[DestinationDirs]
DefaultDestDir=10,System32\Drivers
 
[SourceDisksFiles]
main.sys=1,,,
 
[SourceDisksNames]
1=%INSTDISK%,,,
 
[DriverInstall.NT]
CopyFiles=DriverCopyFiles
 
[DriverCopyFiles]
main.sys,,,2
 
[DriverInstall.NT.Services]
AddService=firstFile,2,DriverService
 
[DriverService]
ServiceType=1
StartType=3
ErrorControl=1
ServiceBinary=%10%\system32\drivers\main.sys
 
[DriverInstall.NT.HW]
AddReg=DriverHwAddReg
 
[DriverHwAddReg]
HKR,,SampleInfo,,""
 
[DriverInstall]
AddReg=DriverAddReg
CopyFiles=DriverCopyFiles
 
[DriverAddReg]
HKR,,DevLoader,,*ntkern
HKR,,NTMPDriver,,main.sys
 
[DriverInstall.HW]
AddReg=DriverHwAddReg
 
[Strings]
MFGNAME="firstFile"
INSTDISK="firstFile Disc"
DESCRIPTION="firstFile"
</pre><br>

<p>
執行結果<br>
<img src="cpp_fops/1.jpg" class="maxSize"><br><br>

Device Manager<br>
<img src="cpp_fops/2.jpg" class="maxSize"><br><br>

Device Name<br>
<img src="cpp_fops/3.jpg" class="maxSize"><br><br>

Symbolic Link<br>
<img src="cpp_fops/4.jpg" class="maxSize"><br><br>

為了測試驅動程式的檔案讀寫IRP，我們需要一個User Mode Application做測試(app.c)</b>
</p>
<pre class="brush: cpp">
#define INITGUID
#include &lt;windows.h&gt;
#include &lt;strsafe.h&gt;
#include &lt;setupapi.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int __cdecl main(int argc, char* argv[])
{
  HANDLE hFile = NULL;
  DWORD dwRet = 0;
  char szBuffer[255]={0};

  hFile = CreateFile("\\\\.\\firstFile", GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, 0, NULL);
  if(hFile == INVALID_HANDLE_VALUE){
    printf("failed to open firstFile driver\n");
    return 1;
  }

  strncpy(szBuffer, "Testing Only", sizeof(szBuffer));
  WriteFile(hFile, szBuffer, strlen(szBuffer) + 1, &amp;dwRet, NULL);
  printf("WR: %s\n", szBuffer);

  memset(szBuffer, 0, sizeof(szBuffer));
  ReadFile(hFile, szBuffer, sizeof(szBuffer), &amp;dwRet, NULL);
  printf("RD: %s\n", szBuffer);
  CloseHandle(hFile);
  return 0;
}
</pre><br>

<p>
sources
</p>

<pre class="brush:cpp">
TARGETNAME=app
TARGETTYPE=PROGRAM
TARGETPATH=obj
UMTYPE=console
UMBASE=0x0400000
SOURCES=app.c
USE_MSVCRT=1
</pre><br>

<p>
一樣使用DDK編譯，接著執行該User Mode Application就看到結果<br>
<img src="cpp_fops/5.jpg" class="maxSize"><br>
<img src="cpp_fops/6.jpg" class="maxSize"><br>
由於讀寫記憶體的操作方式有分3種，關於這部份，司徒會在其它章節說明，因此，在此範例僅列印收到的IRP，不做任何記憶體操作，所以App沒有收到驅動程式的回傳資料。
</p>

<p>
<a href="../../../driver.htm">返回上一頁</a>
</p>

</div>
</div>
</div>
</body>
</html>
