<!--
 ____________________________________________________________
|                                                            |
|    DESIGN + Pat Heard { http://fullahead.org }             |
|      DATE + 2006.09.12                                     |
| COPYRIGHT + Free use if this notice is kept in place.      |
|____________________________________________________________|

-->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>司徒的教學網站</title>
  <meta http-lowast="content-type" content="application/xhtml+xml; charset=UTF-8" />
  <meta name="author" content="fullahead.org" />
  <meta name="keywords" content="XHTML, CSS, template, FullAhead" />
  <meta name="description" content="A valid, XHTML 1.0 template" />
  <meta name="robots" content="index, follow, noarchive" />
  <meta name="googlebot" content="noarchive" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes, minimum-scale=0.1, maximum-scale=100.0"/>

  <link rel="shortcut icon" href="../../../website.ico">
  <link rel="stylesheet" type="text/css" href="../../../styles/shCore.css" />
  <link rel="stylesheet" type="text/css" href="../../../styles/shThemeDefault.css" />
  <link rel="stylesheet" type="text/css" href="../../../css/html.css" media="screen, projection, tv " />
  <link rel="stylesheet" type="text/css" href="../../../css/layout.css" media="screen, projection, tv" />
  <link rel="stylesheet" type="text/css" href="../../../css/print.css" media="print" />
  
  <script type="text/javascript" src="../../../scripts/shCore.js"></script>
  <script type="text/javascript" src="../../../scripts/shBrushCpp.js"></script>

  <!-- Conditional comment to apply opacity fix for IE #content background.
       Invalid CSS, but can be removed without harming design -->
  <!--[if gt IE 5]>
  <link rel="stylesheet" type="text/css" href="css/ie.css" media="screen, projection, tv " />
  <![endif]-->
</head>

<body>
<script type="text/javascript">SyntaxHighlighter.all();</script>
<div id="wrapper">
<div id="content">
<script type="text/javascript" src="../../../header.js"></script>
<div id="page">
<h3>Windows Driver Model &gt;&gt; WDK 7.1 &gt;&gt; C/C++ &gt;&gt; Advanced &gt;&gt; File Operation</h3>
<p><b>DO_NEITHER_IO用法</b></p>
<hr size="1">
<p>
Github <a href="https://github.com/steward-fu/driver">https://github.com/steward-fu/driver</a><br><br>

基本上，Microsoft沒有定義DO_NEITHER_IO這個Flag，而Neither I/O的意思就是Neither Buffered Nor Direct I/O，因此，當沒有設定DO_BUFFERED_IO或DO_DIRECT_IO Flag時，就會使用Neither的方式，使用這種方式時，I/O Manager會將User Buffer的指標，透過操作後，傳遞給驅動程式使用，因此，驅動程式可以直接存取User Buffer的資料，所以存取速度可以得到很大的改善，對於有速度要求的驅動程式來說，建議使用Neither的方式，不過，關於User Buffer指標的存取問題上，會遇到更多需要面對的問題，如：指標的有效性以及多次存取的同步問題，因此，在選擇使用上，更需要考量到這些需要額外付出的代價是否值得使用，因為，驅動程式以及User Application雙方都需要很嚴謹的看待這塊共用的Buffer。<br><br>

Microsoft的說明網頁：<br>
<a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/kernel/using-neither-buffered-nor-direct-i-o">https://docs.microsoft.com/en-us/windows-hardware/drivers/kernel/using-neither-buffered-nor-direct-i-o</a><br><br>

記憶體指標：
</p>
<table>
<tr>
  <th>IRP</th>
  <th>Buffer</th>
  <th>Length</th>
</tr>
<tr>
  <td>IRP_MJ_READ</td>
  <td>(Irp)<br>UserBuffer</td>
  <td>(IrpStack)<br>Parameters.Read.Length</td>
</tr>
<tr>
  <td>IRP_MJ_WRITE</td>
  <td>(Irp)<br>UserBuffer</td>
  <td>(IrpStack)<br>Parameters.Write.Length</td>
</tr>
</table><br>

<p>
main.c
</p>
<pre class="brush:cpp">
#include &lt;wdm.h&gt;

#define DEV_NAME  L"\\Device\\firstFile-Neither"
#define SYM_NAME  L"\\DosDevices\\firstFile-Neither"
#define MSG       "File Operation (DO_NEITHER_IO)"

char szBuffer[255]={0};
PDEVICE_OBJECT gNextDevice=NULL;
  
NTSTATUS AddDevice(PDRIVER_OBJECT pOurDriver, PDEVICE_OBJECT pPhyDevice)
{
  PDEVICE_OBJECT pOurDevice=NULL;
  UNICODE_STRING usDeviceName;
  UNICODE_STRING usSymboName;

  DbgPrint(MSG);
  RtlInitUnicodeString(&amp;usDeviceName, DEV_NAME);
  IoCreateDevice(pOurDriver, 0, &amp;usDeviceName, FILE_DEVICE_UNKNOWN, 0, FALSE, &amp;pOurDevice);
  RtlInitUnicodeString(&amp;usSymboName, SYM_NAME);
  IoCreateSymbolicLink(&amp;usSymboName, &amp;usDeviceName);
  gNextDevice = IoAttachDeviceToDeviceStack(pOurDevice, pPhyDevice);
  pOurDevice-&gt;Flags&amp;= ~DO_DEVICE_INITIALIZING;
  return STATUS_SUCCESS;
}

void Unload(PDRIVER_OBJECT pOurDriver)
{
}

NTSTATUS IrpPnp(PDEVICE_OBJECT pOurDevice, PIRP pIrp)
{
  UNICODE_STRING usSymboName;
  PIO_STACK_LOCATION psk = IoGetCurrentIrpStackLocation(pIrp);

  if(psk-&gt;MinorFunction == IRP_MN_REMOVE_DEVICE){
    RtlInitUnicodeString(&amp;usSymboName, SYM_NAME);
    IoDeleteSymbolicLink(&amp;usSymboName);
    IoDetachDevice(gNextDevice);
    IoDeleteDevice(pOurDevice);
  }
  IoSkipCurrentIrpStackLocation(pIrp);
  return IoCallDriver(gNextDevice, pIrp);
}

NTSTATUS IrpFile(PDEVICE_OBJECT pOurDevice, PIRP pIrp)
{
  ULONG Len;
  PUCHAR pBuf;
  PIO_STACK_LOCATION psk = IoGetCurrentIrpStackLocation(pIrp);

  switch(psk-&gt;MajorFunction){
  case IRP_MJ_CREATE:
    memset(szBuffer, 0, sizeof(szBuffer));
    DbgPrint("IRP_MJ_CREATE\n");
    break;
  case IRP_MJ_READ:
    pBuf = pIrp-&gt;UserBuffer;
    Len = psk-&gt;Parameters.Read.Length;
    memcpy(pBuf, szBuffer, Len);
    DbgPrint("IRP_MJ_READ\n");
    DbgPrint("Buf: %s, Len: %d\n", szBuffer, Len);
    break;
  case IRP_MJ_WRITE:
    pBuf = pIrp-&gt;UserBuffer;
    Len = psk-&gt;Parameters.Write.Length;
    memcpy(szBuffer, pBuf, Len);
    DbgPrint("IRP_MJ_WRITE\n");
    DbgPrint("Buf: %s, Len: %d\n", szBuffer, Len);
    break;
  case IRP_MJ_CLOSE:
    DbgPrint("IRP_MJ_CLOSE\n");
    break;
  }
  IoCompleteRequest(pIrp, IO_NO_INCREMENT);
  return STATUS_SUCCESS;
}

NTSTATUS DriverEntry(PDRIVER_OBJECT pOurDriver, PUNICODE_STRING pOurRegistry)
{
  pOurDriver-&gt;MajorFunction[IRP_MJ_PNP] = IrpPnp;
  pOurDriver-&gt;MajorFunction[IRP_MJ_CREATE] =
  pOurDriver-&gt;MajorFunction[IRP_MJ_READ] =
  pOurDriver-&gt;MajorFunction[IRP_MJ_WRITE] =
  pOurDriver-&gt;MajorFunction[IRP_MJ_CLOSE] = IrpFile;
  pOurDriver-&gt;DriverExtension-&gt;AddDevice = AddDevice;
  pOurDriver-&gt;DriverUnload = Unload;
  return STATUS_SUCCESS;
}
</pre>
<p>
<b>DriverEntry()</b>設定檔案相關的Callback副程式。<br>
<b>IrpFile()</b>收到IRP_MJ_WRITE時，Driver複製User Buffer的內容到Driver自己的Buffer(gszBuffer)，當收到IRP_MJ_READ時，將gszBuffer內容又複製到User Buffer，完成暫存的功能，注意此處指標取得的方式。<br>
<b>IrpPnp()</b>只處理釋放資源的工作。<br>
<b>Unload()</b>不做任何處理。<br>
<b>AddDevice()</b>Create Device和Symbolic Link並且設定使用DO_DIRECT_IO的傳輸方式。<br><br>

app.cpp
</p>
<pre class="brush:cpp">
#define INITGUID
#include &lt;windows.h&gt;
#include &lt;strsafe.h&gt;
#include &lt;setupapi.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int __cdecl main(int argc, char* argv[])
{
  HANDLE hFile = NULL;
  DWORD dwRet = 0;
  char szBuffer[255]={0};

  hFile = CreateFile("\\\\.\\firstFile-Neither", GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, 0, NULL);
  if(hFile == INVALID_HANDLE_VALUE){
    printf("failed to open firstFile driver\n");
    return 1;
  }

  strncpy(szBuffer, "Testing Only", sizeof(szBuffer));
  WriteFile(hFile, szBuffer, strlen(szBuffer) + 1, &amp;dwRet, NULL);
  printf("WR: %s\n", szBuffer);

  memset(szBuffer, 0, sizeof(szBuffer));
  ReadFile(hFile, szBuffer, sizeof(szBuffer), &amp;dwRet, NULL);
  printf("RD: %s\n", szBuffer);
  CloseHandle(hFile);
  return 0;
}
</pre><br>

<p>
結果<br>
<img src="cpp_fops-neither/1.jpg" class="maxSize"><br>
<img src="cpp_fops-neither/2.jpg" class="maxSize">
</p>

<p>
<br><a href="../../../driver.htm">返回上一頁</a>
</p>

</div>
</div>
</div>
</body>
</html>
