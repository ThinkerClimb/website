<!--
 ____________________________________________________________
|                                                            |
|    DESIGN + Pat Heard { http://fullahead.org }             |
|      DATE + 2006.09.12                                     |
| COPYRIGHT + Free use if this notice is kept in place.      |
|____________________________________________________________|

-->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>司徒的教學網站</title>
  <meta http-lowast="content-type" content="application/xhtml+xml; charset=UTF-8" />
  <meta name="author" content="fullahead.org" />
  <meta name="keywords" content="XHTML, CSS, template, FullAhead" />
  <meta name="description" content="A valid, XHTML 1.0 template" />
  <meta name="robots" content="index, follow, noarchive" />
  <meta name="googlebot" content="noarchive" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes, minimum-scale=0.1, maximum-scale=100.0"/>

  <link rel="shortcut icon" href="../../../../website.ico">
  <link rel="stylesheet" type="text/css" href="../../../../styles/shCore.css" />
  <link rel="stylesheet" type="text/css" href="../../../../styles/shThemeDefault.css" />
  <link rel="stylesheet" type="text/css" href="../../../../css/html.css" media="screen, projection, tv " />
  <link rel="stylesheet" type="text/css" href="../../../../css/layout.css" media="screen, projection, tv" />
  <link rel="stylesheet" type="text/css" href="../../../../css/print.css" media="print" />
  
  <script type="text/javascript" src="../../../../scripts/shCore.js"></script>
  <script type="text/javascript" src="../../../../scripts/shBrushCpp.js"></script>

  <!-- Conditional comment to apply opacity fix for IE #content background.
       Invalid CSS, but can be removed without harming design -->
  <!--[if gt IE 5]>
  <link rel="stylesheet" type="text/css" href="css/ie.css" media="screen, projection, tv " />
  <![endif]-->
</head>

<body>
<script type="text/javascript">SyntaxHighlighter.all();</script>
<div id="wrapper">
<div id="content">
<script type="text/javascript" src="../../../../header.js"></script>
<div id="page">
<h3>Kernel Mode Driver Framework >> WDK 7.1 >> C/C++ >> PNP >> Basic</h3>
<p><b>DriverEntry</b></p>
<hr size="1">
<p>
Windows Driver Framework(WDF)是新型的驅動程式架構並且分成Kernel Mode Driver Framework(KMDF)和User Mode Driver Framework(UMDF)兩種架構，UMDF是跑在User Mode的Driver；而KMDF則是跑在Kernel Mode，所以KMDF的行為以及寫法會跟WDM很相似，畢竟KMDF是一個重新包裝WDM架構的驅動程式，所以很多WDM的東西還是可以共用的，但是KMDF的誕生畢竟是為了簡化WDM的複雜性，如果要寫KMDF驅動程式就遵照KMDF建議的方式製作，之後維護程式的人也比較清楚關係，畢竟很多人還是從KMDF開始學習驅動程式，並非是從WDM開始學習。
</p>

<p>
KMDF的驅動程式又分成PnP(Plug and Play)和Non-PnP兩種類型，PnP類型的驅動程式主要負責的職務是跟支援隨插即用的裝置溝通，其類型大致上有：USB、1394、PCI等隨插即用裝置，而相較於PnP類型的驅動程式，Non-PnP類型的驅動程式並不支援隨插即用的IRP(I/O Request Packet)，系統當然也不會發送隨插即用的IRP到Non-PnP驅動程式，因為Non-PnP主要支援非隨插即用裝置，因此相關的隨插即用資源是無法存取的，但是還是可以存取Legacy硬體I/O，而KMDF的PnP跟Non-PnP驅動程式，其實就是WDM和Legacy類型的驅動程式。
</p>

<p>
不管是KMDF(PnP、Non-PnP)、WDM或Legacy驅動程式，它們的程式進入點一律是DriverEntry()，而且格式是一樣的，定義如下：
</p>

<pre class="brush:cpp">
NTSTATUS DriverEntry(PDRIVER_OBJECT, PUNICODE_STRING);
</pre>

<p>
系統載入驅動程式時會呼叫DriverEntry()並帶入兩個參數，第一個PDRIVER_OBJECT是Driver Object指標，該指標會包含驅動程式物件的所有資訊，當然有些欄位是不允許使用者更改的，而另一個參數PUNICODE_STRING則是Registry Path，每個驅動程式在安裝時，都會產生一個註冊表項目，該項目就是當Windows啟動時要載入用的，所以註冊表亂更改時，驅動程式可能就不會被正確載入。
</p>

<p>
需要注意的是，就算有相同的裝置載入同一份驅動程式，則Driver Object也僅會只有一份，那這一些相同裝置的驅動程式資料不就會亂掉嗎？答案是：不會的，因為會有多份Device Oject，每個Device Object各代表不同的裝置。
</p>

<p>
那DriverEntry()需要做哪一些事情呢？做法跟WDM是很類似的，都需要註冊Callback副程式，差別只是呼叫API不一樣，因為KMDF使用了事件、屬性、訊息當作處理的核心機制，其實有點像Windows的視窗程式寫法。
</p>

<p>
範例
</p>

<pre class="brush:cpp">
NTSTATUS DriverEntry(PDRIVER_OBJECT pDrvObj, PUNICODE_STRING pRegPath)
{
 WDF_DRIVER_CONFIG config;
 NTSTATUS status;

 WDF_DRIVER_CONFIG_INIT(&amp;config, AddDevice);
 status = WdfDriverCreate(pDrvObj, pRegPath, WDF_NO_OBJECT_ATTRIBUTES, &amp;config, WDF_NO_HANDLE);
 if(!NT_SUCCESS(status)){
  DbgPrint("WdfDriverCreate failed 0x%x\n", status);
  return status;
 }
 return STATUS_SUCCESS;
}
</pre>

<p>
上面的程式只註冊AddDevice Callback副程式，其餘Callback交給預設的KMDF副程式處理，很簡短吧！該程式是透過WDF_DRIVER_CONFIG_INIT()做Callback初始化，該副程式看起來很簡單，但是怕該副程式隱藏很多細節，所以司徒將它的內容貼出來看一下
</p>

<pre class="brush:cpp">
VOID FORCEINLINE WDF_DRIVER_CONFIG_INIT(OUT PWDF_DRIVER_CONFIG Config, IN PFN_WDF_DRIVER_DEVICE_ADD EvtDriverDeviceAdd)
{
 RtlZeroMemory(Config, sizeof(WDF_DRIVER_CONFIG));
 Config-&gt;Size = sizeof(WDF_DRIVER_CONFIG);
 Config-&gt;EvtDriverDeviceAdd = EvtDriverDeviceAdd;
}
</pre>

<p>
WDF_DRIVER_CONFIG_INIT()看來只有做記憶體初始化跟Config結構的初始化，算是很簡單的初始化而已。
</p>

<p>
初始化完Config結構後，程式接著使用WdfDriverCreate()產生Framework Driver Object，這個地方就跟WDM不一樣，WDM不需要產生Driver Object，而KMDF因為核心是採用WDM的架構，所以需要建立另一組資料給KMDF使用，另外要注意的是DriverEntry()回傳值的部分，因為回傳值會決定載入驅動程式的成功或失敗。
</p>

<p>
KMDF相較於WDM的架構，真是越來越簡潔，但是，沒有WDM基礎的使用者，司徒覺得對於除錯以及詳細原理會越來越難搞清楚，畢竟包裝太多WDM的東西，看似簡單，卻是隱藏很多細節，對於初學者或經驗不足的使用者，細節完全不懂時，很難Debug比較難的問題。
</p>

<p>
<br><a href="../../../../driver.htm">返回上一頁</a>
</p>

</div>
</div>
</div>
</body>
</html>
