
<!--
 ____________________________________________________________
|                                                            |
|    DESIGN + Pat Heard { http://fullahead.org }             |
|      DATE + 2006.09.12                                     |
| COPYRIGHT + Free use if this notice is kept in place.      |
|____________________________________________________________|

-->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>司徒的教學網站</title>
  <meta http-lowast="content-type" content="application/xhtml+xml; charset=UTF-8" />
  <meta name="author" content="fullahead.org" />
  <meta name="keywords" content="XHTML, CSS, template, FullAhead" />
  <meta name="description" content="A valid, XHTML 1.0 template" />
  <meta name="robots" content="index, follow, noarchive" />
  <meta name="googlebot" content="noarchive" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes, minimum-scale=0.1, maximum-scale=100.0"/>

  <link rel="shortcut icon" href="../../../website.ico">
  <link rel="stylesheet" type="text/css" href="../../../styles/shCore.css" />
  <link rel="stylesheet" type="text/css" href="../../../styles/shThemeDefault.css" />
  <link rel="stylesheet" type="text/css" href="../../../css/html.css" media="screen, projection, tv " />
  <link rel="stylesheet" type="text/css" href="../../../css/layout.css" media="screen, projection, tv" />
  <link rel="stylesheet" type="text/css" href="../../../css/print.css" media="print" />
  
  <script type="text/javascript" src="../../../scripts/shCore.js"></script>
  <script type="text/javascript" src="../../../scripts/shBrushCpp.js"></script>

  <!-- Conditional comment to apply opacity fix for IE #content background.
       Invalid CSS, but can be removed without harming design -->
  <!--[if gt IE 5]>
  <link rel="stylesheet" type="text/css" href="css/ie.css" media="screen, projection, tv " />
  <![endif]-->
</head>

<body>
<script type="text/javascript">SyntaxHighlighter.all();</script>
<div id="wrapper">
<div id="content">
<script type="text/javascript" src="../../../header.js"></script>
<div id="page">
<h3>MCU 8051 IDE &gt;&gt; Assembly</h3>
<p><b>指令集</b></p>
<hr size="1">
<p>
8051 Assembly Language Instructions
</p>

<table>
<tr>
  <th>Transfer</th>
  <th>Description</th>
</tr>
<tr>
  <td>MOV A, byte</td>
  <td>Move byte to accumulator</td>
</tr>
<tr>
  <td>MOV byte, A</td>
  <td>Move accumulator to byte</td>
</tr>
<tr>
  <td>MOV Rn, byte</td>
  <td>Move byte to register of current bank</td>
</tr>
<tr>
  <td>MOV direct, byte</td>
  <td>Move byte to internal RAM</td>
</tr>
<tr>
  <td>MOV @Rn, byte</td>
  <td>Move byte to internal RAM with address contained in Rn</td>
</tr>
<tr>
  <td>MOV DPTR, data16</td>
  <td>Move 16-bit data into data pointer</td>
</tr>
<tr>
  <td>MOVC A, @A + DPTR</td>
  <td>Move a byte (address at DPTR + A) into A register</td>
</tr>
<tr>
  <th>Stack</th>
  <th>Description</th>
</tr>
<tr>
  <td>PUSH byte</td>
  <td>Increment stack pointer, move byte on stack</td>
</tr>
<tr>
  <td>POP byte</td>
  <td>Move from stack to byte, decrement stack pointer</td>
</tr>
<tr>
  <th>Exchange</th>
  <th>Description</th>
</tr>
<tr>
  <td>XCH A, byte</td>
  <td>Exchange accumulator and byte</td>
</tr>
<tr>
  <td>XCHD A, byte</td>
  <td>Exchange low nibbles of accumulator and byte</td>
</tr>
<tr>
  <th>Arithmetic</th>
  <th>Description</th>
</tr>
<tr>
  <td>ADD A, byte</td>
  <td>Add accumulator to byte, put result in accumulator</td>
</tr>
<tr>
  <td>ADDC A, byte</td>
  <td>Add with carry</td>
</tr>
<tr>
  <td>SUBB A, byte</td>
  <td>Subtract with borrow</td>
</tr>
<tr>
  <td>INC A</td>
  <td>Increment accumulator</td>
</tr>
<tr>
  <td>INC byte</td>
  <td>Increment byte in memory</td>
</tr>
<tr>
  <td>INC DPTR</td>
  <td>Increment data pointer</td>
</tr>
<tr>
  <td>DEC A</td>
  <td>Decrement accumulator</td>
</tr>
<tr>
  <td>DEC byte</td>
  <td>Decrement byte in memory</td>
</tr>
<tr>
  <td>MUL AB</td>
  <td>Multiply accumulator by b register</td>
</tr>
<tr>
  <td>DIV AB</td>
  <td>Divide accumulator by b register</td>
</tr>
<tr>
  <td>DAA</td>
  <td>Decimally adjust the accumulator</td>
</tr>
<tr>
  <th>Logic</th>
  <th>Description</th>
</tr>
<tr>
  <td>ANL A, byte</td>
  <td>AND accumulator with byte, put result in accumulator</td>
</tr>
<tr>
  <td>ANL byte, A</td>
  <td>AND byte with accumulator, put result in byte</td>
</tr>
<tr>
  <td>ANL byte, #constant</td>
  <td>AND byte with constant, put result in byte</td>
</tr>
<tr>
  <td>ANL C, bit</td>
  <td>AND carry with bit, put result in carry</td>
</tr>
<tr>
  <td>ORL A, byte</td>
  <td>OR accumulator with byte, put result in accumulator</td>
</tr>
<tr>
  <td>ORL byte, A</td>
  <td>OR byte with accumulator, put result in byte</td>
</tr>
<tr>
  <td>ORL byte, #constant</td>
  <td>OR byte with constant, put result in byte</td>
</tr>
<tr>
  <td>ORL C, bit</td>
  <td>OR carry with bit, put result in carry</td>
</tr>
<tr>
  <td>XRL A, byte</td>
  <td>XOR accumulator with byte, put result in accumulator</td>
</tr>
<tr>
  <td>XRL byte, A</td>
  <td>XOR byte with accumulator, put result in byte</td>
</tr>
<tr>
  <td>XRL byte, #constant</td>
  <td>XOR byte with constant, put result in byte</td>
</tr>
<tr>
  <th>Bit Manipulation</th>
  <th>Description</th>
</tr>
<tr>
  <td>CLR A</td>
  <td>Clear all bits of accumulator</td>
</tr>
<tr>
  <td>CLR byte</td>
  <td>Clear all bits of byte</td>
</tr>
<tr>
  <td>CLR Rn</td>
  <td>Clear all bits of register in current bank</td>
</tr>
<tr>
  <td>CLR @Ri</td>
  <td>Clear all bits of byte pointed to by register</td>
</tr>
<tr>
  <td>CLR C</td>
  <td>Clear carry bit</td>
</tr>
<tr>
  <td>CLR bit</td>
  <td>Clear a bit-addressable RAM location or SFR</td>
</tr>
<tr>
  <td>RL A</td>
  <td>Rotate left accumulator</td>
</tr>
<tr>
  <td>RLC A</td>
  <td>Rotate left accumulator through carry</td>
</tr>
<tr>
  <td>RR A</td>
  <td>Rotate right accumulator</td>
</tr>
<tr>
  <td>RRC A</td>
  <td>Rotate right accumulator through carry</td>
</tr>
<tr>
  <td>SWAP A</td>
  <td>Swap the nibbles of accumulator</td>
</tr>
<tr>
  <td>CPL C</td>
  <td>Complement carry bit</td>
</tr>
<tr>
  <td>CPL bit</td>
  <td>Complement a bit-addressable RAM location or SFR</td>
</tr>
<tr>
  <td>CPL A</td>
  <td>2’s complement A</td>
</tr>
<tr>
  <td>SETB C</td>
  <td>Set carry bit</td>
</tr>
<tr>
  <td>SETB bit</td>
  <td>Set a bit-addressable RAM location or SFR</td>
</tr>
<tr>
  <th>Jump</th>
  <th>Description</th>
</tr>
<tr>
  <td>SJMP &lt;relative addr&gt;</td>
  <td>Short jump up to 127 bytes forward or 128 bytes back</td>
</tr>
<tr>
  <td>LJMP &lt;address 16&gt;</td>
  <td>Long jump to a 16-bit address</td>
</tr>
<tr>
  <td>AJMP &lt;address 11&gt;</td>
  <td>Absolute jump to within 2K of program memory</td>
</tr>
<tr>
  <td>JMP @A + DPTR</td>
  <td>Long indexed jump</td>
</tr>
<tr>
  <th>Conditional Jump</th>
  <th>Description</th>
</tr>
<tr>
  <td>JZ &lt;relative addr&gt;</th>
  <td>Jump if accumulator is zero</td>
</tr>
<tr>
  <td>JNZ &lt;relative addr&gt;</td>
  <td>Jump if accumulator is non-zero</td>
</tr>
<tr>
  <td>JC &lt;relative addr&gt;</td>
  <td>Jump if carry is set</td>
</tr>
<tr>
  <td>JNC &lt;relative addr&gt;</td>
  <td>Jump if carry is cleared</td>
</tr>
<tr>
  <td>JB &lt;bit&gt;, &lt;rel addr&gt;</td>
  <td>Jump if bit is set</td>
</tr>
<tr>
  <td>JNB &lt;bit&gt;, &lt;rel addr&gt;</td>
  <td>Jump if bit is cleared</td>
</tr>
<tr>
  <td>JBC &lt;bit&gt;, &lt;rel addr&gt;</td>
  <td>Jump if bit is set, clear bit</td>
</tr>
<tr>
  <td>CJNE A, direct, &lt;rel addr&gt;</td>
  <td>Compare accumulator and memory, jump if not equal</td>
</tr>
<tr>
  <td>CJNE A, #data &lt;rel addr&gt;</td>
  <td>Compare accumulator and data, jump if not equal</td>
</tr>
<tr>
  <td>CJNE Rn, #data &lt;rel addr&gt;</td>
  <td>Compare Rn and data, jump if not equal</td>
</tr>
<tr>
  <td>CJNE @Rn, #data &lt;rel addr&gt;</td>
  <td>Compare data and the byte pointed to by Rn, jump if not equal</td>
</tr>
<tr>
  <td>DJNZ Rn, &lt;rel addr&gt;</td>
  <td>Decrement Rn and jump if not zero</tr>
</tr>
<tr>
  <td>DJNZ direct, &lt;rel addr&gt;</td>
  <td>Decrement memory and jump if not zero</td>
</tr>
<tr>
  <th>Subroutine</th>
  <th>Description</th>
</tr>
<tr>
  <td>ACALL &lt;address 11&gt;</td>
  <td>Absolute call to within 2K of program memory</td>
</tr>
<tr>
  <td>LCALL &lt;address 16&gt;</td>
  <td>Long call to a 16-bit address</td>
</td>
<tr>
  <td>RET</td>
  <td>Return from subroutine</td>
</tr>
<tr>
  <td>RETI</td>
  <td>Return from interrupt</td>
</tr>
<tr>
  <th>Others</th>
  <th>Description</th>
</tr>
<tr>
  <td>NOP</td>
  <td>Do nothing</td>
</tr>
</table><br>

<p>
<br><a href="../../../mcu.htm">返回上一頁</a>
</p>

</div>
</div>
</div>
</body>
</html>

