<!--
 ____________________________________________________________
|                                                            |
|    DESIGN + Pat Heard { http://fullahead.org }             |
|      DATE + 2006.09.12                                     |
| COPYRIGHT + Free use if this notice is kept in place.      |
|____________________________________________________________|

-->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>司徒的教學網站</title>
  <meta http-lowast="content-type" content="application/xhtml+xml; charset=UTF-8" />
  <meta name="author" content="fullahead.org" />
  <meta name="keywords" content="XHTML, CSS, template, FullAhead" />
  <meta name="description" content="A valid, XHTML 1.0 template" />
  <meta name="robots" content="index, follow, noarchive" />
  <meta name="googlebot" content="noarchive" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes, minimum-scale=0.1, maximum-scale=100.0"/>

  <link rel="shortcut icon" href="../../../website.ico">
  <link rel="stylesheet" type="text/css" href="../../../styles/shCore.css" />
  <link rel="stylesheet" type="text/css" href="../../../styles/shThemeDefault.css" />
  <link rel="stylesheet" type="text/css" href="../../../css/html.css" media="screen, projection, tv " />
  <link rel="stylesheet" type="text/css" href="../../../css/layout.css" media="screen, projection, tv" />
  <link rel="stylesheet" type="text/css" href="../../../css/print.css" media="print" />
  
  <script type="text/javascript" src="../../../scripts/shCore.js"></script>
  <script type="text/javascript" src="../../../scripts/shBrushCpp.js"></script>

  <!-- Conditional comment to apply opacity fix for IE #content background.
       Invalid CSS, but can be removed without harming design -->
  <!--[if gt IE 5]>
  <link rel="stylesheet" type="text/css" href="css/ie.css" media="screen, projection, tv " />
  <![endif]-->
</head>

<body>
<script type="text/javascript">SyntaxHighlighter.all();</script>
<div id="wrapper">
<div id="content">
<script type="text/javascript" src="../../../header.js"></script>
<div id="page">
<h3>MCU8051IDE >> Assembly</h3>
<p><b>GPIO Input</b></p>
<hr size="1">
<p>
司徒接著將會介紹GPIO的輸入操作，學會GPIO的輸出、入操作是熟悉一顆單晶片的最佳途徑，GPIO可以延伸成各種傳輸的模擬，如：UART、I2C、SPI等介面，因此，基本功夫相當重要，使用者應對各種GPIO的寫法都要相當瞭解，這對往後的進階學習將會有很大的幫助。接著，看一下本次輸入練習的硬體電路圖，如下所示：<br>
<img src="gpio_input/1.jpg" class="maxSize"><br>
P0當作LED輸出顯示，而P1則是當作輸入用。
</p>

<p>
接著寫一個GPIO的輸入程式
</p>

<pre class="brush:cpp">
  led  equ p0

  key  equ p1
  key0 bit p1.0
  key1 bit p1.1
  key2 bit p1.2
  key3 bit p1.3
  key4 bit p1.4
  key5 bit p1.5
  key6 bit p1.6
  key7 bit p1.7

  .org 0x00
  jmp start

  .org 0x100
start:
  mov p0, #0ffh
loop1:
  mov a, p1
  cjne p1, #0aah, loop1
  mov p0, #55h
loop2:
  jnb p1.0, loop2
  mov p0, #0aah
  jmp $
  .end
</pre>

<p>
值得注意的是，8051的GPIO輸出、入方向不需做設定，將數值寫到GPIO就是輸出；而讀取GPIO就是輸入。
</p>

<p>
程式說明<br>
<table>
  <thead>
    <tr>
      <th>行數</th>
      <th>解說</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>相當於C語言的<b>#define</b>，定義led成P0</td>
    </tr>
    <tr>
      <td>4~11</td>
      <td>Bit位元定義，8051的P0~P3都是可以使用位元定義</td>
    </tr>
    <tr>
      <td>13~14</td>
      <td>
      <b>.org</b>指令定義接下來的程式碼擺放位址。程式一開始的執行位置是從0x00開始，接著就跳到start副程式，為何不接著繼續寫下去，而要做跳轉呢？這是因為前面的位置是保留給中斷向量使用的(如下表)，像0x00就是Reset向量，當MCU Reset後，MCU的IP會直接指到0x00的程式碼位置，所以程式就會從0x00開始執行，而下一個中斷向量是INT0，它的位址是0x03，如果使用者繼續寫程式而沒做跳轉時，當發生INT0中斷，程式將從0x03開始執行，因此，為了避免蓋到中斷向量，一般都是先做跳轉，雖然目前的程式沒有使用到INT0中斷，不過司徒的習慣還是維持中斷跳轉的習慣。
      </p>

      <p><b>中斷向量表</b><br>
      0x00: Reset<br>
      0x03: INT0<br>
      0x0b: Timer0<br>
      0x13: INT1<br>
      0x1b: Timer1<br>
      0x23: Serial<br>
      0x2b: Timer2<br>
      </td>
    </tr>
    <tr>
      <td>17</td>
      <td>Label代表的是一個程式碼記憶體位址</td>
    </tr>
    <tr>
      <td>18</td>
      <td>P0輸出0xff</td>
    </tr>
    <tr>
      <td>20~21</td>
      <td>判斷P1的輸入值是否為0xaa，如果不是，則跳轉到Loop1；如果是，則繼續往下執行</td>
    </tr>
    <tr>
      <td>24</td>
      <td>判斷P1.0是否為0，如果是，則跳轉到Loop2；如果不是，則繼續往下執行</td>
    </tr>
    <tr>
      <td>26</td>
      <td>$代表當下位址，所以此行的意思就是C語言的<b>while(1);</b></td>
    </tr>
    <tr>
      <td>27</td>
      <td><b>.end</b>指令告知編譯器，此行是程式碼結尾的地方</td>
    </tr>
  </tbody>
</table>

<p>
8051有四個I/O Port，分別是P0、P1、P2和P3，每個I/O都是8 Bits並且都可以Bit定址，位址如下所示：
</p>

<table>
  <thead>
    <tr>
      <th>Register</th>
      <th>Address</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>P0</td>
      <td>0x80</td>
    </tr>
      <tr>
      <td>P1</td>
      <td>0x90</td>
    </tr>
    <tr>
      <td>P2</td>
      <td>0xA0</td>
    </tr>
    <tr>
      <td>P3</td>
      <td>0xB0</td>
    </tr>
  </tbody>
</table>

<p>
此次範例使用到的指令
</p>

<table>
  <thead>
    <tr>
      <th>指令</th>
      <th>說明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>MOV direct, byte</td>
      <td>Move byte to internal RAM</td>
    </tr>
    <tr>
      <td>CJNE A, #data &lt;rel addr&gt;</td>
      <td>Compare accumulator and data, jump if not equal</td>
    </tr>
    <tr>
      <td>JNB &lt;bit&gt;, &lt;rel addr&gt;</td>
      <td>Jump if bit is cleared</td>
    </tr>
    <tr>
      <td>LJMP &lt;address 16&gt;</td>
      <td>Long jump to a 16-bit address</td>
    </tr>
  </tbody>
</table>

<p>
接著開啟MCU8051IDE，準備編譯、模擬上面的程式：<br>
<img src="gpio_input/2.jpg" class="maxSize">
</p>

<p>
新增專案<br>
<img src="gpio_input/3.jpg" class="maxSize">
</p>

<p>
輸入專案名稱和存放位置，MCU使用AT89S52即可，目前用不到XDATA和XCODE支援，可以先不選：<br>
<img src="gpio_input/4.jpg" class="maxSize">
</p>

<p>
如果資料夾不存在，則提示是否產生，選擇"是"即可<br>
<img src="gpio_input/5.jpg" class="maxSize">
</p>

<p>
接著輸入上面的GPIO輸出測試程式：<br>
<img src="gpio_input/6.jpg" class="maxSize">
</p>

<p>
接著編譯程式：Tools&rArr;Compile<br>
<img src="gpio_input/7.jpg" class="maxSize">
</p>

<p>
存檔<br>
<img src="gpio_input/8.jpg" class="maxSize">
</p>

<p>
加到專案<br>
<img src="gpio_input/9.jpg" class="maxSize">
</p>

<p>
編譯完成<br>
<img src="gpio_input/10.jpg" class="maxSize">
</p>

<p>
開啟LED模擬<br>
<img src="gpio_input/11.jpg" class="maxSize">
</p>

<p>
設定LED連接腳位並設定成<b>ON</b><br>
<img src="gpio_input/12.jpg" class="maxSize">
</p>

<p>
開啟Keypad模擬<br>
<img src="gpio_input/13.jpg" class="maxSize">
</p>

<p>
設定Keypad連接腳位<br>
<img src="gpio_input/14.jpg" class="maxSize">
</p>

<p>
關掉<b>Radio buttons</b>(否則同時間只能有一個操作)<br>
<img src="gpio_input/15.jpg" class="maxSize">
</p>

<p>
接著開始模擬程式<br>
<img src="gpio_input/16.jpg" class="maxSize">
</p>

<p>
Run<br>
<img src="gpio_input/17.jpg" class="maxSize">
</p>

<p>
P1的值必須是0xaa，否則跳轉到Loop1<br>
<img src="gpio_input/18.jpg" class="maxSize">
</p>

<p>
P0輸出0x55<br>
P1.1的值必須是1，否則跳轉到Loop2<br>
<img src="gpio_input/19.jpg" class="maxSize">
</p>

<p>
P0輸出0xaa<br>
無限迴圈<br>
<img src="gpio_input/20.jpg" class="maxSize">
</p>

<p>
<br><a href="../../../mcu.htm">返回上一頁</a>
</p>

</div>
</div>
</div>
</body>
</html>
