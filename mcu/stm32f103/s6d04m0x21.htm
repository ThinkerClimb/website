<!--
 ____________________________________________________________
|                                                            |
|    DESIGN + Pat Heard { http://fullahead.org }             |
|      DATE + 2006.09.12                                     |
| COPYRIGHT + Free use if this notice is kept in place.      |
|____________________________________________________________|

-->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>司徒的教學網站</title>
  <meta http-lowast="content-type" content="application/xhtml+xml; charset=UTF-8" />
  <meta name="author" content="fullahead.org" />
  <meta name="keywords" content="XHTML, CSS, template, FullAhead" />
  <meta name="description" content="A valid, XHTML 1.0 template" />
  <meta name="robots" content="index, follow, noarchive" />
  <meta name="googlebot" content="noarchive" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes, minimum-scale=0.1, maximum-scale=100.0"/>

  <link rel="shortcut icon" href="../../website.ico">
  <link rel="stylesheet" type="text/css" href="../../styles/shCore.css" />
  <link rel="stylesheet" type="text/css" href="../../styles/shThemeDefault.css" />
  <link rel="stylesheet" type="text/css" href="../../css/html.css" media="screen, projection, tv " />
  <link rel="stylesheet" type="text/css" href="../../css/layout.css" media="screen, projection, tv" />
  <link rel="stylesheet" type="text/css" href="../../css/print.css" media="print" />
  
  <script type="text/javascript" src="../../scripts/shCore.js"></script>
  <script type="text/javascript" src="../../scripts/shBrushCpp.js"></script>

  <!-- Conditional comment to apply opacity fix for IE #content background.
       Invalid CSS, but can be removed without harming design -->
  <!--[if gt IE 5]>
  <link rel="stylesheet" type="text/css" href="css/ie.css" media="screen, projection, tv " />
  <![endif]-->
</head>

<body>
<script type="text/javascript">SyntaxHighlighter.all();</script>
<div id="wrapper">
<div id="content">
<script type="text/javascript" src="../../header.js"></script>
<div id="page">
<h3>STM32F103</h3>
<p><b>驅動2.8吋IPS 320x240顯示屏(S6D04M0X21)</b></p>
<hr size="1">
<p>
電路圖：<br>
<img src="s6d04m0x21/1.jpg" class="maxSize">
</p>

<p>
銲接圖：<br>
<img src="s6d04m0x21/2.jpg" class="maxSize"><br>
<img src="s6d04m0x21/3.jpg" class="maxSize"><br>
<img src="s6d04m0x21/4.jpg" class="maxSize"><br>
<img src="s6d04m0x21/5.jpg" class="maxSize"><br>
<img src="s6d04m0x21/6.jpg" class="maxSize">
</p>

<p>
雖然司徒沒有成功點亮這個IPS屏，不過司徒還是將整個測試的程式碼貼出來，將來有需要時可以參考，使用者如果要拿去測試時，請注意這個測試程式碼，有可能也是點不亮。
</p>

<p>
C語言測試程式
</p>

<pre class="brush:cpp">
/*=============================================================
  This tutorial is based on STM32F103 chip 
  and teach user how to drive IPS screen (S6D04M0X21)
  All source code are free and can be used at any purpose
  2016/04/12
  Steward Fu
=============================================================*/
#include "stm32f10x_lib.h"

GPIO_InitTypeDef GPIO_InitStructure;
ErrorStatus HSEStartUpStatus;

void RCC_Configuration(void);
void NVIC_Configuration(void);
void delayms(vu32 nCount);
void lcd_write_cmd(unsigned int cmd);
void lcd_write_data(unsigned int dat);

void lcd_reset(void)
{
  GPIO_ResetBits(GPIOA, GPIO_Pin_3);
  delayms(50);
  GPIO_SetBits(GPIOA, GPIO_Pin_3);
  delayms(10);
}

void lcd_write_cmd(unsigned int cmd){
  // RS = 0;
  GPIO_ResetBits(GPIOA, GPIO_Pin_11);
  // RDB = 1;
  GPIO_SetBits(GPIOA, GPIO_Pin_15);
  // WRB = 1;
  GPIO_SetBits(GPIOA, GPIO_Pin_12);
  // CSB = 0;
  GPIO_ResetBits(GPIOA, GPIO_Pin_8);
  
  if(cmd &amp; 0x0001){GPIO_SetBits(  GPIOB, GPIO_Pin_12);}
  else{            GPIO_ResetBits(GPIOB, GPIO_Pin_12);}
  if(cmd &amp; 0x0002){GPIO_SetBits(  GPIOB, GPIO_Pin_13);}
  else{            GPIO_ResetBits(GPIOB, GPIO_Pin_13);}
  if(cmd &amp; 0x0004){GPIO_SetBits(  GPIOB, GPIO_Pin_14);}
  else{            GPIO_ResetBits(GPIOB, GPIO_Pin_14);}
  if(cmd &amp; 0x0008){GPIO_SetBits(  GPIOB, GPIO_Pin_15);}
  else{            GPIO_ResetBits(GPIOB, GPIO_Pin_15);}
  if(cmd &amp; 0x0010){GPIO_SetBits(  GPIOB, GPIO_Pin_4);}
  else{            GPIO_ResetBits(GPIOB, GPIO_Pin_4);}
  if(cmd &amp; 0x0020){GPIO_SetBits(  GPIOC, GPIO_Pin_15);}
  else{            GPIO_ResetBits(GPIOC, GPIO_Pin_15);}
  if(cmd &amp; 0x0040){GPIO_SetBits(  GPIOC, GPIO_Pin_14);}
  else{            GPIO_ResetBits(GPIOC, GPIO_Pin_14);}
  if(cmd &amp; 0x0080){GPIO_SetBits(  GPIOC, GPIO_Pin_13);}
  else{            GPIO_ResetBits(GPIOC, GPIO_Pin_13);}
  if(cmd &amp; 0x0100){GPIO_SetBits(  GPIOB, GPIO_Pin_5);}
  else{            GPIO_ResetBits(GPIOB, GPIO_Pin_5);}
  if(cmd &amp; 0x0200){GPIO_SetBits(  GPIOB, GPIO_Pin_6);}
  else{            GPIO_ResetBits(GPIOB, GPIO_Pin_6);}
  if(cmd &amp; 0x0400){GPIO_SetBits(  GPIOB, GPIO_Pin_7);}
  else{            GPIO_ResetBits(GPIOB, GPIO_Pin_7);}
  if(cmd &amp; 0x0800){GPIO_SetBits(  GPIOB, GPIO_Pin_8);}
  else{            GPIO_ResetBits(GPIOB, GPIO_Pin_8);}
  if(cmd &amp; 0x1000){GPIO_SetBits(  GPIOB, GPIO_Pin_9);}
  else{            GPIO_ResetBits(GPIOB, GPIO_Pin_9);}
  if(cmd &amp; 0x2000){GPIO_SetBits(  GPIOA, GPIO_Pin_2);}
  else{            GPIO_ResetBits(GPIOA, GPIO_Pin_2);}
  if(cmd &amp; 0x4000){GPIO_SetBits(  GPIOA, GPIO_Pin_1);}
  else{            GPIO_ResetBits(GPIOA, GPIO_Pin_1);}
  if(cmd &amp; 0x8000){GPIO_SetBits(  GPIOA, GPIO_Pin_0);}
  else{            GPIO_ResetBits(GPIOA, GPIO_Pin_0);}

  // WRB = 0;
  GPIO_ResetBits(GPIOA, GPIO_Pin_12);
  // WRB = 1;
  GPIO_SetBits(GPIOA, GPIO_Pin_12);
  // CSB = 1;
  GPIO_SetBits(GPIOA, GPIO_Pin_8);
}

void lcd_write_data(unsigned int dat){
  // RS = 1;
  GPIO_SetBits(GPIOA, GPIO_Pin_11);
  // RDB = 1;
  GPIO_SetBits(GPIOA, GPIO_Pin_15);
  // WRB = 1;
  GPIO_SetBits(GPIOA, GPIO_Pin_12);
  // CSB = 0;
  GPIO_ResetBits(GPIOA, GPIO_Pin_8);
  
  if(dat &amp; 0x0001){GPIO_SetBits(  GPIOB, GPIO_Pin_12);}
  else{            GPIO_ResetBits(GPIOB, GPIO_Pin_12);}
  if(dat &amp; 0x0002){GPIO_SetBits(  GPIOB, GPIO_Pin_13);}
  else{            GPIO_ResetBits(GPIOB, GPIO_Pin_13);}
  if(dat &amp; 0x0004){GPIO_SetBits(  GPIOB, GPIO_Pin_14);}
  else{            GPIO_ResetBits(GPIOB, GPIO_Pin_14);}
  if(dat &amp; 0x0008){GPIO_SetBits(  GPIOB, GPIO_Pin_15);}
  else{            GPIO_ResetBits(GPIOB, GPIO_Pin_15);}
  if(dat &amp; 0x0010){GPIO_SetBits(  GPIOB, GPIO_Pin_4);}
  else{            GPIO_ResetBits(GPIOB, GPIO_Pin_4);}
  if(dat &amp; 0x0020){GPIO_SetBits(  GPIOC, GPIO_Pin_15);}
  else{            GPIO_ResetBits(GPIOC, GPIO_Pin_15);}
  if(dat &amp; 0x0040){GPIO_SetBits(  GPIOC, GPIO_Pin_14);}
  else{            GPIO_ResetBits(GPIOC, GPIO_Pin_14);}
  if(dat &amp; 0x0080){GPIO_SetBits(  GPIOC, GPIO_Pin_13);}
  else{            GPIO_ResetBits(GPIOC, GPIO_Pin_13);}
  if(dat &amp; 0x0100){GPIO_SetBits(  GPIOB, GPIO_Pin_5);}
  else{            GPIO_ResetBits(GPIOB, GPIO_Pin_5);}
  if(dat &amp; 0x0200){GPIO_SetBits(  GPIOB, GPIO_Pin_6);}
  else{            GPIO_ResetBits(GPIOB, GPIO_Pin_6);}
  if(dat &amp; 0x0400){GPIO_SetBits(  GPIOB, GPIO_Pin_7);}
  else{            GPIO_ResetBits(GPIOB, GPIO_Pin_7);}
  if(dat &amp; 0x0800){GPIO_SetBits(  GPIOB, GPIO_Pin_8);}
  else{            GPIO_ResetBits(GPIOB, GPIO_Pin_8);}
  if(dat &amp; 0x1000){GPIO_SetBits(  GPIOB, GPIO_Pin_9);}
  else{            GPIO_ResetBits(GPIOB, GPIO_Pin_9);}
  if(dat &amp; 0x2000){GPIO_SetBits(  GPIOA, GPIO_Pin_2);}
  else{            GPIO_ResetBits(GPIOA, GPIO_Pin_2);}
  if(dat &amp; 0x4000){GPIO_SetBits(  GPIOA, GPIO_Pin_1);}
  else{            GPIO_ResetBits(GPIOA, GPIO_Pin_1);}
  if(dat &amp; 0x8000){GPIO_SetBits(  GPIOA, GPIO_Pin_0);}
  else{            GPIO_ResetBits(GPIOA, GPIO_Pin_0);}

  // WRB = 0;
  GPIO_ResetBits(GPIOA, GPIO_Pin_12);
  // WRB = 1;
  GPIO_SetBits(GPIOA, GPIO_Pin_12);
  // CSB = 1;
  GPIO_SetBits(GPIOA, GPIO_Pin_8);
}

void lcd_set_color(unsigned int color)
{
  unsigned int i, j;

  lcd_write_cmd(0x002a);    
  lcd_write_data(0x0000);
  lcd_write_data(0x0000);
  lcd_write_data(0x0000);
  lcd_write_data(0x00ef);  

  lcd_write_cmd(0x002b);    
  lcd_write_data(0x0000);
  lcd_write_data(0x0000);
  lcd_write_data(0x0001);
  lcd_write_data(0x003f);
  lcd_write_cmd(0x002c);

  for(i=0; i&lt;240; i++){
    for (j=0; j&lt;320; j++){
      lcd_write_data(color);
    }
  }
}

void lcd_init(void)
{
  delayms(120);  
  lcd_write_cmd(0x0001);
  delayms(120);

  lcd_write_cmd(0x00f0);    
  lcd_write_data(0x005a); 
  lcd_write_data(0x005a);

  lcd_write_cmd(0x00f3);    
  lcd_write_data(0x0000); 

  lcd_write_cmd(0x00ff);    
  lcd_write_data(0x0030); 
  lcd_write_data(0x0000);
  lcd_write_data(0x0000); 
  lcd_write_data(0x0040); 

  lcd_write_cmd(0x0011);
  delayms(120);

  lcd_write_cmd(0x00f3);
  lcd_write_data(0x0001);    
  lcd_write_data(0x0026);
  lcd_write_data(0x0026);
  lcd_write_data(0x0007); 
  lcd_write_data(0x0011);//*****//
  lcd_write_data(0x0057);
  lcd_write_data(0x0057); 
  lcd_write_data(0x002c); 

  lcd_write_cmd(0x00f4);    
  lcd_write_data(0x0060);//*****//
  lcd_write_data(0x0060);//*****//
  lcd_write_data(0x006F);//*****//
  lcd_write_data(0x006F);//*****// 
  lcd_write_data(0x0044);

  lcd_write_cmd(0x00f5);    
  lcd_write_data(0x0012);
  lcd_write_data(0x0011);
  lcd_write_data(0x0003);
  lcd_write_data(0x00f0); 
  lcd_write_data(0x0030);
  lcd_write_data(0x001f);

  delayms(10);
  lcd_write_cmd(0x00f3);    
  lcd_write_data(0x0003);
  delayms(20);

  lcd_write_cmd(0x00ff);    
  lcd_write_data(0x0030); 
  lcd_write_data(0x0000);
  lcd_write_data(0x0000); 
  lcd_write_data(0x0070);  
  delayms(20);

  lcd_write_cmd(0x00f3);    
  lcd_write_data(0x000f);

  lcd_write_cmd(0x00ff);    
  lcd_write_data(0x0030); 
  lcd_write_data(0x0000);
  lcd_write_data(0x0000); 
  lcd_write_data(0x0078);    
  delayms(20);

  lcd_write_cmd(0x00f3);    
  lcd_write_data(0x001f);

  lcd_write_cmd(0x00ff);    
  lcd_write_data(0x0000); 
  lcd_write_data(0x0000);
  lcd_write_data(0x0000); 
  lcd_write_data(0x0078);  

  delayms(20);
  lcd_write_cmd(0x00f3);    
  lcd_write_data(0x001f); 
  delayms(40); 

          
  lcd_write_cmd(0x00f3);    
  lcd_write_data(0x00ff);//changed
  lcd_write_data(0x0026);
  lcd_write_data(0x0026);
  lcd_write_data(0x0007);//changed 
  lcd_write_data(0x0055);
  lcd_write_data(0x0057);
  lcd_write_data(0x0057); 
  lcd_write_data(0x002c); 

  delayms(50);  
  lcd_write_cmd(0x0011);
  delayms(100); 

  //initializing sequence         
  lcd_write_cmd(0x00f2);    
  lcd_write_data(0x0013);
  lcd_write_data(0x0013);
  lcd_write_data(0x0001);
  lcd_write_data(0x0008); 
  lcd_write_data(0x0008);
  lcd_write_data(0x0008); 
  lcd_write_data(0x0008); 
  lcd_write_data(0x0010); 
  lcd_write_data(0x0000);//changed
  lcd_write_data(0x0010);
  lcd_write_data(0x0010);

  lcd_write_cmd(0x00fd);    
  lcd_write_data(0x0055); 

  lcd_write_cmd(0x0035); 
  lcd_write_data(0x0000);    

  lcd_write_cmd(0x0036);    
  lcd_write_data(0x0048); 

  lcd_write_cmd(0x003a);    
  lcd_write_data(0x0055); 

  lcd_write_cmd(0x00fe);    
  lcd_write_data(0x0016);
  lcd_write_data(0x0016);
  lcd_write_data(0x0028);
  lcd_write_data(0x0000); 
  lcd_write_data(0x0000);
  lcd_write_data(0x0006); 
         
  lcd_write_cmd(0x00f6);    
  lcd_write_data(0x0010);
  lcd_write_data(0x0080);
  lcd_write_data(0x0000);
  lcd_write_data(0x0010);   
         
  lcd_write_cmd(0x0051);    
  lcd_write_data(0x00ff);   
         
  lcd_write_cmd(0x0053);    
  lcd_write_data(0x0000);   
         
  lcd_write_cmd(0x0055);    
  lcd_write_data(0x0000);   
         
  lcd_write_cmd(0x005e);    
  lcd_write_data(0x0000);   
         
  lcd_write_cmd(0x00ca);    
  lcd_write_data(0x0080);
  lcd_write_data(0x0080);
  lcd_write_data(0x0020);  

  lcd_write_cmd(0x00cb);    
  lcd_write_data(0x0001); 

  //gamma setting          
  lcd_write_cmd(0x00f7);    
  lcd_write_data(0x0092);
  lcd_write_data(0x001a);
  lcd_write_data(0x001e);
  lcd_write_data(0x001a); 
  lcd_write_data(0x001d);
  lcd_write_data(0x001d); 
  lcd_write_data(0x001e); 
  lcd_write_data(0x0026); 
  lcd_write_data(0x001c);
  lcd_write_data(0x001c);
  lcd_write_data(0x0024);
  lcd_write_data(0x001b); 
  lcd_write_data(0x0009);
  lcd_write_data(0x0011);
  lcd_write_data(0x0018);

  lcd_write_cmd(0x00f8);    
  lcd_write_data(0x001a);
  lcd_write_data(0x0000);
  lcd_write_data(0x001e);
  lcd_write_data(0x001a); 
  lcd_write_data(0x001d);
  lcd_write_data(0x001a); 
  lcd_write_data(0x001d); 
  lcd_write_data(0x0024); 
  lcd_write_data(0x001e);
  lcd_write_data(0x001f);
  lcd_write_data(0x0027);
  lcd_write_data(0x001e); 
  lcd_write_data(0x000a);
  lcd_write_data(0x0011);
  lcd_write_data(0x0011);

  lcd_write_cmd(0x00f9);    
  lcd_write_data(0x0086);
  lcd_write_data(0x001a);
  lcd_write_data(0x0010);
  lcd_write_data(0x0010); 
  lcd_write_data(0x001d);
  lcd_write_data(0x001b); 
  lcd_write_data(0x001f); 
  lcd_write_data(0x0027); 
  lcd_write_data(0x001b);
  lcd_write_data(0x001f);
  lcd_write_data(0x0027);
  lcd_write_data(0x001e); 
  lcd_write_data(0x000a);
  lcd_write_data(0x0011);
  lcd_write_data(0x0018);

  lcd_write_cmd(0x00fa);    
  lcd_write_data(0x001a);
  lcd_write_data(0x0000);
  lcd_write_data(0x001e);
  lcd_write_data(0x001a); 
  lcd_write_data(0x001d);
  lcd_write_data(0x001a); 
  lcd_write_data(0x001d); 
  lcd_write_data(0x0024); 
  lcd_write_data(0x001e);
  lcd_write_data(0x001f);
  lcd_write_data(0x0027);
  lcd_write_data(0x001e); 
  lcd_write_data(0x000a);
  lcd_write_data(0x0011);
  lcd_write_data(0x0011);

  lcd_write_cmd(0x00fb);    
  lcd_write_data(0x0080);
  lcd_write_data(0x001a);
  lcd_write_data(0x001e);
  lcd_write_data(0x001a); 
  lcd_write_data(0x001d);
  lcd_write_data(0x001b); 
  lcd_write_data(0x001e); 
  lcd_write_data(0x0026); 
  lcd_write_data(0x0017);
  lcd_write_data(0x001a);
  lcd_write_data(0x001d);
  lcd_write_data(0x0014); 
  lcd_write_data(0x0000);
  lcd_write_data(0x0011);
  lcd_write_data(0x0018);

  lcd_write_cmd(0x00fc);    
  lcd_write_data(0x001a);
  lcd_write_data(0x0000);
  lcd_write_data(0x001e);
  lcd_write_data(0x001a); 
  lcd_write_data(0x001d);
  lcd_write_data(0x001a); 
  lcd_write_data(0x001d); 
  lcd_write_data(0x0024); 
  lcd_write_data(0x001e);
  lcd_write_data(0x001f);
  lcd_write_data(0x0027);
  lcd_write_data(0x001e); 
  lcd_write_data(0x000a);
  lcd_write_data(0x0011);
  lcd_write_data(0x0011);

  // address set  
  lcd_write_cmd(0x002a);    
  lcd_write_data(0x0000);
  lcd_write_data(0x0000);
  lcd_write_data(0x0000);
  lcd_write_data(0x00ef);  

  lcd_write_cmd(0x002b);    
  lcd_write_data(0x0000);
  lcd_write_data(0x0000);
  lcd_write_data(0x0001);
  lcd_write_data(0x003f);

  // display on 
  lcd_write_cmd(0x0029); 

  // RAM write
  lcd_write_cmd(0x002c); 
}
int main(void)
{
  GPIO_InitTypeDef structGPIO;

  RCC_Configuration();
  NVIC_Configuration();
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);

  GPIO_StructInit(&amp;structGPIO);
  structGPIO.GPIO_Mode = GPIO_Mode_Out_PP;
  GPIO_Init(GPIOA, &amp;structGPIO);
  GPIO_Init(GPIOB, &amp;structGPIO);
  GPIO_Init(GPIOC, &amp;structGPIO);
 
  GPIO_ResetBits(GPIOB, GPIO_Pin_3);
  lcd_reset();
  lcd_init();
  while(1){
    lcd_set_color(0xf800); //display red
    lcd_set_color(0x07e0); //display blue
    lcd_set_color(0x001f); //display blue
  }
}

void RCC_Configuration(void)
{
  // RCC system reset(for debug purpose)
  RCC_DeInit();

  // Enable HSE
  RCC_HSEConfig(RCC_HSE_ON);

  // Wait till HSE is ready
  HSEStartUpStatus = RCC_WaitForHSEStartUp();

  if(HSEStartUpStatus == SUCCESS){
    // Enable Prefetch Buffer
    FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);

    // Flash 2 wait state
    FLASH_SetLatency(FLASH_Latency_2);

    // HCLK = SYSCLK
    RCC_HCLKConfig(RCC_SYSCLK_Div1); 
  
    // PCLK2 = HCLK
    RCC_PCLK2Config(RCC_HCLK_Div1); 

    // PCLK1 = HCLK/2
    RCC_PCLK1Config(RCC_HCLK_Div2);

    // PLLCLK = 8MHz * 9 = 72 MHz
    RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);

    // Enable PLL
    RCC_PLLCmd(ENABLE);

    // Wait till PLL is ready
    while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET){
    }

    // Select PLL as system clock source
    RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);

    // Wait till PLL is used as system clock source
    while(RCC_GetSYSCLKSource() != 0x08){
    }
  }
}

void NVIC_Configuration(void)
{
#ifdef  VECT_TAB_RAM  
  // Set the Vector Table base location at 0x20000000
  NVIC_SetVectorTable(NVIC_VectTab_RAM, 0x0); 
#else  // VECT_TAB_FLASH
  // Set the Vector Table base location at 0x08000000
  NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x0);   
#endif
}

void delayms(unsigned long ms)
{
  unsigned long i;
  RCC_ClocksTypeDef RCC_Clocks;

  RCC_GetClocksFreq(&amp;RCC_Clocks);
  i = ms * (RCC_Clocks.SYSCLK_Frequency 20);
  for(; i!=0; i--);
}
</pre><br>

<p>
Assembly語言測試程式
</p>

<pre class="brush:cpp">
  @ This tutorial is based on STM32F103 chip 
  @ and teach user how to drive IPS screen (S6D04M0X21)
  @ All source code are free and can be used at any purpose
  @ 2016/03/21
  @ Steward Fu
  .thumb
  .cpu cortex-m3
  .syntax unified

  .equ GPIOA_CRL,   0x40010800
  .equ GPIOA_CRH,   0x40010804
  .equ GPIOA_ODR,   0x4001080c
  .equ GPIOB_CRL,   0x40010c00
  .equ GPIOB_CRH,   0x40010c04
  .equ GPIOB_ODR,   0x40010c0c
  .equ GPIOC_CRL,   0x40011000
  .equ GPIOC_CRH,   0x40011004
  .equ GPIOC_ODR,   0x4001100c
  .equ RCC_APB2ENR, 0x40021018
  .equ STACKINIT,   0x20005000
  .equ DELAY,       8000

  .macro _lcd_write_cmd arg:req
    ldr r0, =\arg
    bl lcd_write_cmd
  .endm
  
  .macro _lcd_write_data arg:req
    ldr r0, =\arg
    bl lcd_write_data
  .endm

  @ pa8
  .macro _clr_cs
    ldr r1, =GPIOA_ODR
    ldr r2, [r1]
    ldr r3, =0xfeff
    and r2, r3
    str r2, [r1]
  .endm

  @ pa8
  .macro _set_cs
    ldr r1, =GPIOA_ODR
    ldr r2, [r1]
    orr r2, #0x0100
    str r2, [r1] 
  .endm

  @ pa11
  .macro _clr_rs
    ldr r1, =GPIOA_ODR
    ldr r2, [r1]
    ldr r3, =0xf7ff
    and r2, r3
    str r2, [r1] 
  .endm

  @ pa11
  .macro _set_rs
    ldr r1, =GPIOA_ODR
    ldr r2, [r1]
    orr r2, #0x0800
    str r2, [r1] 
  .endm

  @ pa12
  .macro _clr_wr
    ldr r1, =GPIOA_ODR
    ldr r2, [r1]
    ldr r3, =0xefff
    and r2, r3
    str r2, [r1] 
  .endm

  @ pa12
  .macro _set_wr
    ldr r1, =GPIOA_ODR
    ldr r2, [r1]
    orr r2, #0x1000
    str r2, [r1] 
  .endm

  @ pa15
  .macro _clr_rd
    ldr r1, =GPIOA_ODR
    ldr r2, [r1]
    ldr r3, =0x7fff
    and r2, r3
    str r2, [r1] 
  .endm

  @ pa15
  .macro _set_rd
    ldr r1, =GPIOA_ODR
    ldr r2, [r1]
    orr r2, #0x8000
    str r2, [r1]
  .endm
  
  @ pb3
  .macro _clr_mode
    ldr r1, =GPIOB_ODR
    ldr r2, [r1]
    ldr r3, =0xfff7
    and r2, r3
    str r2, [r1] 
  .endm

  @ pb3
  .macro _set_mode
    ldr r1, =GPIOB_ODR
    ldr r2, [r1]
    orr r2, #0x0008
    str r2, [r1] 
  .endm
  
  @ pa3
  .macro _clr_rst
    ldr r1, =GPIOA_ODR
    ldr r2, [r1]
    ldr r3, =0xfff7
    and r2, r3
    str r2, [r1] 
  .endm

  @ pa3
  .macro _set_rst
    ldr r1, =GPIOA_ODR
    ldr r2, [r1]
    orr r2, #0x0008
    str r2, [r1] 
  .endm

  .macro _delay_ms arg:req
    ldr r0, =\arg
    bl delay_ms
  .endm

  .macro _lcd_put_bus_data
  @ DB16~DB0: 
  @ a0, a1, a2, b9, b8, b7, b6, b5, c13, c14, c15, b4, b15, b14, b13, b12
  @ 15, 14, 13, 12, 11, 10, 9,  8,  7,   6,   5,   4,  3,   2,   1,   0
  mov r2, #0 @ port a
  mov r3, #0 @ port b
  mov r4, #0 @ port c
  @ a2
  mov r1, r0
  lsr r1, #11
  and r1, #4
  orr r2, r1
  
  @ a1
  mov r1, r0
  lsr r1, #13
  and r1, #2
  orr r2, r1
  
  @ a0
  mov r1, r0
  lsr r1, #15
  and r1, #1
  orr r2, r1
  
  @ b15~b12
  mov r1, r0
  lsl r1, #12
  and r1, #0xf000
  orr r3, r1
  
  @ b4
  mov r1, r0
  and r1, #0x10
  orr r3, r1
  
  @ b9~b5
  mov r1, r0
  lsr r1, #3
  and r1, #0x3e0
  orr r3, r1
  
  @ c13
  mov r1, r0
  lsl r1, #6
  and r1, #0x2000
  orr r4, r1

  @ c14
  mov r1, r0
  lsl r1, #8
  and r1, #0x4000
  orr r4, r1

  @ c15
  mov r1, r0
  lsl r1, #10
  and r1, #0x8000
  orr r4, r1

  @ port a
  ldr r0, =GPIOA_ODR
  ldr r1, [r0]
  ldr r5, =0xfff8
  and r1, r5
  orr r1, r2
  str r1, [r0]

  @ port b
  ldr r0, =GPIOB_ODR
  ldr r1, [r0]
  ldr r5, =0x0c0f
  and r1, r5
  orr r1, r3
  str r1, [r0]

  @ port c
  ldr r0, =GPIOC_ODR
  ldr r1, [r0]
  ldr r5, =0x1fff
  and r1, r5
  orr r1, r4
  str r1, [r0]
  .endm

  .section .text
  .org 0x0
  .type vectors, %object
  .size vectors, 268
vectors:
  .word STACKINIT
  .word _start

  .align 2
  .thumb_func
  .global _start
_start:
  bl gpio_init
  bl lcd_reset
  bl lcd_init
  bl lcd_fill_color
halt:
  bl blink_led
  b halt

  .align 2
  .thumb_func
gpio_init:
  push {lr}
  ldr r0, =0x0000001c
  ldr r1, =RCC_APB2ENR
  str r0, [r1]
  
  ldr r0, =0x33333333
  ldr r1, =GPIOA_CRH
  str r0, [r1]

  ldr r0, =0x33333333
  ldr r1, =GPIOA_CRL
  str r0, [r1]

  ldr r1, =GPIOB_CRL
  str r0, [r1]

  ldr r1, =GPIOB_CRH
  str r0, [r1]

  ldr r1, =GPIOC_CRL
  str r0, [r1]

  ldr r1, =GPIOC_CRH
  str r0, [r1]

  pop {pc}

  .align 2
  .thumb_func
lcd_reset:
  push {lr}
  @ init gpio
  ldr r0, =0xffffffff
  ldr r1, =GPIOA_ODR
  str r0, [r1]
  ldr r1, =GPIOB_ODR
  str r0, [r1]
  ldr r1, =GPIOC_ODR
  str r0, [r1]
  @ reset lcd
  _clr_mode
  _clr_rst
  _delay_ms 50
  _set_rst
  _delay_ms 50
  pop {pc}

  .align 2
  .thumb_func
lcd_fill_color:
  push {lr}
  _lcd_write_cmd 0x002a
  _lcd_write_data 0x0000
  _lcd_write_data 0x0000
  _lcd_write_data 0x0000
  _lcd_write_data 0x00ef
  
  _lcd_write_cmd 0x002b
  _lcd_write_data 0x0000
  _lcd_write_data 0x0000
  _lcd_write_data 0x0001
  _lcd_write_data 0x003f

  _lcd_write_cmd 0x002c
  ldr r0, =32000
lcd_fill_color_1:
  push {r0}
  _lcd_write_data 0xf800
  pop {r0}
  sub r0, #1
  cmp r0, #0
  bne lcd_fill_color_1
  pop {pc}

  .align 2
  .thumb_func
lcd_init:
  push {lr}
  _delay_ms 120  
  _lcd_write_cmd 0x0001
  _delay_ms 120

  _lcd_write_cmd 0x00f0    
  _lcd_write_data 0x005a 
  _lcd_write_data 0x005a

  _lcd_write_cmd 0x00f3    
  _lcd_write_data 0x0000 

  _lcd_write_cmd 0x00ff    
  _lcd_write_data 0x0030 
  _lcd_write_data 0x0000
  _lcd_write_data 0x0000 
  _lcd_write_data 0x0040 

  _lcd_write_cmd 0x0011
  _delay_ms 120

  _lcd_write_cmd 0x00f3
  _lcd_write_data 0x0001    
  _lcd_write_data 0x0026
  _lcd_write_data 0x0026
  _lcd_write_data 0x0007 
  _lcd_write_data 0x0011
  _lcd_write_data 0x0057
  _lcd_write_data 0x0057 
  _lcd_write_data 0x002c 

  _lcd_write_cmd 0x00f4    
  _lcd_write_data 0x0060
  _lcd_write_data 0x0060
  _lcd_write_data 0x006f
  _lcd_write_data 0x006f
  _lcd_write_data 0x0044

  _lcd_write_cmd 0x00f5    
  _lcd_write_data 0x0012
  _lcd_write_data 0x0011
  _lcd_write_data 0x0003
  _lcd_write_data 0x00f0 
  _lcd_write_data 0x0030
  _lcd_write_data 0x001f

  _delay_ms 10
  _lcd_write_cmd 0x00f3    
  _lcd_write_data 0x0003
  _delay_ms 20

  _lcd_write_cmd 0x00ff    
  _lcd_write_data 0x0030 
  _lcd_write_data 0x0000
  _lcd_write_data 0x0000 
  _lcd_write_data 0x0070  
  _delay_ms 20

  _lcd_write_cmd 0x00f3    
  _lcd_write_data 0x000f

  _lcd_write_cmd 0x00ff    
  _lcd_write_data 0x0030 
  _lcd_write_data 0x0000
  _lcd_write_data 0x0000 
  _lcd_write_data 0x0078    
  _delay_ms 20

  _lcd_write_cmd 0x00f3    
  _lcd_write_data 0x001f

  _lcd_write_cmd 0x00ff    
  _lcd_write_data 0x0000 
  _lcd_write_data 0x0000
  _lcd_write_data 0x0000 
  _lcd_write_data 0x0078  

  _delay_ms 20
  _lcd_write_cmd 0x00f3    
  _lcd_write_data 0x001f 
  _delay_ms 40 

  _lcd_write_cmd 0x00f3    
  _lcd_write_data 0x00ff
  _lcd_write_data 0x0026
  _lcd_write_data 0x0026
  _lcd_write_data 0x0007
  _lcd_write_data 0x0055
  _lcd_write_data 0x0057
  _lcd_write_data 0x0057 
  _lcd_write_data 0x002c 

  _delay_ms 50  
  _lcd_write_cmd 0x0011
  _delay_ms 100 
         
  _lcd_write_cmd 0x00f2    
  _lcd_write_data 0x0013
  _lcd_write_data 0x0013
  _lcd_write_data 0x0001
  _lcd_write_data 0x0008 
  _lcd_write_data 0x0008
  _lcd_write_data 0x0008 
  _lcd_write_data 0x0008 
  _lcd_write_data 0x0010 
  _lcd_write_data 0x0000
  _lcd_write_data 0x0010
  _lcd_write_data 0x0010

  _lcd_write_cmd 0x00fd    
  _lcd_write_data 0x0055 

  _lcd_write_cmd 0x0035 
  _lcd_write_data 0x0000    

  _lcd_write_cmd 0x0036    
  _lcd_write_data 0x0048 

  _lcd_write_cmd 0x003a    
  _lcd_write_data 0x0055 

  _lcd_write_cmd 0x00fe    
  _lcd_write_data 0x0016
  _lcd_write_data 0x0016
  _lcd_write_data 0x0028
  _lcd_write_data 0x0000 
  _lcd_write_data 0x0000
  _lcd_write_data 0x0006 
           
  _lcd_write_cmd 0x00f6    
  _lcd_write_data 0x0010
  _lcd_write_data 0x0080
  _lcd_write_data 0x0000
  _lcd_write_data 0x0010   
           
  _lcd_write_cmd 0x0051    
  _lcd_write_data 0x00ff   
           
  _lcd_write_cmd 0x0053    
  _lcd_write_data 0x0000   
           
  _lcd_write_cmd 0x0055    
  _lcd_write_data 0x0000   
           
  _lcd_write_cmd 0x005e    
  _lcd_write_data 0x0000   
           
  _lcd_write_cmd 0x00ca    
  _lcd_write_data 0x0080
  _lcd_write_data 0x0080
  _lcd_write_data 0x0020  

  _lcd_write_cmd 0x00cb    
  _lcd_write_data 0x0001 

  @ gamma setting
  _lcd_write_cmd 0x00f7    
  _lcd_write_data 0x0092
  _lcd_write_data 0x001a
  _lcd_write_data 0x001e
  _lcd_write_data 0x001a 
  _lcd_write_data 0x001d
  _lcd_write_data 0x001d 
  _lcd_write_data 0x001e 
  _lcd_write_data 0x0026 
  _lcd_write_data 0x001c
  _lcd_write_data 0x001c
  _lcd_write_data 0x0024
  _lcd_write_data 0x001b 
  _lcd_write_data 0x0009
  _lcd_write_data 0x0011
  _lcd_write_data 0x0018

  _lcd_write_cmd 0x00f8    
  _lcd_write_data 0x001a
  _lcd_write_data 0x0000
  _lcd_write_data 0x001e
  _lcd_write_data 0x001a 
  _lcd_write_data 0x001d
  _lcd_write_data 0x001a 
  _lcd_write_data 0x001d 
  _lcd_write_data 0x0024 
  _lcd_write_data 0x001e
  _lcd_write_data 0x001f
  _lcd_write_data 0x0027
  _lcd_write_data 0x001e 
  _lcd_write_data 0x000a
  _lcd_write_data 0x0011
  _lcd_write_data 0x0011

  _lcd_write_cmd 0x00f9    
  _lcd_write_data 0x0086
  _lcd_write_data 0x001a
  _lcd_write_data 0x0010
  _lcd_write_data 0x0010 
  _lcd_write_data 0x001d
  _lcd_write_data 0x001b 
  _lcd_write_data 0x001f 
  _lcd_write_data 0x0027 
  _lcd_write_data 0x001b
  _lcd_write_data 0x001f
  _lcd_write_data 0x0027
  _lcd_write_data 0x001e 
  _lcd_write_data 0x000a
  _lcd_write_data 0x0011
  _lcd_write_data 0x0018
 
  _lcd_write_cmd 0x00fa    
  _lcd_write_data 0x001a
  _lcd_write_data 0x0000
  _lcd_write_data 0x001e
  _lcd_write_data 0x001a 
  _lcd_write_data 0x001d
  _lcd_write_data 0x001a 
  _lcd_write_data 0x001d 
  _lcd_write_data 0x0024 
  _lcd_write_data 0x001e
  _lcd_write_data 0x001f
  _lcd_write_data 0x0027
  _lcd_write_data 0x001e 
  _lcd_write_data 0x000a
  _lcd_write_data 0x0011
  _lcd_write_data 0x0011

  _lcd_write_cmd 0x00fb    
  _lcd_write_data 0x0080
  _lcd_write_data 0x001a
  _lcd_write_data 0x001e
  _lcd_write_data 0x001a 
  _lcd_write_data 0x001d
  _lcd_write_data 0x001b 
  _lcd_write_data 0x001e 
  _lcd_write_data 0x0026 
  _lcd_write_data 0x0017
  _lcd_write_data 0x001a
  _lcd_write_data 0x001d
  _lcd_write_data 0x0014 
  _lcd_write_data 0x0000
  _lcd_write_data 0x0011
  _lcd_write_data 0x0018

  _lcd_write_cmd 0x00fc    
  _lcd_write_data 0x001a
  _lcd_write_data 0x0000
  _lcd_write_data 0x001e
  _lcd_write_data 0x001a 
  _lcd_write_data 0x001d
  _lcd_write_data 0x001a 
  _lcd_write_data 0x001d 
  _lcd_write_data 0x0024 
  _lcd_write_data 0x001e
  _lcd_write_data 0x001f
  _lcd_write_data 0x0027
  _lcd_write_data 0x001e 
  _lcd_write_data 0x000a
  _lcd_write_data 0x0011
  _lcd_write_data 0x0011

  @ address set  
  _lcd_write_cmd 0x002a    
  _lcd_write_data 0x0000
  _lcd_write_data 0x0000
  _lcd_write_data 0x0000
  _lcd_write_data 0x00ef  

  _lcd_write_cmd 0x002b    
  _lcd_write_data 0x0000
  _lcd_write_data 0x0000
  _lcd_write_data 0x0001
  _lcd_write_data 0x003f

  @ display on 
  _lcd_write_cmd 0x0029 

  @ RAM write
  _lcd_write_cmd 0x002c
  pop {pc}
  
  .align 2
  .thumb_func
lcd_write_cmd:
  push {lr}
  _clr_rs
  _set_rd
  _set_wr
  _clr_cs
  _lcd_put_bus_data
  _clr_wr
  _set_wr
  _set_cs
  pop {pc}

  .align 2
  .thumb_func
lcd_write_data:
  push {lr}
  _set_rs
  _set_rd
  _set_wr
  _clr_cs
  _lcd_put_bus_data
  _clr_wr
  _set_wr
  _set_cs
  pop {pc}

  .align 2
  .thumb_func
delay_ms:
  push {lr}
delay_ms_0:
  ldr r1, =DELAY
delay_ms_1:
  sub r1, #1
  cmp r1, #0
  bne delay_ms_1
  sub r0, #1
  cmp r0, #0
  bne delay_ms_0
  pop {pc}

  .align 2
  .thumb_func
blink_led:
  push {lr}
  ldr r0, =GPIOC_ODR
  ldr r1, =0x0000
  ldr r2, =0x2000
  ldr r4, =800000
  str r2, [r0]
blink_led_1:
  sub r4, #1
  cmp r4, #0
  bne blink_led_1
  ldr r4, =800000
  str r1, [r0]
blink_led_2:
  sub r4, #1
  cmp r4, #0
  bne blink_led_2
  pop {pc}
  .end
</pre>

<p>
<img src="s6d04m0x21/7.jpg" class="maxSize">
</p>

<p>
<img src="s6d04m0x21/8.jpg" class="maxSize">
</p>

<p>
<img src="s6d04m0x21/9.jpg" class="maxSize">
</p>

<p>
<img src="s6d04m0x21/10.jpg" class="maxSize">
</p>

<p>
<img src="s6d04m0x21/11.jpg" class="maxSize">
</p>

<p>
<img src="s6d04m0x21/12.jpg" class="maxSize">
</p>

<p>
<br><a href="../../mcu.htm">返回上一頁</a>
</p>

</div>
</div>
</div>
</body>
</html>
