<!--
 ____________________________________________________________
|                                                            |
|    DESIGN + Pat Heard { http://fullahead.org }             |
|      DATE + 2006.09.12                                     |
| COPYRIGHT + Free use if this notice is kept in place.      |
|____________________________________________________________|

-->

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>司徒的教學網站</title>
  <meta http-lowast="content-type" content="application/xhtml+xml; charset=UTF-8" />
  <meta name="author" content="fullahead.org" />
  <meta name="keywords" content="XHTML, CSS, template, FullAhead" />
  <meta name="description" content="A valid, XHTML 1.0 template" />
  <meta name="robots" content="index, follow, noarchive" />
  <meta name="googlebot" content="noarchive" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes, minimum-scale=0.1, maximum-scale=100.0"/>

  <link rel="shortcut icon" href="../../website.ico">
  <link rel="stylesheet" type="text/css" href="../../styles/shCore.css" />
  <link rel="stylesheet" type="text/css" href="../../styles/shThemeDefault.css" />
  <link rel="stylesheet" type="text/css" href="../../css/html.css" media="screen, projection, tv " />
  <link rel="stylesheet" type="text/css" href="../../css/layout.css" media="screen, projection, tv" />
  <link rel="stylesheet" type="text/css" href="../../css/print.css" media="print" />
  
  <script type="text/javascript" src="../../scripts/shCore.js"></script>
  <script type="text/javascript" src="../../scripts/shBrushCpp.js"></script>

  <!-- Conditional comment to apply opacity fix for IE #content background.
       Invalid CSS, but can be removed without harming design -->
  <!--[if gt IE 5]>
  <link rel="stylesheet" type="text/css" href="css/ie.css" media="screen, projection, tv " />
  <![endif]-->
</head>

<body>
<script type="text/javascript">SyntaxHighlighter.all();</script>
<div id="wrapper">
<div id="content">
<script type="text/javascript" src="../../header.js"></script>
<div id="page">
<h3>LinkIt Smart MT7688</h3>
<p><b>驅動2.0吋IPS 320x240顯示屏(ILI9335)(GPIO)</b></p>
<hr size="1">
<p>
[Github] <a href="https://github.com/steward-fu/gh_mt7688_kernel-3.18.44.git">https://github.com/steward-fu/gh_mt7688_kernel-3.18.44.git</a><br>
</p>

<p>
driver/gpio/ili9335_gpio/main.c
</p>

<pre class="brush:cpp">
/*========================================================================================================
  Basically, all of files downloaded from my website can be modified or redistributed for any purpose.
  It is my honor to share my interesting to everybody.
  If you find any illeage content out from my website, please contact me firstly.
  I will remove all of the illeage parts.
  Thanks :)
   
  Steward Fu
  steward.fu@gmail.com
  https://steward-fu.github.io/website/index.htm
========================================================================================================*/
#include &lt;linux/init.h&gt;
#include &lt;linux/device.h&gt;
#include &lt;linux/module.h&gt;
#include &lt;linux/delay.h&gt;
#include &lt;linux/timer.h&gt;
#include &lt;linux/gpio.h&gt;
#include &lt;asm/io.h&gt;
 
MODULE_AUTHOR("Steward_Fu");
MODULE_DESCRIPTION("ILI9335 SLCD Driver for MT7688");
MODULE_LICENSE("GPL");

#define do_output(val, pin) \
  if(val){ \
    gpio_set_value(pin, 1); \
  } \
  else{ \
    gpio_set_value(pin, 0); \
  }

#define do_request(pin, name) \
  if(gpio_request(pin, name) &lt; 0){ \
    printk("failed to request gpio: %s\n", name); \
  } \
  else{ \
    printk("request successfully for gpio: %s\n", name); \
    gpio_direction_output(pin, 1); \
  }

#define GPIO1_MODE         0x10000060
#define GPIO2_MODE         0x10000064

#define ILI9335_SLCD_D17   16
#define ILI9335_SLCD_D16   17
#define ILI9335_SLCD_D15   19
#define ILI9335_SLCD_D14   18
#define ILI9335_SLCD_D13   6
#define ILI9335_SLCD_D12   4
#define ILI9335_SLCD_D11   5
#define ILI9335_SLCD_D10   12

#define ILI9335_SLCD_RS    13
#define ILI9335_SLCD_RST   45
#define ILI9335_SLCD_CS    46
#define ILI9335_SLCD_RD    44
#define ILI9335_SLCD_WR    37

static int g_blink_period=1000;
static struct timer_list g_blink_timer;

static void ili9335_reset(void)
{
  printk("steward, %s++\n", __func__);
  gpio_set_value(ILI9335_SLCD_RST, 1);  
  mdelay(100);
  gpio_set_value(ILI9335_SLCD_RST, 0);
  mdelay(100);  
  gpio_set_value(ILI9335_SLCD_RST, 1);  
  mdelay(100);
  printk("steward, %s--\n", __func__);
}

static void ili9335_send_command(unsigned int val)
{
  unsigned char i, cmd=0;

  gpio_set_value(ILI9335_SLCD_RS, 0);
  gpio_set_value(ILI9335_SLCD_RD, 1);
  gpio_set_value(ILI9335_SLCD_CS, 0);
  for(i=0; i&lt;2; i++){
    cmd = (i == 0) ? (val &gt;&gt; 8) : val;
    do_output(cmd &amp; 0x01, ILI9335_SLCD_D10);
    do_output(cmd &amp; 0x02, ILI9335_SLCD_D11);
    do_output(cmd &amp; 0x04, ILI9335_SLCD_D12);
    do_output(cmd &amp; 0x08, ILI9335_SLCD_D13);
    do_output(cmd &amp; 0x10, ILI9335_SLCD_D14);
    do_output(cmd &amp; 0x20, ILI9335_SLCD_D15);
    do_output(cmd &amp; 0x40, ILI9335_SLCD_D16);
    do_output(cmd &amp; 0x80, ILI9335_SLCD_D17);
    gpio_set_value(ILI9335_SLCD_WR, 0);
    gpio_set_value(ILI9335_SLCD_WR, 1);
  }
  gpio_set_value(ILI9335_SLCD_CS, 1);
}

static void ili9335_send_data(unsigned int val)
{
  unsigned char i, dat=0;

  gpio_set_value(ILI9335_SLCD_RS, 1);
  gpio_set_value(ILI9335_SLCD_RD, 1);
  gpio_set_value(ILI9335_SLCD_CS, 0);
  for(i=0; i&lt;2; i++){
    dat = (i == 0) ? (val &gt;&gt; 8) : val;
    do_output(dat &amp; 0x01, ILI9335_SLCD_D10);
    do_output(dat &amp; 0x02, ILI9335_SLCD_D11);
    do_output(dat &amp; 0x04, ILI9335_SLCD_D12);
    do_output(dat &amp; 0x08, ILI9335_SLCD_D13);
    do_output(dat &amp; 0x10, ILI9335_SLCD_D14);
    do_output(dat &amp; 0x20, ILI9335_SLCD_D15);
    do_output(dat &amp; 0x40, ILI9335_SLCD_D16);
    do_output(dat &amp; 0x80, ILI9335_SLCD_D17);
    gpio_set_value(ILI9335_SLCD_WR, 0);
    gpio_set_value(ILI9335_SLCD_WR, 1);
  }
  gpio_set_value(ILI9335_SLCD_CS, 1);
}

static void ili9335_send_register(unsigned int cmd, unsigned int data)
{
  ili9335_send_command(cmd);
  ili9335_send_data(data);
}

static void ili9335_init(void)
{
  printk("steward, %s++\n", __func__);
  ili9335_send_register(0x0001, 0x0100);
  ili9335_send_register(0x0002, 0x0200);
  ili9335_send_register(0x0003, 0x1018);
  ili9335_send_register(0x0008, 0x0202);
  ili9335_send_register(0x0009, 0x0000);
  ili9335_send_register(0x000A, 0x0000);
  ili9335_send_register(0x000C, 0x0000);
  ili9335_send_register(0x000D, 0x0000);
  ili9335_send_register(0x0060, 0x2700);  
  ili9335_send_register(0x0061, 0x0000);
  ili9335_send_register(0x006A, 0x0000);
  mdelay(10);
  ili9335_send_register(0x0010, 0x1490);
  ili9335_send_register(0x0011, 0x0227);
  mdelay(80);
  ili9335_send_register(0x0012, 0x000c);
  mdelay(10);
  ili9335_send_register(0x0013, 0x1000);
  ili9335_send_register(0x0029, 0x000b);
  ili9335_send_register(0x002b, 0x000b);
  mdelay(10);
  ili9335_send_register(0x0020, 0x0000);
  ili9335_send_register(0x0021, 0x0000);
  
  ili9335_send_register(0x0030, 0x0000);
  ili9335_send_register(0x0031, 0x0406);
  ili9335_send_register(0x0032, 0x0002);
  ili9335_send_register(0x0035, 0x0402);
  ili9335_send_register(0x0036, 0x0004);
  ili9335_send_register(0x0037, 0x0507);
  ili9335_send_register(0x0038, 0x0103);
  ili9335_send_register(0x0039, 0x0707);
  ili9335_send_register(0x003c, 0x0204);
  ili9335_send_register(0x003d, 0x0004);
  
  ili9335_send_register(0x0050, 0x0000);
  ili9335_send_register(0x0051, 0x00ef);
  ili9335_send_register(0x0052, 0x0000);
  ili9335_send_register(0x0053, 0x013f);

  mdelay(10);
  ili9335_send_register(0x0007, 0x0133);  
  printk("steward, %s--\n", __func__);
}

static void show_color(unsigned int val)
{
  int i, j;
 
  ili9335_send_command(0x0022);
  for(i=0; i&lt;240; i++){
    for(j=0; j&lt;320; j++){
      ili9335_send_data(val);
    }
  }
}

static void print_time(void)
{
  struct timeval t;
  struct tm broken;
 
  do_gettimeofday(&amp;t);
  time_to_tm(t.tv_sec, 0, &amp;broken);
  printk("%d:%d:%d:%ld\n", broken.tm_hour, broken.tm_min, broken.tm_sec, t.tv_usec);
}

void blink_handler(unsigned long unused)
{
  static int i=0;
  unsigned long col[]={0xf800, 0x7e0, 0x1f};

  printk("++\n");
  print_time();
  show_color(col[i++ % 3]);
  print_time();
  printk("--\n");

  mod_timer(&amp;g_blink_timer, jiffies + msecs_to_jiffies(g_blink_period));
}

static int __init main_init(void)
{
  volatile unsigned long *ptr;

   printk("Steward Linux Driver Tutorial, ILI9335 SLCD Driver for MT7688\n");

  ptr = ioremap(GPIO1_MODE, 4);
  *ptr&amp;= 0xffff0fff;
  *ptr|= 0x51550555;
  iounmap(ptr);
  
  ptr = ioremap(GPIO2_MODE, 4);
  *ptr = 0x55555555;
  iounmap(ptr);

  // slcd
  do_request(ILI9335_SLCD_WR, "lcd_wr");
  do_request(ILI9335_SLCD_RD, "lcd_rd");
  do_request(ILI9335_SLCD_CS, "lcd_cs");
  do_request(ILI9335_SLCD_RS, "lcd_rs");
  do_request(ILI9335_SLCD_RST, "lcd_rst");
  do_request(ILI9335_SLCD_D10, "lcd_d10");
  do_request(ILI9335_SLCD_D11, "lcd_d11");
  do_request(ILI9335_SLCD_D12, "lcd_d12");
  do_request(ILI9335_SLCD_D13, "lcd_d13");
  do_request(ILI9335_SLCD_D14, "lcd_d14");
  do_request(ILI9335_SLCD_D15, "lcd_d15");
  do_request(ILI9335_SLCD_D16, "lcd_d16");
  do_request(ILI9335_SLCD_D17, "lcd_d17");

  ili9335_reset();
  ili9335_init();
  
  setup_timer(&amp;g_blink_timer, blink_handler, 0);
  mod_timer(&amp;g_blink_timer, jiffies + msecs_to_jiffies(g_blink_period));
  return 0;
}
 
static void __exit main_exit(void)
{
  del_timer(&amp;g_blink_timer);
  gpio_free(ILI9335_SLCD_WR);
  gpio_free(ILI9335_SLCD_RD);
  gpio_free(ILI9335_SLCD_CS);
  gpio_free(ILI9335_SLCD_RS);
  gpio_free(ILI9335_SLCD_RST);
  gpio_free(ILI9335_SLCD_D10);
  gpio_free(ILI9335_SLCD_D11);
  gpio_free(ILI9335_SLCD_D12);
  gpio_free(ILI9335_SLCD_D13);
  gpio_free(ILI9335_SLCD_D14);
  gpio_free(ILI9335_SLCD_D15);
  gpio_free(ILI9335_SLCD_D16);
  gpio_free(ILI9335_SLCD_D17);
  printk("Unload it!\n");
}
 
module_init(main_init);
module_exit(main_exit);
</pre><br>

<p>
完成<br>
<img src="ili9335_gpio/1.jpg" class="maxSize"><br>
P.S. 更新一個畫面大約是0.4秒(Kernel時間參考就好)。
</p>

<p>
<br><a href="../../mcu.htm">返回上一頁</a>
</p>

</div>
</div>
</div>
</body>
</html>
